// Generated by dart2js, the Dart to JavaScript compiler version: 1.4.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = {x: x};
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    }
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    }
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;"
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  JSArray: {
    "^": "Interceptor;",
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isJSArray: true
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true,
    $is$int: true
  },
  JSDouble: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $isString: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_numMicroseconds: function() {
    if (typeof window != "undefined" && window !== null) {
      var performance = window.performance;
      if (performance != null && typeof performance.webkitNow == "function")
        return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
    }
    return 1000 * Date.now();
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  objectHashCode: function(object) {
    if (typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return new H.invokeClosure_closure(closure).call$0();
    else if (t1.$eq(numberOfArguments, 1))
      return new H.invokeClosure_closure0(closure, arg1).call$0();
    else if (t1.$eq(numberOfArguments, 2))
      return new H.invokeClosure_closure1(closure, arg1, arg2).call$0();
    else if (t1.$eq(numberOfArguments, 3))
      return new H.invokeClosure_closure2(closure, arg1, arg2, arg3).call$0();
    else if (t1.$eq(numberOfArguments, 4))
      return new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4).call$0();
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, $, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  invokeClosure_closure: {
    "^": "Closure;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,_target,_receiver,_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  initHooks_closure: {
    "^": "Closure;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  }
}],
["bench2d", "bench2d.dart", , X, {
  "^": "",
  main: function() {
    var t1, t2, bench2d;
    t1 = new Float32Array(2);
    t1[0] = 0;
    t1[1] = -10;
    t2 = new V.DefaultWorldPool(null, null, null);
    t2.DefaultWorldPool$0();
    bench2d = new X.Bench2d(V.World$(new T.Vector2(t1), true, t2));
    bench2d.initialize$0();
    bench2d.warmup$0();
    bench2d.bench$0();
  },
  Bench2d: {
    "^": "Object;world",
    initialize$0: function() {
      var t1, ground, shape, t2, t3, t4, fixDef, x, y, i, t5, j, bd, t6, t7, t8, t9;
      t1 = this.world;
      ground = t1.createBody$1(V.BodyDef$());
      shape = V.PolygonShape$();
      t2 = new Float32Array(2);
      t3 = new T.Vector2(t2);
      t2[0] = -40;
      t2[1] = 0;
      t2 = new Float32Array(2);
      t4 = new T.Vector2(t2);
      t2[0] = 40;
      t2[1] = 0;
      shape.vertexCount = 2;
      t2 = shape.vertices;
      t2[0].setFrom$1(t3);
      t2[1].setFrom$1(t4);
      shape.centroid.setFrom$1(t3).add$1(0, t4).scale$1(0.5);
      t2 = shape.normals;
      t2[0].setFrom$1(t4).sub$1(t3);
      t3 = t2[0];
      V.Vector2_crossVectorAndNumToOut(t3, 1, t3);
      t2[0].normalize$0();
      t2[1].setFrom$1(t2[0]).negate$0();
      fixDef = V.FixtureDef$();
      fixDef.shape = shape;
      fixDef.density = 0;
      ground.createFixture$1(fixDef);
      shape = V.PolygonShape$();
      shape.vertexCount = 4;
      t2 = shape.vertices;
      t2[0].setValues$2(-0.5, -0.5);
      t2[1].setValues$2(0.5, -0.5);
      t2[2].setValues$2(0.5, 0.5);
      t2[3].setValues$2(-0.5, 0.5);
      t2 = shape.normals;
      t3 = t2[0].storage;
      t3[0] = 0;
      t3[1] = -1;
      t3 = t2[1].storage;
      t3[0] = 1;
      t3[1] = 0;
      t3 = t2[2].storage;
      t3[0] = 0;
      t3[1] = 1;
      t2 = t2[3].storage;
      t2[0] = -1;
      t2[1] = 0;
      shape.centroid.setZero$0();
      fixDef = V.FixtureDef$();
      fixDef.shape = shape;
      fixDef.density = 5;
      t2 = new Float32Array(2);
      x = new T.Vector2(t2);
      t2[0] = -7;
      t2[1] = 0.75;
      y = new T.Vector2(new Float32Array(2));
      t2 = new Float32Array(2);
      t2[0] = 0.5625;
      t2[1] = 1;
      t3 = new Float32Array(2);
      t3[0] = 1.125;
      t3[1] = 0;
      for (i = 0; i < 40; ++i) {
        t4 = y.storage;
        t5 = x.storage;
        t4[1] = t5[1];
        t4[0] = t5[0];
        for (j = i; j < 40; ++j) {
          bd = V.BodyDef$();
          bd.type = 2;
          t4 = bd.position.storage;
          t6 = y.storage;
          t4[1] = t6[1];
          t4[0] = t6[0];
          t1.createBody$1(bd).createFixture$1(fixDef);
          t4 = t6[0];
          t7 = t3[0];
          t6 = t6[1];
          t8 = t3[1];
          t9 = new Float32Array(2);
          y = new T.Vector2(t9);
          t9[0] = t4 + t7;
          t9[1] = t6 + t8;
        }
        t4 = t5[0];
        t6 = t2[0];
        t5 = t5[1];
        t7 = t2[1];
        t8 = new Float32Array(2);
        x = new T.Vector2(t8);
        t8[0] = t4 + t6;
        t8[1] = t5 + t7;
      }
    },
    warmup$0: function() {
      var t1, i;
      for (t1 = this.world, i = 0; i < 64; ++i)
        t1.step$3(0.016666666666666666, 3, 3);
    },
    mean$1: function(values) {
      var total, i, t1;
      for (total = 0, i = 0; i < 256; ++i) {
        t1 = values[i];
        if (typeof t1 !== "number")
          return H.iae(t1);
        total += t1;
      }
      return total / 256;
    },
    percentile$2: function(values, pc) {
      var rank = C.JSNumber_methods.toInt$0(Math.floor(pc * 256 / 100));
      if (rank < 0 || rank >= 256)
        return H.ioore(values, rank);
      return values[rank];
    },
    bench$0: function() {
      var times, t1, i, watch, line;
      times = Array(256);
      for (t1 = this.world, i = 0; i < 256; ++i) {
        watch = new P.Stopwatch(1000000, null, null);
        watch.start$0();
        t1.step$3(0.016666666666666666, 3, 3);
        watch.stop$0();
        times[i] = C.JSNumber_methods._tdivFast$1(watch.get$elapsedTicks() * 1000, 1000000);
      }
      H.IterableMixinWorkaround_sortList(times, null);
      line = "Benchmark complete.\nms/frame: " + H.S(this.mean$1(times)) + " 5th %ile: " + H.S(this.percentile$2(times, 5)) + " 95th %ile: " + H.S(this.percentile$2(times, 95));
      H.printString(line);
    },
    static: {"^": "Bench2d_WARMUP,Bench2d_FRAMES,Bench2d_PYRAMID_SIZE,Bench2d_GRAVITY,Bench2d_TIME_STEP,Bench2d_VELOCITY_ITERATIONS,Bench2d_POSITION_ITERATIONS"}
  }
},
1],
["box2d", "package:box2d/box2d.dart", , V, {
  "^": "",
  MathBox_distanceSquared: function(v1, v2) {
    var t1, t2, dx, dy;
    t1 = v1.storage;
    t2 = v2.storage;
    dx = t1[0] - t2[0];
    dy = t1[1] - t2[1];
    return dx * dx + dy * dy;
  },
  Vector2_crossVectorAndNumToOut: function(a, s, out) {
    var t1, t2, t3;
    t1 = a.storage;
    t2 = t1[0];
    t1 = t1[1];
    t3 = out.storage;
    t3[0] = s * t1;
    t3[1] = -s * t2;
  },
  ContactFilter: {
    "^": "Object;",
    shouldCollide$2: function(fixtureA, fixtureB) {
      var filterA, filterB, t1;
      filterA = fixtureA.filter;
      filterB = fixtureB.filter;
      t1 = filterA.groupIndex;
      if (t1 !== 0 && t1 === filterB.groupIndex)
        return t1 > 0;
      return (filterA.maskBits & filterB.categoryBits) !== 0 && (filterA.categoryBits & filterB.maskBits) !== 0;
    }
  },
  ContactImpulse: {
    "^": "Object;normalImpulses,tangentImpulses"
  },
  AxisAlignedBox: {
    "^": "Object;lowerBound<,upperBound",
    setFromCombination$2: function(boxOne, boxTwo) {
      var t1, t2;
      t1 = this.lowerBound;
      t2 = P.min(boxOne.lowerBound.storage[0], boxTwo.lowerBound.storage[0]);
      t1.storage[0] = t2;
      t2 = this.lowerBound;
      t1 = P.min(boxOne.lowerBound.storage[1], boxTwo.lowerBound.storage[1]);
      t2.storage[1] = t1;
      t1 = this.upperBound;
      t2 = P.max(boxOne.upperBound.storage[0], boxTwo.upperBound.storage[0]);
      t1.storage[0] = t2;
      t2 = this.upperBound;
      t1 = P.max(boxOne.upperBound.storage[1], boxTwo.upperBound.storage[1]);
      t2.storage[1] = t1;
    },
    contains$1: function(_, aabb) {
      var t1, t2, t3;
      t1 = this.lowerBound.storage;
      t2 = t1[0];
      t3 = aabb.lowerBound.storage;
      if (t2 > t3[0])
        if (t1[1] > t3[1]) {
          t1 = this.upperBound.storage;
          t2 = t1[1];
          t3 = aabb.upperBound.storage;
          t1 = t2 < t3[1] && t1[0] < t3[0];
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    setFrom$1: function(other) {
      this.lowerBound.setFrom$1(other.get$lowerBound());
      this.upperBound.setFrom$1(other.upperBound);
    },
    toString$0: function(_) {
      return J.toString$0(this.lowerBound) + ", " + J.toString$0(this.upperBound);
    },
    AxisAlignedBox$2: function(lowerBound, upperBound) {
      if (this.lowerBound == null)
        this.lowerBound = new T.Vector2(new Float32Array(2));
      if (this.upperBound == null)
        this.upperBound = new T.Vector2(new Float32Array(2));
    },
    static: {AxisAlignedBox$: function(lowerBound, upperBound) {
        var t1 = new V.AxisAlignedBox(lowerBound, upperBound);
        t1.AxisAlignedBox$2(lowerBound, upperBound);
        return t1;
      }, AxisAlignedBox_testOverlap: function(a, b) {
        var t1, t2, t3;
        t1 = b.lowerBound.storage;
        t2 = t1[0];
        t3 = a.upperBound.storage;
        if (!(t2 > t3[0] || t1[1] > t3[1])) {
          t1 = a.lowerBound.storage;
          t2 = t1[0];
          t3 = b.upperBound.storage;
          t1 = t2 > t3[0] || t1[1] > t3[1];
        } else
          t1 = true;
        return !t1;
      }}
  },
  BroadPhase: {
    "^": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
    updatePairs$1: function(callback) {
      var t1, i, t2, t3, pairBuffer, primaryPair, pair;
      this._pairCount = 0;
      for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
        t2 = t2[i];
        this.queryProxy = t2;
        if (t2 == null)
          continue;
        t1._query$4(this, t2.box, t1._root, 1);
      }
      this.moveBuffer = [];
      t2 = this._pairBuffer;
      t3 = this._pairCount;
      t2.toString;
      H.IterableMixinWorkaround__rangeCheck(t2, 0, t3);
      pairBuffer = P.List_List$from(H.SubListIterable$(t2, 0, t3), true);
      H.IterableMixinWorkaround_sortList(pairBuffer, new V.BroadPhase_updatePairs_closure());
      t2 = this._pairBuffer;
      t3 = this._pairCount;
      t2.toString;
      if (typeof t2 !== "object" || t2 === null || !!t2.immutable$list)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(t2, 0, t3, pairBuffer, 0);
      for (i = 0; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i < 0 || i >= t2.length)
          return H.ioore(t2, i);
        primaryPair = t2[i];
        callback.call$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
        ++i;
        for (; i < this._pairCount;) {
          t2 = this._pairBuffer;
          if (i >= t2.length)
            return H.ioore(t2, i);
          pair = t2[i];
          t2 = pair.get$proxyA();
          t3 = primaryPair.get$proxyA();
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = pair.get$proxyB();
            t3 = primaryPair.get$proxyB();
            t3 = t2 == null ? t3 != null : t2 !== t3;
            t2 = t3;
          } else
            t2 = true;
          if (t2)
            break;
          ++i;
        }
      }
      t1.rebalance$1(4);
    },
    treeCallback$1: function(proxy) {
      var t1, t2, oldBuffer, i, i0, t3, t4, t5;
      if (proxy === this.queryProxy)
        return true;
      t1 = this._pairCount;
      t2 = this._pairCapacity;
      if (t1 === t2) {
        oldBuffer = this._pairBuffer;
        if (typeof t2 !== "number")
          return t2.$mul();
        t1 = t2 * 2;
        this._pairCapacity = t1;
        t2 = Array(t1);
        t2.fixed$length = init;
        this._pairBuffer = t2;
        for (i = oldBuffer.length, i0 = 0; i0 < i; ++i0) {
          t3 = oldBuffer[i0];
          if (i0 >= t1)
            return H.ioore(t2, i0);
          t2[i0] = t3;
        }
        t3 = this._pairCapacity;
        if (typeof t3 !== "number")
          return H.iae(t3);
        for (; i < t3; ++i) {
          if (i >= t1)
            return H.ioore(t2, i);
          t2[i] = new V.Pair(null, null);
        }
      }
      t1 = proxy.key;
      t2 = this.queryProxy;
      t3 = t2.key;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this._pairBuffer;
      t5 = this._pairCount;
      if (t1 < t3) {
        if (t5 >= t4.length)
          return H.ioore(t4, t5);
        t4[t5].set$proxyA(proxy);
        t1 = this._pairBuffer;
        t2 = this._pairCount;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2].set$proxyB(this.queryProxy);
      } else {
        if (t5 >= t4.length)
          return H.ioore(t4, t5);
        t4[t5].set$proxyA(t2);
        t1 = this._pairBuffer;
        t2 = this._pairCount;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2].set$proxyB(proxy);
      }
      ++this._pairCount;
      return true;
    },
    BroadPhase$0: function() {
      var t1, t2, i;
      this.moveBuffer = [];
      t1 = this._pairCapacity;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = Array(t1);
      t2.fixed$length = init;
      this._pairBuffer = t2;
      for (i = 0; i < t1; ++i) {
        if (i >= t1)
          return H.ioore(t2, i);
        t2[i] = new V.Pair(null, null);
      }
    },
    static: {"^": "BroadPhase_NULL_PROXY,BroadPhase_PAIR_CAPACITY", BroadPhase$: function() {
        var t1 = new V.BroadPhase(V.DynamicTree$(), 0, null, null, 16, 0, null);
        t1.BroadPhase$0();
        return t1;
      }}
  },
  BroadPhase_updatePairs_closure: {
    "^": "Closure;",
    call$2: function(a, b) {
      return J.compareTo$1$ns(a, b);
    }
  },
  DynamicTree: {
    "^": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center,deltaOne,deltaTwo",
    createProxy$2: function(box, userData) {
      var proxy, t1, t2, t3, t4, iterationCount, height, tryCount;
      proxy = this._allocateNode$0();
      t1 = proxy.box;
      t2 = t1.lowerBound;
      t3 = box.lowerBound.storage;
      t4 = t3[0];
      t2 = t2.storage;
      t2[0] = t4 - 0.1;
      t2[1] = t3[1] - 0.1;
      t1 = t1.upperBound;
      t3 = box.upperBound.storage;
      t2 = t3[0];
      t1 = t1.storage;
      t1[0] = t2 + 0.1;
      t1[1] = t3[1] + 0.1;
      proxy.userData = userData;
      this._insertLeaf$1(proxy);
      iterationCount = C.JSInt_methods._shrOtherPositive$1(this._nodeCount, 4);
      height = this._computeHeight$1(this._root);
      tryCount = 0;
      while (true) {
        if (!(height > 64 && tryCount < 10))
          break;
        this.rebalance$1(iterationCount);
        height = this._computeHeight$1(this._root);
        ++tryCount;
      }
      return proxy;
    },
    moveProxy$3: function(argProxy, argBox, displacement) {
      var t1, t2, t3, t4;
      t1 = argProxy.box;
      if (t1.contains$1(0, argBox))
        return false;
      this._removeLeaf$1(argProxy);
      t2 = argBox.lowerBound.storage;
      t2[0] = t2[0] - 0.1;
      t2[1] = t2[1] - 0.1;
      t2 = argBox.upperBound.storage;
      t2[0] = t2[0] + 0.1;
      t2[1] = t2[1] + 0.1;
      t2 = this._tempVector;
      t2.setFrom$1(displacement);
      t2.scale$1(2);
      t2 = t2.storage;
      t3 = t2[0];
      if (t3 < 0) {
        t4 = argBox.lowerBound.storage;
        t4[0] = t4[0] + t3;
      } else {
        t4 = argBox.upperBound.storage;
        t4[0] = t4[0] + t3;
      }
      t2 = t2[1];
      if (t2 < 0) {
        t3 = argBox.lowerBound.storage;
        t3[1] = t3[1] + t2;
      } else {
        t3 = argBox.upperBound.storage;
        t3[1] = t3[1] + t2;
      }
      t1.lowerBound.setFrom$1(argBox.lowerBound);
      t1.upperBound.setFrom$1(argBox.upperBound);
      this._insertLeaf$1(argProxy);
      return true;
    },
    _allocateNode$0: function() {
      var t1, i, t2, node;
      t1 = this._nodeStack;
      if (t1._head === t1._tail)
        for (i = 0; i < 6; ++i) {
          t2 = new V.AxisAlignedBox(null, null);
          t2.lowerBound = new T.Vector2(new Float32Array(2));
          t2.upperBound = new T.Vector2(new Float32Array(2));
          t1.addFirst$1(new V.DynamicTreeNode(t2, null, null, null, null, null, null));
        }
      node = t1.removeFirst$0();
      node.set$parent(null);
      node.childOne = null;
      node.childTwo = null;
      node.userData = null;
      t1 = this._nodeCounter;
      node.key = t1;
      this._nodeCounter = t1 + 1;
      ++this._nodeCount;
      return node;
    },
    _query$4: function(callback, argBox, node, count) {
      var t1;
      if (node == null)
        return true;
      if (V.AxisAlignedBox_testOverlap(argBox, node.box)) {
        t1 = node.childOne;
        if (t1 == null) {
          if (!callback.treeCallback$1(node))
            return false;
        } else {
          if (count < 64) {
            ++count;
            if (!this._query$4(callback, argBox, t1, count))
              return false;
          }
          if (count < 64)
            if (!this._query$4(callback, argBox, node.childTwo, count + 1))
              return false;
        }
      }
      return true;
    },
    _insertLeaf$1: function(node) {
      var t1, t2, t3, t4, sibling, t5, t6, childOne, childTwo, t7, t8, t9, node1, node2, node10;
      ++this._insertionCount;
      if (this._root == null) {
        this._root = node;
        node.parent = null;
        return;
      }
      t1 = this.center;
      t2 = node.box;
      t3 = t2.lowerBound;
      t4 = new Float32Array(2);
      t3 = t3.storage;
      t4[1] = t3[1];
      t4[0] = t3[0];
      new T.Vector2(t4).add$1(0, t2.upperBound);
      t4[1] = t4[1] * 0.5;
      t4[0] = t4[0] * 0.5;
      t3 = t1.storage;
      t3[1] = t4[1];
      t3[0] = t4[0];
      sibling = this._root;
      if (sibling.childOne != null) {
        t3 = this.deltaOne;
        t4 = this.deltaTwo;
        t5 = t3.storage;
        t6 = t4.storage;
        do {
          childOne = sibling.childOne;
          childTwo = sibling.childTwo;
          t7 = childOne.box;
          t8 = t7.lowerBound;
          t9 = new Float32Array(2);
          t8 = t8.storage;
          t9[1] = t8[1];
          t9[0] = t8[0];
          new T.Vector2(t9).add$1(0, t7.upperBound);
          t9[1] = t9[1] * 0.5;
          t9[0] = t9[0] * 0.5;
          t5[1] = t9[1];
          t5[0] = t9[0];
          t9 = childTwo.box;
          t7 = t9.lowerBound;
          t8 = new Float32Array(2);
          t7 = t7.storage;
          t8[1] = t7[1];
          t8[0] = t7[0];
          new T.Vector2(t8).add$1(0, t9.upperBound);
          t8[1] = t8[1] * 0.5;
          t8[0] = t8[0] * 0.5;
          t6[1] = t8[1];
          t6[0] = t8[0];
          t8 = t3.sub$1(t1).storage;
          t8[1] = Math.abs(t8[1]);
          t8[0] = Math.abs(t8[0]);
          t8 = t4.sub$1(t1).storage;
          t8[1] = Math.abs(t8[1]);
          t8[0] = Math.abs(t8[0]);
          sibling = t5[0] + t5[1] < t6[0] + t6[1] ? childOne : childTwo;
        } while (sibling.childOne != null);
      }
      node1 = sibling.parent;
      node2 = this._allocateNode$0();
      node2.parent = node1;
      node2.userData = null;
      node2.box.setFromCombination$2(t2, sibling.box);
      if (node1 != null) {
        if (sibling.parent.childOne === sibling)
          node1.childOne = node2;
        else
          node1.childTwo = node2;
        node2.childOne = sibling;
        node2.childTwo = node;
        sibling.parent = node2;
        node.parent = node2;
        do {
          t1 = node1.box;
          if (t1.contains$1(0, node2.box))
            break;
          t1.setFromCombination$2(node1.childOne.box, node1.childTwo.box);
          node10 = node1.parent;
          if (node10 != null) {
            node2 = node1;
            node1 = node10;
            continue;
          } else
            break;
        } while (true);
      } else {
        node2.childOne = sibling;
        node2.childTwo = node;
        sibling.parent = node2;
        node.parent = node2;
        this._root = node2;
      }
    },
    _removeLeaf$1: function(argNode) {
      var t1, node2, node1, sibling, t2, t3, t4;
      t1 = this._root;
      if (argNode == null ? t1 == null : argNode === t1) {
        this._root = null;
        t1 = this._lastLeaf;
        if (t1 == null ? argNode == null : t1 === argNode)
          this._lastLeaf = null;
        return;
      }
      node2 = argNode.parent;
      node1 = node2.parent;
      sibling = node2.childOne;
      if (sibling == null ? argNode == null : sibling === argNode)
        sibling = node2.childTwo;
      if (node1 != null) {
        t1 = node1.childOne;
        if (t1 == null ? node2 == null : t1 === node2)
          node1.childOne = sibling;
        else
          node1.childTwo = sibling;
        sibling.parent = node1;
        this._nodeStack.addFirst$1(node2);
        --this._nodeCount;
        for (t1 = this._tempBox; node1 != null;) {
          t2 = node1.box;
          t3 = t1.lowerBound;
          t4 = t2.lowerBound;
          t3 = t3.storage;
          t4 = t4.storage;
          t3[1] = t4[1];
          t3[0] = t4[0];
          t4 = t1.upperBound;
          t3 = t2.upperBound;
          t4 = t4.storage;
          t3 = t3.storage;
          t4[1] = t3[1];
          t4[0] = t3[0];
          t2.setFromCombination$2(node1.childOne.box, node1.childTwo.box);
          if (t1.contains$1(0, t2))
            break;
          node1 = node1.parent;
        }
      } else {
        this._root = sibling;
        sibling.parent = null;
        this._nodeStack.addFirst$1(node2);
        --this._nodeCount;
      }
      t1 = this._lastLeaf;
      if (t1 == null ? argNode == null : t1 === argNode)
        this._lastLeaf = this._root;
    },
    _computeHeight$1: function(node) {
      if (node == null)
        return 0;
      return 1 + P.max(this._computeHeight$1(node.childOne), this._computeHeight$1(node.childTwo));
    },
    rebalance$1: function(iterations) {
      var i, current, t1, bit, current0;
      if (this._root == null)
        return;
      for (i = 0; i < iterations; ++i) {
        current = this._root;
        for (t1 = this._path, bit = 0; current0 = current.childOne, current0 != null;) {
          current = (C.JSInt_methods._shrBothPositive$1(t1, bit) & 1) === 0 ? current0 : current.childTwo;
          bit = bit + 1 & 31;
        }
        this._path = t1 + 1;
        this._removeLeaf$1(current);
        this._insertLeaf$1(current);
      }
    },
    DynamicTree$0: function() {
      var t1, i;
      for (t1 = this._drawVectors, i = 0; i < 4; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {"^": "DynamicTree_MAX_STACK_SIZE,DynamicTree__DEFAULT_NODE_ADDITION", DynamicTree$: function() {
        var t1, t2, t3, t4, t5;
        t1 = new Float32Array(2);
        t2 = V.AxisAlignedBox$(null, null);
        t3 = new P.ListQueue(null, 0, 0, 0);
        t3.ListQueue$1(null);
        t4 = new Float32Array(2);
        t5 = new Float32Array(2);
        t1 = new V.DynamicTree(null, 0, null, 0, 0, t3, Array(4), 0, new T.Vector2(t1), t2, new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(new Float32Array(2)));
        t1.DynamicTree$0();
        return t1;
      }}
  },
  DynamicTreeNode: {
    "^": "Object;box,parent?,next,childOne,childTwo,userData<,key<",
    toString$0: function(_) {
      var t1 = this.box;
      return J.toString$0(t1.lowerBound) + ", " + J.toString$0(t1.upperBound);
    }
  },
  Pair: {
    "^": "Object;proxyA@,proxyB@",
    compareTo$1: function(_, pair2) {
      var t1, t2;
      t1 = this.proxyA.key;
      t2 = pair2.get$proxyA().get$key();
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2)
        return -1;
      t1 = this.proxyA.key;
      t2 = pair2.get$proxyA().get$key();
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.proxyB.key;
        t2 = pair2.get$proxyB().get$key();
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2)
          t1 = -1;
        else {
          t1 = this.proxyB.key;
          t2 = pair2.get$proxyB().get$key();
          t1 = (t1 == null ? t2 == null : t1 === t2) ? 0 : 1;
        }
        return t1;
      }
      return 1;
    }
  },
  Collision: {
    "^": "Object;_pool,cache,input,output,results1,results2,incidentEdge,localTangent,localNormal,planePoint,tangent,normal,normal1,v11,v12,clipPoints1,clipPoints2",
    collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
      var v, t1, t2, t3, t4, t5, t6, v1, t7, t8, t9, t10, t11, dx, dy, radius;
      manifold.pointCount = 0;
      v = circle1.get$position();
      t1 = xfA.position.storage;
      t2 = t1[1];
      t3 = xfA.rotation.storage;
      t4 = C.JSNumber_methods.$mul(t3[1], v.get$x());
      t5 = C.JSNumber_methods.$mul(t3[3], v.get$y());
      t1 = t1[0];
      t6 = C.JSNumber_methods.$mul(t3[0], v.get$x());
      t3 = C.JSNumber_methods.$mul(t3[2], v.get$y());
      v1 = circle2.get$position();
      t7 = xfB.position.storage;
      t8 = t7[1];
      t9 = xfB.rotation.storage;
      t10 = C.JSNumber_methods.$mul(t9[1], v1.get$x());
      t11 = C.JSNumber_methods.$mul(t9[3], v1.get$y());
      dx = t7[0] + C.JSNumber_methods.$mul(t9[0], v1.get$x()) + C.JSNumber_methods.$mul(t9[2], v1.get$y()) - (t1 + t6 + t3);
      dy = t8 + t10 + t11 - (t2 + t4 + t5);
      radius = circle1.radius.$add(0, circle2.radius);
      if (C.JSNumber_methods.$gt(dx * dx + dy * dy, radius.$mul(0, radius)))
        return;
      manifold.type = 0;
      manifold.localPoint.setFrom$1(circle1.get$position());
      manifold.localNormal.setZero$0();
      manifold.pointCount = 1;
      t1 = manifold.points;
      t1[0].localPoint.setFrom$1(circle2.get$position());
      t1[0].id.features.zero$0();
    },
    collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
      var v, t1, t2, t3, t4, t5, t6, v1x, v1y, bx, by, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, s, vertIndex2, v1, v2, mpoint, temp2X, t7, temp3X, t8, temp3Y, t9, dx, dy, fcx, fcy, norm;
      manifold.pointCount = 0;
      v = circle.get$position();
      t1 = xfB.position.storage;
      t2 = t1[1];
      t3 = xfB.rotation.storage;
      t4 = C.JSNumber_methods.$mul(t3[1], v.get$x());
      t5 = C.JSNumber_methods.$mul(t3[3], v.get$y());
      t6 = xfA.position.storage;
      v1x = t1[0] + C.JSNumber_methods.$mul(t3[0], v.get$x()) + C.JSNumber_methods.$mul(t3[2], v.get$y()) - t6[0];
      v1y = t2 + t4 + t5 - t6[1];
      t6 = xfA.rotation.storage;
      bx = t6[0];
      by = t6[1];
      cLocaly = v1x * t6[2] + v1y * t6[3];
      cLocalx = v1x * bx + v1y * by;
      radius = C.JSDouble_methods.$add(polygon.radius, circle.radius);
      vertexCount = polygon.vertexCount;
      vertices = polygon.vertices;
      normals = polygon.normals;
      for (normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
        if (i >= 8)
          return H.ioore(vertices, i);
        vertex = vertices[i];
        t1 = vertex.get$x();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = vertex.get$y();
        t3 = normals[i].storage;
        s = t3[0] * (cLocalx - t1) + t3[1] * (cLocaly - t2);
        if (s > radius)
          return;
        if (s > separation) {
          separation = s;
          normalIndex = i;
        }
      }
      vertIndex2 = normalIndex + 1;
      vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
      if (normalIndex < 0 || normalIndex >= 8)
        return H.ioore(vertices, normalIndex);
      v1 = vertices[normalIndex];
      if (vertIndex2 < 0 || vertIndex2 >= 8)
        return H.ioore(vertices, vertIndex2);
      v2 = vertices[vertIndex2];
      if (separation < 1.192e-7) {
        manifold.pointCount = 1;
        manifold.type = 1;
        t1 = normals[normalIndex].storage;
        t2 = manifold.localNormal.storage;
        t2[0] = t1[0];
        t2[1] = t1[1];
        t1 = manifold.localPoint.storage;
        t1[0] = J.$mul$ns(J.$add$ns(v1.get$x(), v2.get$x()), 0.5);
        t1[1] = (v1.get$y() + v2.get$y()) * 0.5;
        mpoint = manifold.points[0];
        t1 = mpoint.localPoint.storage;
        t1[0] = circle.get$position().get$x();
        t1[1] = circle.get$position().get$y();
        mpoint.id.features.zero$0();
        return;
      }
      t1 = v1.get$x();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = v1.get$y();
      t3 = v2.get$x();
      t4 = v1.storage;
      temp2X = J.$sub$n(t3, t4[0]);
      t3 = v2.get$y();
      t5 = t4[1];
      if (typeof temp2X !== "number")
        return H.iae(temp2X);
      t6 = v2.storage;
      t7 = t6[0];
      temp3X = cLocalx - t7;
      t8 = t6[1];
      temp3Y = cLocaly - t8;
      t9 = t4[0];
      if ((cLocalx - t1) * temp2X + (cLocaly - t2) * (t3 - t5) <= 0) {
        dx = cLocalx - t9;
        dy = cLocaly - t5;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        t1 = manifold.localNormal;
        t2 = t1.storage;
        t2[0] = dx;
        t2[1] = cLocaly - t4[1];
        t1.normalize$0();
        manifold.localPoint.setFrom$1(v1);
        t1 = manifold.points;
        t1[0].localPoint.setFrom$1(circle.get$position());
        t1[0].id.features.zero$0();
      } else if (temp3X * (t9 - t7) + temp3Y * (t5 - t8) <= 0) {
        if (temp3X * temp3X + temp3Y * temp3Y > radius * radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        t1 = manifold.localNormal;
        t2 = t1.storage;
        t2[0] = temp3X;
        t2[1] = cLocaly - t6[1];
        t1.normalize$0();
        manifold.localPoint.setFrom$1(v2);
        t1 = manifold.points;
        t1[0].localPoint.setFrom$1(circle.get$position());
        t1[0].id.features.zero$0();
      } else {
        fcx = (t9 + t7) * 0.5;
        fcy = (t5 + t8) * 0.5;
        norm = normals[normalIndex];
        t1 = norm.storage;
        if ((cLocalx - fcx) * t1[0] + (cLocaly - fcy) * t1[1] > radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        manifold.localNormal.setFrom$1(norm);
        t1 = manifold.localPoint.storage;
        t1[0] = fcx;
        t1[1] = fcy;
        t1 = manifold.points;
        t1[0].localPoint.setFrom$1(circle.get$position());
        t1[0].id.features.zero$0();
      }
    },
    edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
      var normals1, count2, vertices2, v, t1, t2, t3, t4, t5, normal1Worldy, normal1Worldx, normal1x, normal1y, index, minDot, i, a, dot, v3, t6, t7, t8, t9, t10, t11, v4, t12, t13, t14, t15, t16, t17, t18, t19;
      normals1 = poly1.normals;
      count2 = poly2.vertexCount;
      vertices2 = poly2.vertices;
      if (edge1 < 0 || edge1 >= 8)
        return H.ioore(normals1, edge1);
      v = normals1[edge1];
      t1 = xf1.rotation.storage;
      t2 = t1[1];
      t3 = v.storage;
      t4 = t3[0];
      t5 = t1[3];
      t3 = t3[1];
      normal1Worldy = t2 * t4 + t5 * t3;
      normal1Worldx = t1[0] * t4 + t1[2] * t3;
      t3 = xf2.rotation.storage;
      normal1x = normal1Worldx * t3[0] + normal1Worldy * t3[1];
      normal1y = normal1Worldx * t3[2] + normal1Worldy * t3[3];
      for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
        if (i >= 8)
          return H.ioore(vertices2, i);
        a = vertices2[i];
        dot = J.$add$ns(J.$mul$ns(a.get$x(), normal1x), a.get$y() * normal1y);
        if (typeof dot !== "number")
          return dot.$lt();
        if (dot < minDot) {
          minDot = dot;
          index = i;
        }
      }
      v3 = poly1.vertices[edge1];
      t2 = xf1.position.storage;
      t4 = t2[1];
      t5 = t1[1];
      t6 = v3.get$x();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t1[3];
      t8 = v3.get$y();
      t2 = t2[0];
      t9 = t1[0];
      t10 = v3.storage;
      t11 = t10[0];
      t1 = t1[2];
      t10 = t10[1];
      if (index < 0 || index >= 8)
        return H.ioore(vertices2, index);
      v4 = vertices2[index];
      t12 = xf2.position.storage;
      t13 = t12[1];
      t14 = t3[1];
      t15 = v4.get$x();
      if (typeof t15 !== "number")
        return H.iae(t15);
      t16 = t3[3];
      t17 = v4.get$y();
      t12 = t12[0];
      t18 = t3[0];
      t19 = v4.storage;
      return (t12 + t18 * t19[0] + t3[2] * t19[1] - (t2 + t9 * t11 + t1 * t10)) * normal1Worldx + (t13 + t14 * t15 + t16 * t17 - (t4 + t5 * t6 + t7 * t8)) * normal1Worldy;
    },
    findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
      var count1, normals1, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, dx, dy, dLocal1x, dLocal1y, edge, maxDot, i, dot, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
      count1 = poly1.vertexCount;
      normals1 = poly1.normals;
      t1 = xf2.position.storage;
      t2 = t1[1];
      t3 = xf2.rotation.storage;
      t4 = t3[1];
      t5 = poly2.centroid.storage;
      t6 = t5[0];
      t7 = t3[3];
      t5 = t5[1];
      t1 = t1[0];
      t8 = t3[0];
      t3 = t3[2];
      t9 = xf1.position.storage;
      t10 = t9[1];
      t11 = xf1.rotation.storage;
      t12 = t11[1];
      t13 = poly1.centroid.storage;
      t14 = t13[0];
      t15 = t11[3];
      t13 = t13[1];
      t9 = t9[0];
      t16 = t11[0];
      t11 = t11[2];
      dx = t1 + t8 * t6 + t3 * t5 - (t9 + t16 * t14 + t11 * t13);
      dy = t2 + t4 * t6 + t7 * t5 - (t10 + t12 * t14 + t15 * t13);
      dLocal1x = dx * t16 + dy * t12;
      dLocal1y = dx * t11 + dy * t15;
      for (edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
        if (i >= 8)
          return H.ioore(normals1, i);
        t1 = normals1[i].storage;
        dot = t1[0] * dLocal1x + t1[1] * dLocal1y;
        if (dot > maxDot) {
          maxDot = dot;
          edge = i;
        }
      }
      s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
      prevEdge = edge - 1;
      prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
      sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
      nextEdge = edge + 1;
      nextEdge = nextEdge < count1 ? nextEdge : 0;
      sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
      if (sPrev > s && sPrev > sNext) {
        bestSeparation = sPrev;
        bestEdge = prevEdge;
        increment = -1;
      } else {
        if (sNext > s)
          ;
        else {
          results.edgeIndex = edge;
          results.separation = s;
          return;
        }
        bestSeparation = sNext;
        bestEdge = nextEdge;
        increment = 1;
      }
      for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
        if (t1) {
          edge0 = bestEdge - 1;
          edge0 = edge0 >= 0 ? edge0 : edge;
        } else {
          edge0 = bestEdge + 1;
          edge0 = edge0 < count1 ? edge0 : 0;
        }
        s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
        if (s > bestSeparation)
          ;
        else
          break;
      }
      results.edgeIndex = bestEdge;
      results.separation = bestSeparation;
    },
    findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
      var normals1, count2, vertices2, normals2, t1, index, minDot, i, dot, i2;
      normals1 = poly1.normals;
      count2 = poly2.vertexCount;
      vertices2 = poly2.vertices;
      normals2 = poly2.normals;
      if (edge1 < 0 || edge1 >= 8)
        return H.ioore(normals1, edge1);
      t1 = this.normal1;
      xf1.rotation.transformed$2(normals1[edge1], t1);
      xf2.rotation.transposed$0().transformed$2(t1, t1);
      for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
        if (i >= 8)
          return H.ioore(normals2, i);
        dot = t1.dot$1(normals2[i]);
        if (dot < minDot) {
          minDot = dot;
          index = i;
        }
      }
      i2 = index + 1;
      i2 = i2 < count2 ? i2 : 0;
      if (index < 0 || index >= 8)
        return H.ioore(vertices2, index);
      V.Transform_mulToOut(xf2, vertices2[index], c[0].v);
      t1 = c[0].id.features;
      t1.referenceEdge = edge1;
      t1.incidentEdge = index;
      t1.incidentVertex = 0;
      if (i2 < 0 || i2 >= 8)
        return H.ioore(vertices2, i2);
      V.Transform_mulToOut(xf2, vertices2[i2], c[1].v);
      t1 = c[1].id.features;
      t1.referenceEdge = edge1;
      t1.incidentEdge = i2;
      t1.incidentVertex = 1;
    },
    collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
      var totalRadius, t1, t2, t3, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t4, t5, t6, t7, frontOffset, t8, np, pointCount, i, cp, v1x, v1y, bx, by, b1x, b1y;
      manifold.pointCount = 0;
      totalRadius = polyA.radius + polyB.radius;
      t1 = this.results1;
      this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
      if (t1.separation > totalRadius)
        return;
      t2 = this.results2;
      this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
      t3 = t2.separation;
      if (t3 > totalRadius)
        return;
      if (t3 > 0.98 * t1.separation + 0.001) {
        edge1 = t2.edgeIndex;
        manifold.type = 2;
        xf2 = xfA;
        xf1 = xfB;
        poly2 = polyA;
        poly1 = polyB;
        flip = 1;
      } else {
        edge1 = t1.edgeIndex;
        manifold.type = 1;
        xf2 = xfB;
        xf1 = xfA;
        poly2 = polyB;
        poly1 = polyA;
        flip = 0;
      }
      t1 = this.incidentEdge;
      this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
      count1 = poly1.vertexCount;
      vertices1 = poly1.vertices;
      t2 = this.v11;
      if (edge1 < 0 || edge1 >= 8)
        return H.ioore(vertices1, edge1);
      t2.setFrom$1(vertices1[edge1]);
      t3 = this.v12;
      t4 = edge1 + 1;
      if (t4 < count1) {
        if (t4 >= 8)
          return H.ioore(vertices1, t4);
        t4 = vertices1[t4];
      } else
        t4 = vertices1[0];
      t3.setFrom$1(t4);
      t4 = this.localTangent;
      t4.setFrom$1(t3).sub$1(t2);
      t4.normalize$0();
      t5 = this.localNormal;
      V.Vector2_crossVectorAndNumToOut(t4, 1, t5);
      t6 = this.planePoint;
      t6.setFrom$1(t2).add$1(0, t3).scale$1(0.5);
      t7 = this.tangent;
      xf1.rotation.transformed$2(t4, t7);
      t4 = this.normal;
      V.Vector2_crossVectorAndNumToOut(t7, 1, t4);
      V.Transform_mulToOut(xf1, t2, t2);
      V.Transform_mulToOut(xf1, t3, t3);
      frontOffset = t4.dot$1(t2);
      t2 = t7.dot$1(t2);
      t3 = t7.dot$1(t3);
      t7.negate$0();
      t8 = this.clipPoints1;
      np = V.Collision_clipSegmentToLine(t8, t1, t7, -t2 + totalRadius);
      t7.negate$0();
      if (np < 2)
        return;
      t1 = this.clipPoints2;
      if (V.Collision_clipSegmentToLine(t1, t8, t7, t3 + totalRadius) < 2)
        return;
      manifold.localNormal.setFrom$1(t5);
      manifold.localPoint.setFrom$1(t6);
      for (t2 = manifold.points, t3 = xf2.position.storage, t5 = xf2.rotation.storage, pointCount = 0, i = 0; i < 2; ++i)
        if (t4.dot$1(t1[i].v) - frontOffset <= totalRadius) {
          if (pointCount >= 2)
            return H.ioore(t2, pointCount);
          cp = t2[pointCount];
          t6 = t1[i];
          t7 = t6.v;
          t8 = cp.localPoint;
          t7 = t7.storage;
          v1x = t7[0] - t3[0];
          v1y = t7[1] - t3[1];
          bx = t5[0];
          by = t5[1];
          b1x = t5[2];
          b1y = t5[3];
          t8 = t8.storage;
          t8[0] = v1x * bx + v1y * by;
          t8[1] = v1x * b1x + v1y * b1y;
          t8 = cp.id.features;
          t6 = t6.id.features;
          t8.referenceEdge = t6.referenceEdge;
          t8.incidentEdge = t6.incidentEdge;
          t8.incidentVertex = t6.incidentVertex;
          t8.flip = t6.flip;
          t8.flip = flip;
          ++pointCount;
        }
      manifold.pointCount = pointCount;
    },
    Collision$_construct$1: function(pool) {
      var t1 = this.incidentEdge;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
      t1 = this.clipPoints1;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
      t1 = this.clipPoints2;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
    },
    static: {"^": "Collision_NULL_FEATURE", Collision_clipSegmentToLine: function(vOut, vIn, norm, offset) {
        var distance0, distance1, t1, t2, numOut, numOut0, vin;
        distance0 = norm.dot$1(vIn[0].v) - offset;
        distance1 = norm.dot$1(vIn[1].v) - offset;
        if (distance0 <= 0) {
          t1 = vOut[0];
          t2 = vIn[0];
          t1.v.setFrom$1(t2.v);
          t1.id.features.setFrom$1(t2.id.features);
          numOut = 1;
        } else
          numOut = 0;
        if (distance1 <= 0) {
          numOut0 = numOut + 1;
          t1 = vOut[numOut];
          t2 = vIn[1];
          t1.v.setFrom$1(t2.v);
          t1.id.features.setFrom$1(t2.id.features);
          numOut = numOut0;
        }
        if (distance0 * distance1 < 0) {
          if (numOut >= 2)
            return H.ioore(vOut, numOut);
          vOut[numOut].v.setFrom$1(vIn[1].v).sub$1(vIn[0].v).scale$1(distance0 / (distance0 - distance1)).add$1(0, vIn[0].v);
          vin = distance0 > 0 ? vIn[0] : vIn[1];
          vOut[numOut].id.features.setFrom$1(vin.id.features);
          ++numOut;
        }
        return numOut;
      }}
  },
  ClipVertex: {
    "^": "Object;v<,id",
    setFrom$1: function(cv) {
      this.v.setFrom$1(cv.get$v());
      this.id.features.setFrom$1(cv.id.features);
    },
    static: {ClipVertex$: function() {
        return new V.ClipVertex(new T.Vector2(new Float32Array(2)), new V.ContactID(V.Features$()));
      }}
  },
  EdgeResults: {
    "^": "Object;separation,edgeIndex"
  },
  ContactID: {
    "^": "Object;features<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other.get$features().$eq(0, this.features);
    },
    setFrom$1: function(other) {
      this.features.setFrom$1(other.get$features());
    }
  },
  Distance: {
    "^": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal",
    distance$3: function(output, cache, input) {
      var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, t7, t8, t9, iter, saveCount, i, t10, vertex, t11, t12, t13, t14, t15, t16, t17, duplicate, rA, rB;
      ++this.calls;
      proxyA = input.proxyA;
      proxyB = input.proxyB;
      transformA = input.transformA;
      transformB = input.transformB;
      t1 = this.simplex;
      t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
      vertices = t1.vertices;
      t2 = this.closestPoint;
      t1.getClosestPoint$1(t2);
      t2.get$length2();
      for (t3 = this.saveA, t4 = this.saveB, t5 = this.temp, t6 = transformB.rotation, t7 = this.searchDirection, t8 = t7.storage, t9 = transformA.rotation, iter = 0; iter < this.maxIters;) {
        saveCount = t1.count;
        for (i = 0; i < saveCount; ++i) {
          if (i >= 3)
            return H.ioore(vertices, i);
          t3[i] = vertices[i].indexA;
          t4[i] = vertices[i].indexB;
        }
        switch (saveCount) {
          case 1:
            break;
          case 2:
            t1.solve2$0();
            break;
          case 3:
            t1.solve3$0();
            break;
          default:
            return;
        }
        if (t1.count === 3)
          break;
        t1.getClosestPoint$1(t2);
        t2.get$length2();
        t1.getSearchDirection$1(t7);
        if (t7.get$length2() < 1.4208639999999999e-14)
          break;
        t10 = t1.count;
        if (t10 >= 3)
          return H.ioore(vertices, t10);
        vertex = vertices[t10];
        t10 = t9.transposed$0();
        t8[1] = -t8[1];
        t8[0] = -t8[0];
        t11 = t5.storage;
        t11[1] = t8[1];
        t11[0] = t8[0];
        t10 = t10.storage;
        t11 = t10[0];
        t12 = t5.storage;
        t13 = t12[0];
        t14 = t10[2];
        t15 = t12[1];
        t16 = t10[1];
        t10 = t10[3];
        t12[0] = t11 * t13 + t14 * t15;
        t12[1] = t16 * t13 + t10 * t15;
        t15 = proxyA.getSupport$1(t5);
        vertex.indexA = t15;
        t10 = proxyA.vertices;
        if (t15 >= 8)
          return H.ioore(t10, t15);
        t15 = t10[t15];
        t10 = vertex.wA;
        V.Transform_mulToOut(transformA, t15, t10);
        t15 = t6.transposed$0();
        t8[1] = -t8[1];
        t8[0] = -t8[0];
        t12[1] = t8[1];
        t12[0] = t8[0];
        t11 = t15.storage;
        t13 = t11[0];
        t14 = t12[0];
        t15 = t11[2];
        t16 = t12[1];
        t17 = t11[1];
        t11 = t11[3];
        t12[0] = t13 * t14 + t15 * t16;
        t12[1] = t17 * t14 + t11 * t16;
        t16 = proxyB.getSupport$1(t5);
        vertex.indexB = t16;
        t11 = proxyB.vertices;
        if (t16 >= 8)
          return H.ioore(t11, t16);
        t16 = t11[t16];
        t11 = vertex.wB;
        V.Transform_mulToOut(transformB, t16, t11);
        t16 = vertex.w;
        t14 = t16.storage;
        t11 = t11.storage;
        t14[1] = t11[1];
        t14[0] = t11[0];
        t16.sub$1(t10);
        ++iter;
        ++this.iters;
        for (i = 0; duplicate = false, i < saveCount; ++i) {
          t10 = vertex.indexA;
          if (i >= 3)
            return H.ioore(t3, i);
          if (J.$eq(t10, t3[i]) && J.$eq(vertex.indexB, t4[i])) {
            duplicate = true;
            break;
          }
        }
        if (duplicate)
          break;
        ++t1.count;
      }
      this.maxIters = P.max(this.maxIters, iter);
      t2 = output.pointA;
      t3 = output.pointB;
      switch (t1.count) {
        case 0:
          break;
        case 1:
          t4 = t1.v1;
          t2.setFrom$1(t4.wA);
          t3.setFrom$1(t4.wB);
          break;
        case 2:
          t4 = t1.case2;
          t6 = t1.v1;
          t4.setFrom$1(t6.wA).scale$1(t6.a);
          t7 = t1.v2;
          t2.setFrom$1(t7.wA).scale$1(t7.a).add$1(0, t4);
          t4.setFrom$1(t6.wB).scale$1(t6.a);
          t3.setFrom$1(t7.wB).scale$1(t7.a).add$1(0, t4);
          break;
        case 3:
          t4 = t1.v1;
          t2.setFrom$1(t4.wA).scale$1(t4.a);
          t4 = t1.case3;
          t6 = t1.v2;
          t4.setFrom$1(t6.wA).scale$1(t6.a);
          t6 = t1.case33;
          t7 = t1.v3;
          t6.setFrom$1(t7.wA).scale$1(t7.a);
          t2.add$1(0, t4).add$1(0, t6);
          t3.setFrom$1(t2);
          break;
        default:
          break;
      }
      t4 = V.MathBox_distanceSquared(t2, t3);
      output.distance = Math.sqrt(t4);
      output.iterations = iter;
      t1.writeCache$1(cache);
      if (input.useRadii) {
        rA = proxyA.get$radius();
        rB = proxyB.get$radius();
        t1 = output.distance;
        t4 = rA + rB;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > t4 && t1 > 1.192e-7) {
          output.distance = t1 - t4;
          t1 = this.normal;
          t1.setFrom$1(t3).sub$1(t2);
          t1.normalize$0();
          t5.setFrom$1(t1).scale$1(rA);
          t2.add$1(0, t5);
          t5.setFrom$1(t1).scale$1(rB);
          t3.sub$1(t5);
        } else {
          t2.add$1(0, t3).scale$1(0.5);
          t3.setFrom$1(t2);
          output.distance = 0;
        }
      }
    }
  },
  DistanceInput: {
    "^": "Object;proxyA@,proxyB@,transformA,transformB,useRadii",
    static: {DistanceInput$: function() {
        return new V.DistanceInput(V.DistanceProxy$(), V.DistanceProxy$(), V.Transform$(), V.Transform$(), false);
      }}
  },
  DistanceOutput: {
    "^": "Object;pointA,pointB,distance,iterations",
    static: {DistanceOutput$: function() {
        var t1 = new Float32Array(2);
        return new V.DistanceOutput(new T.Vector2(t1), new T.Vector2(new Float32Array(2)), null, null);
      }}
  },
  DistanceProxy: {
    "^": "Object;vertices<,count,radius<",
    setFromShape$1: function(shape) {
      var t1, i, t2, t3, t4;
      t1 = shape.type;
      if (t1 === 0) {
        this.vertices[0].setFrom$1(shape.get$position());
        this.count = 1;
        this.radius = shape.radius;
      } else if (t1 === 1) {
        this.count = shape.vertexCount;
        this.radius = shape.radius;
        for (t1 = this.vertices, i = 0; i < this.count; ++i) {
          if (i >= 8)
            return H.ioore(t1, i);
          t2 = t1[i];
          t3 = shape.vertices[i];
          t2 = t2.storage;
          t4 = t3.get$storage();
          if (1 >= t4.length)
            return H.ioore(t4, 1);
          t2[1] = t4[1];
          t3 = t3.get$storage();
          if (0 >= t3.length)
            return H.ioore(t3, 0);
          t2[0] = t3[0];
        }
      }
    },
    getSupport$1: function(direction) {
      var t1, bestValue, bestIndex, i, value;
      t1 = this.vertices;
      bestValue = t1[0].dot$1(direction);
      for (bestIndex = 0, i = 1; i < this.count; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        value = t1[i].dot$1(direction);
        if (value > bestValue) {
          bestValue = value;
          bestIndex = i;
        }
      }
      return bestIndex;
    },
    DistanceProxy$0: function() {
      var t1, i;
      for (t1 = this.vertices, i = 0; i < 8; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {DistanceProxy$: function() {
        var t1 = new V.DistanceProxy(Array(8), 0, 0);
        t1.DistanceProxy$0();
        return t1;
      }}
  },
  Features: {
    "^": "Object;referenceEdge<,incidentEdge,incidentVertex,flip",
    setFrom$1: function(f) {
      this.referenceEdge = f.get$referenceEdge();
      this.incidentEdge = f.incidentEdge;
      this.incidentVertex = f.incidentVertex;
      this.flip = f.flip;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.referenceEdge === other.get$referenceEdge() && this.incidentEdge === other.incidentEdge && this.incidentVertex === other.incidentVertex && this.flip === other.flip;
    },
    toString$0: function(_) {
      return "Features: (" + this.flip + ", " + this.incidentEdge + ", " + this.incidentVertex + " " + this.referenceEdge + ")";
    },
    zero$0: function() {
      this.referenceEdge = 0;
      this.incidentEdge = 0;
      this.incidentVertex = 0;
      this.flip = 0;
    },
    static: {Features$: function() {
        return new V.Features(0, 0, 0, 0);
      }}
  },
  Manifold: {
    "^": "Object;points,localNormal,localPoint<,type,pointCount<",
    setFrom$1: function(other) {
      var t1, i, t2, t3, t4, t5;
      for (t1 = this.points, i = 0; i < other.get$pointCount(); ++i) {
        if (i >= 2)
          return H.ioore(t1, i);
        t2 = t1[i];
        t3 = other.points[i];
        t4 = t2.localPoint.storage;
        t5 = t3.localPoint.storage;
        t4[1] = t5[1];
        t4[0] = t5[0];
        t2.normalImpulse = t3.normalImpulse;
        t2.tangentImpulse = t3.tangentImpulse;
        t2 = t2.id.features;
        t3 = t3.id.features;
        t2.referenceEdge = t3.referenceEdge;
        t2.incidentEdge = t3.incidentEdge;
        t2.incidentVertex = t3.incidentVertex;
        t2.flip = t3.flip;
      }
      this.type = other.type;
      this.localNormal.setFrom$1(other.localNormal);
      this.localPoint.setFrom$1(other.localPoint);
      this.pointCount = other.pointCount;
    },
    Manifold$0: function() {
      var t1, i;
      for (t1 = this.points, i = 0; i < 2; ++i)
        t1[i] = new V.ManifoldPoint(new T.Vector2(new Float32Array(2)), 0, 0, new V.ContactID(new V.Features(0, 0, 0, 0)));
    },
    static: {Manifold$: function() {
        var t1 = new Float32Array(2);
        t1 = new V.Manifold(Array(2), new T.Vector2(t1), new T.Vector2(new Float32Array(2)), null, 0);
        t1.Manifold$0();
        return t1;
      }}
  },
  ManifoldPoint: {
    "^": "Object;localPoint<,normalImpulse@,tangentImpulse@,id",
    setFrom$1: function(other) {
      this.localPoint.setFrom$1(other.get$localPoint());
      this.normalImpulse = other.normalImpulse;
      this.tangentImpulse = other.tangentImpulse;
      this.id.features.setFrom$1(other.id.features);
    }
  },
  MassData: {
    "^": "Object;mass,center,inertia",
    setFrom$1: function(md) {
      this.mass = md.get$mass();
      this.inertia = md.get$inertia();
      this.center.setFrom$1(md.get$center());
    }
  },
  PolygonShape: {
    "^": "Shape;centroid,vertices,normals,vertexCount,type,radius",
    computeAxisAlignedBox$2: function(argAabb, argXf) {
      var t1, lower, t2, t3, v, t4, i, t5;
      t1 = new Float32Array(2);
      lower = new T.Vector2(t1);
      t2 = new Float32Array(2);
      t3 = new Float32Array(2);
      v = new T.Vector2(t3);
      t4 = this.vertices;
      V.Transform_mulToOut(argXf, t4[0], lower);
      new T.Vector2(t2).setFrom$1(lower);
      for (i = 1; i < this.vertexCount; ++i) {
        if (i >= 8)
          return H.ioore(t4, i);
        V.Transform_mulToOut(argXf, t4[i], v);
        t1[0] = P.min(t1[0], t3[0]);
        t1[1] = P.min(t1[1], t3[1]);
        t2[0] = P.max(t2[0], t3[0]);
        t2[1] = P.max(t2[1], t3[1]);
      }
      t3 = argAabb.lowerBound;
      t4 = t1[0];
      t5 = this.radius;
      t3 = t3.storage;
      t3[0] = t4 - t5;
      t3[1] = t1[1] - t5;
      t1 = argAabb.upperBound;
      t3 = t2[0];
      t1 = t1.storage;
      t1[0] = t3 + t5;
      t1[1] = t2[1] + t5;
    },
    computeMass$2: function(massData, density) {
      var t1, center, t2, pRef, t3, e1, t4, e2, t5, area, I, i, t6, p2, p3, $D, triangleArea, px, py, ex1, ey1, ex2, ey2;
      if (this.vertexCount === 2) {
        t1 = this.vertices;
        massData.center.setFrom$1(t1[0]).add$1(0, t1[1]).scale$1(0.5);
        massData.mass = 0;
        massData.inertia = 0;
        return;
      }
      t1 = new Float32Array(2);
      center = new T.Vector2(t1);
      center.setZero$0();
      t2 = new Float32Array(2);
      pRef = new T.Vector2(t2);
      pRef.setZero$0();
      t3 = new Float32Array(2);
      e1 = new T.Vector2(t3);
      t4 = new Float32Array(2);
      e2 = new T.Vector2(t4);
      for (t5 = this.vertices, area = 0, I = 0, i = 0; t6 = this.vertexCount, i < t6;) {
        if (i >= 8)
          return H.ioore(t5, i);
        p2 = t5[i];
        ++i;
        if (i < t6) {
          if (i >= 8)
            return H.ioore(t5, i);
          p3 = t5[i];
        } else
          p3 = t5[0];
        t6 = p2.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t3[1] = t6[1];
        t6 = p2.get$storage();
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t3[0] = t6[0];
        e1.sub$1(pRef);
        t6 = p3.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t4[1] = t6[1];
        t6 = p3.get$storage();
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t4[0] = t6[0];
        e2.sub$1(pRef);
        $D = t3[0] * t4[1] - t3[1] * t4[0];
        triangleArea = 0.5 * $D;
        area += triangleArea;
        t6 = triangleArea * 0.3333333333333333;
        t1[0] = t1[0] + t6 * (t2[0] + p2.get$x() + p3.get$x());
        t1[1] = t1[1] + t6 * (t2[1] + p2.get$y() + p3.get$y());
        px = t2[0];
        py = t2[1];
        ex1 = t3[0];
        ey1 = t3[1];
        ex2 = t4[0];
        ey2 = t4[1];
        I += $D * (0.3333333333333333 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px + (0.3333333333333333 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py));
      }
      if (typeof density !== "number")
        return density.$mul();
      massData.mass = density * area;
      center.scale$1(1 / area);
      massData.center.setFrom$1(center);
      massData.inertia = I * density;
    },
    PolygonShape$copy$1: function(other) {
      var t1, t2, i, t3, t4, t5;
      for (t1 = this.vertices, t2 = other.vertices, i = 0; i < 8; ++i) {
        t3 = t2[i];
        t4 = new Float32Array(2);
        t5 = t3.get$storage();
        if (1 >= t5.length)
          return H.ioore(t5, 1);
        t4[1] = t5[1];
        t3 = t3.get$storage();
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        t4[0] = t3[0];
        t1[i] = new T.Vector2(t4);
      }
      for (t1 = this.normals, t2 = other.normals, i = 0; i < 8; ++i) {
        t3 = t2[i];
        t4 = new Float32Array(2);
        t3 = t3.storage;
        t4[1] = t3[1];
        t4[0] = t3[0];
        t1[i] = new T.Vector2(t4);
      }
    },
    PolygonShape$0: function() {
      var t1, i;
      for (t1 = this.vertices, i = 0; i < 8; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
      for (t1 = this.normals, i = 0; i < 8; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {PolygonShape$: function() {
        var t1 = Array(8);
        t1.fixed$length = init;
        t1 = new V.PolygonShape(new T.Vector2(new Float32Array(2)), t1, Array(8), 0, 1, 0.01);
        t1.PolygonShape$0();
        return t1;
      }, PolygonShape$copy: function(other) {
        var t1, t2, t3, t4;
        t1 = other.radius;
        t2 = other.vertexCount;
        t3 = Array(8);
        t3.fixed$length = init;
        t4 = new T.Vector2(new Float32Array(2));
        t4.setFrom$1(other.centroid);
        t1 = new V.PolygonShape(t4, t3, Array(8), t2, 1, t1);
        t1.PolygonShape$copy$1(other);
        return t1;
      }}
  },
  Shape: {
    "^": "Object;"
  },
  Simplex: {
    "^": "Object;v1,v2,v3,vertices,count,e13,e23,e12,case2,case22,case3,case33",
    readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
      var t1, t2, t3, i, t4, v, t5, wALocal, wBLocal, t6, t7, metric1, metric2;
      this.count = cache.count;
      for (t1 = this.vertices, t2 = cache.indexA, t3 = cache.indexB, i = 0; t4 = this.count, i < t4; ++i) {
        if (i >= 3)
          return H.ioore(t1, i);
        v = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        v.indexA = t2[i];
        if (i >= t3.length)
          return H.ioore(t3, i);
        v.indexB = t3[i];
        t4 = proxyA.get$vertices();
        t5 = v.indexA;
        if (t5 >>> 0 !== t5 || t5 >= 8)
          return H.ioore(t4, t5);
        wALocal = t4[t5];
        t5 = proxyB.get$vertices();
        t4 = v.indexB;
        if (t4 >>> 0 !== t4 || t4 >= 8)
          return H.ioore(t5, t4);
        wBLocal = t5[t4];
        t4 = v.wA;
        V.Transform_mulToOut(transformA, wALocal, t4);
        t5 = v.wB;
        V.Transform_mulToOut(transformB, wBLocal, t5);
        t6 = v.w;
        t7 = t6.storage;
        t5 = t5.storage;
        t7[1] = t5[1];
        t7[0] = t5[0];
        t6.sub$1(t4);
        v.a = 0;
      }
      if (t4 > 1) {
        metric1 = cache.metric;
        metric2 = this.getMetric$0();
        if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < 1.192e-7)
          this.count = 0;
      }
      if (this.count === 0) {
        v = t1[0];
        v.indexA = 0;
        v.indexB = 0;
        wALocal = proxyA.get$vertices()[0];
        wBLocal = proxyB.get$vertices()[0];
        t1 = v.wA;
        V.Transform_mulToOut(transformA, wALocal, t1);
        t2 = v.wB;
        V.Transform_mulToOut(transformB, wBLocal, t2);
        v.w.setFrom$1(t2).sub$1(t1);
        this.count = 1;
      }
    },
    writeCache$1: function(cache) {
      var t1, t2, t3, t4, t5, t6, i, t7;
      cache.metric = this.getMetric$0();
      t1 = this.count;
      cache.count = t1;
      for (t2 = cache.indexA, t3 = this.vertices, t4 = t2.length, t5 = cache.indexB, t6 = t5.length, i = 0; i < t1; ++i) {
        if (i >= 3)
          return H.ioore(t3, i);
        t7 = t3[i].indexA;
        if (i >= t4)
          return H.ioore(t2, i);
        t2[i] = t7;
        t7 = t3[i].indexB;
        if (i >= t6)
          return H.ioore(t5, i);
        t5[i] = t7;
      }
    },
    getSearchDirection$1: function(out) {
      var t1, t2;
      switch (this.count) {
        case 1:
          out.setFrom$1(this.v1.w).negate$0();
          return;
        case 2:
          t1 = this.e12;
          t2 = this.v1.w;
          t1.setFrom$1(this.v2.w).sub$1(t2);
          out.setFrom$1(t2).negate$0();
          if (t1.cross$1(out) > 0)
            V.Vector2_crossVectorAndNumToOut(t1, -1, out);
          else
            V.Vector2_crossVectorAndNumToOut(t1, 1, out);
          break;
        default:
          out.setZero$0();
          return;
      }
    },
    getClosestPoint$1: function(out) {
      var t1, t2, t3;
      switch (this.count) {
        case 0:
          out.setZero$0();
          return;
        case 1:
          out.setFrom$1(this.v1.w);
          return;
        case 2:
          t1 = this.case22;
          t2 = this.v2;
          t1.setFrom$1(t2.w).scale$1(t2.a);
          t2 = this.case2;
          t3 = this.v1;
          t2.setFrom$1(t3.w).scale$1(t3.a).add$1(0, t1);
          out.setFrom$1(t2);
          return;
        case 3:
          out.setZero$0();
          return;
        default:
          out.setZero$0();
          return;
      }
    },
    getMetric$0: function() {
      var t1, t2, t3;
      switch (this.count) {
        case 0:
          return 0;
        case 1:
          return 0;
        case 2:
          t1 = V.MathBox_distanceSquared(this.v1.w, this.v2.w);
          return Math.sqrt(t1);
        case 3:
          t1 = this.case3;
          t2 = this.v1.w;
          t1.setFrom$1(this.v2.w).sub$1(t2);
          t3 = this.case33;
          t3.setFrom$1(this.v3.w).sub$1(t2);
          return t1.cross$1(t3);
        default:
          return 0;
      }
    },
    solve2$0: function() {
      var t1, w1, t2, w2, t3, d12_2, d12_1, inv_d12;
      t1 = this.v1;
      w1 = t1.w;
      t2 = this.v2;
      w2 = t2.w;
      t3 = this.e12;
      t3.setFrom$1(w2).sub$1(w1);
      d12_2 = -w1.dot$1(t3);
      if (d12_2 <= 0) {
        t1.a = 1;
        this.count = 1;
        return;
      }
      d12_1 = w2.dot$1(t3);
      if (d12_1 <= 0) {
        t2.a = 1;
        this.count = 1;
        t1.setFrom$1(t2);
        return;
      }
      inv_d12 = 1 / (d12_1 + d12_2);
      t1.a = d12_1 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
    },
    solve3$0: function() {
      var t1, w1, t2, w2, t3, w3, t4, w1e12, w2e12, d12_2, t5, w1e13, w3e13, d13_2, t6, w2e23, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
      t1 = this.v1;
      w1 = t1.w;
      t2 = this.v2;
      w2 = t2.w;
      t3 = this.v3;
      w3 = t3.w;
      t4 = this.e12;
      t4.setFrom$1(w2).sub$1(w1);
      w1e12 = w1.dot$1(t4);
      w2e12 = w2.dot$1(t4);
      d12_2 = -w1e12;
      t5 = this.e13;
      t5.setFrom$1(w3).sub$1(w1);
      w1e13 = w1.dot$1(t5);
      w3e13 = w3.dot$1(t5);
      d13_2 = -w1e13;
      t6 = this.e23;
      t6.setFrom$1(w3).sub$1(w2);
      w2e23 = w2.dot$1(t6);
      w3e23 = w3.dot$1(t6);
      d23_2 = -w2e23;
      n123 = t4.cross$1(t5);
      d123_1 = n123 * w2.cross$1(w3);
      d123_2 = n123 * w3.cross$1(w1);
      d123_3 = n123 * w1.cross$1(w2);
      if (d12_2 <= 0 && d13_2 <= 0) {
        t1.a = 1;
        this.count = 1;
        return;
      }
      if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
        inv_d12 = 1 / (w2e12 + d12_2);
        t1.a = w2e12 * inv_d12;
        t2.a = d12_2 * inv_d12;
        this.count = 2;
        return;
      }
      if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
        inv_d13 = 1 / (w3e13 + d13_2);
        t1.a = w3e13 * inv_d13;
        t3.a = d13_2 * inv_d13;
        this.count = 2;
        t2.setFrom$1(t3);
        return;
      }
      if (w2e12 <= 0 && d23_2 <= 0) {
        t2.a = 1;
        this.count = 1;
        t1.setFrom$1(t2);
        return;
      }
      if (w3e13 <= 0 && w3e23 <= 0) {
        t3.a = 1;
        this.count = 1;
        t1.setFrom$1(t3);
        return;
      }
      if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
        inv_d23 = 1 / (w3e23 + d23_2);
        t2.a = w3e23 * inv_d23;
        t3.a = d23_2 * inv_d23;
        this.count = 2;
        t1.setFrom$1(t3);
        return;
      }
      inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
      t1.a = d123_1 * inv_d123;
      t2.a = d123_2 * inv_d123;
      t3.a = d123_3 * inv_d123;
      this.count = 3;
    },
    Simplex$0: function() {
      var t1 = this.vertices;
      t1[0] = this.v1;
      t1[1] = this.v2;
      t1[2] = this.v3;
    }
  },
  SimplexCache: {
    "^": "Object;metric,count,indexA,indexB",
    setFrom$1: function(sc) {
      var t1, t2, t3;
      t1 = this.indexA;
      t2 = t1.length;
      t3 = sc.get$indexA();
      H.IterableMixinWorkaround_setRangeList(t1, 0, t2, t3, 0);
      t1 = this.indexB;
      t2 = t1.length;
      t3 = sc.get$indexB();
      H.IterableMixinWorkaround_setRangeList(t1, 0, t2, t3, 0);
      this.metric = sc.get$metric();
      this.count = sc.get$count();
    },
    static: {SimplexCache$: function() {
        return new V.SimplexCache(0, 0, P.List_List$generate(3, new V.SimplexCache_closure(), true), P.List_List$generate(3, new V.SimplexCache_closure0(), true));
      }}
  },
  SimplexCache_closure: {
    "^": "Closure;",
    call$1: function(i) {
      return 2147483647;
    }
  },
  SimplexCache_closure0: {
    "^": "Closure;",
    call$1: function(i) {
      return 2147483647;
    }
  },
  SimplexVertex: {
    "^": "Object;wA<,wB,w,a,indexA,indexB",
    setFrom$1: function(sv) {
      this.wA.setFrom$1(sv.get$wA());
      this.wB.setFrom$1(sv.wB);
      this.w.setFrom$1(sv.w);
      this.a = sv.a;
      this.indexA = sv.indexA;
      this.indexB = sv.indexB;
    },
    toString$0: function(_) {
      return "wA: " + this.wA.toString$0(0) + ", wB: " + this.wB.toString$0(0) + ", w: " + this.w.toString$0(0);
    },
    static: {SimplexVertex$: function() {
        var t1, t2;
        t1 = new Float32Array(2);
        t2 = new Float32Array(2);
        return new V.SimplexVertex(new T.Vector2(t1), new T.Vector2(t2), new T.Vector2(new Float32Array(2)), 0, 0, 0);
      }}
  },
  TimeOfImpact: {
    "^": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA,sweepB,pool",
    timeOfImpact$2: function(output, input) {
      var t1, proxyA, proxyB, t2, tMax, target, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, iter, t14, t20, pushBackIter, done, s2, s1, a2, a1, rootIterCount, t, s;
      t1 = $.TimeOfImpact_toiCalls;
      if (typeof t1 !== "number")
        return t1.$add();
      $.TimeOfImpact_toiCalls = t1 + 1;
      output.state = 0;
      output.t = input.tMax;
      proxyA = input.proxyA;
      proxyB = input.proxyB;
      t1 = this.sweepA;
      t1.setFrom$1(input.sweepA);
      t2 = this.sweepB;
      t2.setFrom$1(input.sweepB);
      t1.normalize$0();
      t2.normalize$0();
      tMax = input.tMax;
      target = P.max(0.005, proxyA.radius + proxyB.radius - 0.015);
      t3 = this.cache;
      t3.count = 0;
      t4 = this.distanceInput;
      t4.proxyA = proxyA;
      t4.proxyB = proxyB;
      t4.useRadii = false;
      for (t5 = this.fcn, t6 = this.indexes, t7 = target + 0.00125, t8 = target - 0.00125, t9 = this.distanceOutput, t10 = this.xfA, t11 = this.xfB, t12 = this.pool, t13 = 0, iter = 0; true;) {
        t1.getTransform$2(t10, t13);
        t2.getTransform$2(t11, t13);
        t4.transformA = t10;
        t4.transformB = t11;
        t12.distance.distance$3(t9, t3, t4);
        t14 = t9.distance;
        if (typeof t14 !== "number")
          return t14.$le();
        if (t14 <= 0) {
          output.state = 2;
          output.t = 0;
          break;
        }
        if (t14 < t7) {
          output.state = 3;
          output.t = t13;
          break;
        }
        t5.initialize$6(t3, proxyA, t1, proxyB, t2, t13);
        for (t20 = tMax, pushBackIter = 0; done = false, true;) {
          s2 = t5.findMinSeparation$2(t6, t20);
          if (s2 > t7) {
            output.state = 4;
            output.t = tMax;
            done = true;
            break;
          }
          if (s2 > t8) {
            t13 = t20;
            done = false;
            break;
          }
          s1 = t5.evaluate$3(t6[0], t6[1], t13);
          if (s1 < t8) {
            output.state = 1;
            output.t = t13;
            done = true;
            break;
          }
          if (s1 <= t7) {
            output.state = 3;
            output.t = t13;
            done = true;
            break;
          }
          for (a2 = t20, a1 = t13, rootIterCount = 0; true;) {
            t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
            s = t5.evaluate$3(t6[0], t6[1], t);
            if (Math.abs(s - target) < 0.00125) {
              t20 = t;
              break;
            }
            if (s > target) {
              a1 = t;
              s1 = s;
            } else {
              a2 = t;
              s2 = s;
            }
            ++rootIterCount;
            t14 = $.TimeOfImpact_toiRootIters;
            if (typeof t14 !== "number")
              return t14.$add();
            $.TimeOfImpact_toiRootIters = t14 + 1;
            if (rootIterCount === 50)
              break;
          }
          $.TimeOfImpact_toiMaxRootIters = P.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
          ++pushBackIter;
          if (pushBackIter === 8) {
            done = false;
            break;
          }
        }
        ++iter;
        t14 = $.TimeOfImpact_toiIters;
        if (typeof t14 !== "number")
          return t14.$add();
        $.TimeOfImpact_toiIters = t14 + 1;
        if (done)
          break;
        if (iter === 1000) {
          output.state = 1;
          output.t = t13;
          break;
        }
      }
      $.TimeOfImpact_toiMaxIters = P.max($.TimeOfImpact_toiMaxIters, iter);
    },
    TimeOfImpact$_construct$1: function(argPool) {
      var t1 = this.indexes;
      t1[0] = 0;
      t1[1] = 0;
      $.TimeOfImpact_toiCalls = 0;
      $.TimeOfImpact_toiIters = 0;
      $.TimeOfImpact_toiMaxIters = 0;
      $.TimeOfImpact_toiRootIters = 0;
      $.TimeOfImpact_toiMaxRootIters = 0;
    },
    static: {"^": "TimeOfImpact_MAX_ITERATIONS,TimeOfImpact_toiCalls,TimeOfImpact_toiIters,TimeOfImpact_toiMaxIters,TimeOfImpact_toiRootIters,TimeOfImpact_toiMaxRootIters"}
  },
  SeparationFunction: {
    "^": "Object;proxyA@,proxyB@,type,localPoint<,axis,sweepA,sweepB,localPointA,localPointB,pointA,pointB,localPointA1,localPointA2,normal,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
    initialize$6: function(cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
      var count, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, s;
      this.proxyA = argProxyA;
      this.proxyB = argProxyB;
      count = cache.count;
      this.sweepA = argSweepA;
      this.sweepB = argSweepB;
      t2 = this.xfa;
      argSweepA.getTransform$2(t2, t1);
      t3 = this.xfb;
      this.sweepB.getTransform$2(t3, t1);
      if (count === 1) {
        this.type = 0;
        t1 = this.localPointA;
        t4 = this.proxyA.get$vertices();
        t5 = cache.indexA;
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (t5 >>> 0 !== t5 || t5 >= 8)
          return H.ioore(t4, t5);
        t1.setFrom$1(t4[t5]);
        t5 = this.localPointB;
        t4 = this.proxyB.get$vertices();
        t6 = cache.indexB;
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t6 = t6[0];
        if (t6 >>> 0 !== t6 || t6 >= 8)
          return H.ioore(t4, t6);
        t5.setFrom$1(t4[t6]);
        t6 = this.pointA;
        V.Transform_mulToOut(t2, t1, t6);
        t1 = this.pointB;
        V.Transform_mulToOut(t3, t5, t1);
        t5 = this.axis;
        t5.setFrom$1(t1).sub$1(t6);
        return t5.normalizeLength$0();
      } else {
        t1 = cache.indexA;
        t4 = t1.length;
        if (0 >= t4)
          return H.ioore(t1, 0);
        t5 = t1[0];
        if (1 >= t4)
          return H.ioore(t1, 1);
        t4 = cache.indexB;
        t6 = this.pointA;
        t7 = this.localPoint;
        t8 = this.normal;
        t9 = this.axis;
        t10 = this.pointB;
        t11 = this.temp;
        if (J.$eq(t5, t1[1])) {
          this.type = 2;
          t5 = this.localPointB1;
          t12 = this.proxyB.get$vertices();
          if (0 >= t4.length)
            return H.ioore(t4, 0);
          t13 = t4[0];
          if (t13 >>> 0 !== t13 || t13 >= 8)
            return H.ioore(t12, t13);
          t5.setFrom$1(t12[t13]);
          t13 = this.localPointB2;
          t12 = this.proxyB.get$vertices();
          if (1 >= t4.length)
            return H.ioore(t4, 1);
          t4 = t4[1];
          if (t4 >>> 0 !== t4 || t4 >= 8)
            return H.ioore(t12, t4);
          t13.setFrom$1(t12[t4]);
          t11.setFrom$1(t13).sub$1(t5);
          V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
          t9.normalize$0();
          t3.rotation.transformed$2(t9, t8);
          t7.setFrom$1(t5);
          t7.add$1(0, t13);
          t7.scale$1(0.5);
          V.Transform_mulToOut(t3, t7, t10);
          t7 = this.localPointA;
          t3 = this.proxyA.get$vertices();
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = t1[0];
          if (t1 >>> 0 !== t1 || t1 >= 8)
            return H.ioore(t3, t1);
          t7.setFrom$1(t3[t1]);
          V.Transform_mulToOut(t2, t7, t6);
          t11.setFrom$1(t6);
          t11.sub$1(t10);
          s = t11.dot$1(t8);
          if (s < 0) {
            t9.negate$0();
            s = -s;
          }
          return s;
        } else {
          this.type = 1;
          t5 = this.localPointA1;
          t12 = this.proxyA.get$vertices();
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t13 = t1[0];
          if (t13 >>> 0 !== t13 || t13 >= 8)
            return H.ioore(t12, t13);
          t5.setFrom$1(t12[t13]);
          t13 = this.localPointA2;
          t12 = this.proxyA.get$vertices();
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          t1 = t1[1];
          if (t1 >>> 0 !== t1 || t1 >= 8)
            return H.ioore(t12, t1);
          t13.setFrom$1(t12[t1]);
          t11.setFrom$1(t13);
          t11.sub$1(t5);
          V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
          t9.normalize$0();
          t2.rotation.transformed$2(t9, t8);
          t7.setFrom$1(t5);
          t7.add$1(0, t13);
          t7.scale$1(0.5);
          V.Transform_mulToOut(t2, t7, t6);
          t7 = this.localPointB;
          t2 = this.proxyB.get$vertices();
          if (0 >= t4.length)
            return H.ioore(t4, 0);
          t4 = t4[0];
          if (t4 >>> 0 !== t4 || t4 >= 8)
            return H.ioore(t2, t4);
          t7.setFrom$1(t2[t4]);
          V.Transform_mulToOut(t3, t7, t10);
          t11.setFrom$1(t10);
          t11.sub$1(t6);
          s = t11.dot$1(t8);
          if (s < 0) {
            t9.negate$0();
            s = -s;
          }
          return s;
        }
      }
    },
    findMinSeparation$2: function(indexes, t) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.xfa;
      this.sweepA.getTransform$2(t1, t);
      t2 = this.xfb;
      this.sweepB.getTransform$2(t2, t);
      switch (this.type) {
        case 0:
          t3 = this.axis;
          t4 = this.axisA;
          t1.rotation.transposed$0().transformed$2(t3, t4);
          t5 = this.axisB;
          t2.rotation.transposed$0().transformed$2(t3.negate$0(), t5);
          t3.negate$0();
          indexes[0] = this.proxyA.getSupport$1(t4);
          indexes[1] = this.proxyB.getSupport$1(t5);
          t5 = this.localPointA;
          t4 = this.proxyA.get$vertices();
          t6 = indexes[0];
          if (t6 >>> 0 !== t6 || t6 >= 8)
            return H.ioore(t4, t6);
          t5.setFrom$1(t4[t6]);
          t6 = this.localPointB;
          t4 = this.proxyB.get$vertices();
          t7 = indexes[1];
          if (t7 >>> 0 !== t7 || t7 >= 8)
            return H.ioore(t4, t7);
          t6.setFrom$1(t4[t7]);
          t7 = this.pointA;
          V.Transform_mulToOut(t1, t5, t7);
          t5 = this.pointB;
          V.Transform_mulToOut(t2, t6, t5);
          return t5.sub$1(t7).dot$1(t3);
        case 1:
          t3 = this.normal;
          t1.rotation.transformed$2(this.axis, t3);
          t4 = this.pointA;
          V.Transform_mulToOut(t1, this.localPoint, t4);
          t3.negate$0();
          t1 = this.axisB;
          t2.rotation.transposed$0().transformed$2(t3, t1);
          t3.negate$0();
          indexes[0] = -1;
          indexes[1] = this.proxyB.getSupport$1(t1);
          t1 = this.localPointB;
          t5 = this.proxyB.get$vertices();
          t6 = indexes[1];
          if (t6 >>> 0 !== t6 || t6 >= 8)
            return H.ioore(t5, t6);
          t1.setFrom$1(t5[t6]);
          t6 = this.pointB;
          V.Transform_mulToOut(t2, t1, t6);
          return t6.sub$1(t4).dot$1(t3);
        case 2:
          t3 = this.normal;
          t2.rotation.transformed$2(this.axis, t3);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, this.localPoint, t4);
          t2 = this.axisA;
          t1.rotation.transposed$0().transformed$2(t3.negate$0(), t2);
          t3.negate$0();
          indexes[1] = -1;
          indexes[0] = this.proxyA.getSupport$1(t2);
          t2 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          t6 = indexes[0];
          if (t6 >>> 0 !== t6 || t6 >= 8)
            return H.ioore(t5, t6);
          t2.setFrom$1(t5[t6]);
          t6 = this.pointA;
          V.Transform_mulToOut(t1, t2, t6);
          return t6.sub$1(t4).dot$1(t3);
        default:
          indexes[0] = -1;
          indexes[1] = -1;
          return 0;
      }
    },
    evaluate$3: function(indexA, indexB, t) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.xfa;
      this.sweepA.getTransform$2(t1, t);
      t2 = this.xfb;
      this.sweepB.getTransform$2(t2, t);
      switch (this.type) {
        case 0:
          t3 = this.axis;
          t1.rotation.transposed$0().transformed$2(t3, this.axisA);
          t2.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisB);
          t3.negate$0();
          t4 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          if (indexA >>> 0 !== indexA || indexA >= 8)
            return H.ioore(t5, indexA);
          t4.setFrom$1(t5[indexA]);
          t5 = this.localPointB;
          t6 = this.proxyB.get$vertices();
          if (indexB >>> 0 !== indexB || indexB >= 8)
            return H.ioore(t6, indexB);
          t5.setFrom$1(t6[indexB]);
          t6 = this.pointA;
          V.Transform_mulToOut(t1, t4, t6);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, t5, t4);
          return t4.sub$1(t6).dot$1(t3);
        case 1:
          t3 = this.normal;
          t1.rotation.transformed$2(this.axis, t3);
          t4 = this.pointA;
          V.Transform_mulToOut(t1, this.localPoint, t4);
          t3.negate$0();
          t2.rotation.transposed$0().transformed$2(t3, this.axisB);
          t3.negate$0();
          t1 = this.localPointB;
          t5 = this.proxyB.get$vertices();
          if (indexB >>> 0 !== indexB || indexB >= 8)
            return H.ioore(t5, indexB);
          t1.setFrom$1(t5[indexB]);
          t5 = this.pointB;
          V.Transform_mulToOut(t2, t1, t5);
          return t5.sub$1(t4).dot$1(t3);
        case 2:
          t3 = this.normal;
          t2.rotation.transformed$2(this.axis, t3);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, this.localPoint, t4);
          t1.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisA);
          t3.negate$0();
          t2 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          if (indexA >>> 0 !== indexA || indexA >= 8)
            return H.ioore(t5, indexA);
          t2.setFrom$1(t5[indexA]);
          t5 = this.pointA;
          V.Transform_mulToOut(t1, t2, t5);
          return t5.sub$1(t4).dot$1(t3);
        default:
          return 0;
      }
    }
  },
  TimeOfImpactInput: {
    "^": "Object;proxyA<,proxyB<,sweepA,sweepB,tMax"
  },
  TimeOfImpactOutput: {
    "^": "Object;state,t"
  },
  WorldManifold: {
    "^": "Object;normal,points,pool3,pool4",
    initialize$5: function(manifold, xfA, radiusA, xfB, radiusB) {
      var pointA, pointB, t1, t2, t3, t4, t5, t6, t7, t8, t9, i, t10, t11, t12, t13, scalar;
      switch (manifold.type) {
        case 0:
          pointA = this.pool3;
          pointB = this.pool4;
          t1 = this.normal;
          t2 = t1.storage;
          t2[0] = 1;
          t2[1] = 0;
          t3 = xfA.position.storage;
          t4 = xfA.rotation.storage;
          t5 = manifold.localPoint.storage;
          t6 = pointA.storage;
          t6[0] = t3[0] + t4[0] * t5[0] + t4[2] * t5[1];
          t6[1] = t3[1] + t4[1] * t5[0] + t4[3] * t5[1];
          t5 = xfB.position.storage;
          t4 = t5[0];
          t3 = xfB.rotation.storage;
          t7 = t3[0];
          t8 = manifold.points[0].localPoint.storage;
          t9 = pointB.storage;
          t9[0] = t4 + t7 * t8[0] + t3[2] * t8[1];
          t9[1] = t5[1] + t3[1] * t8[0] + t3[3] * t8[1];
          if (V.MathBox_distanceSquared(pointA, pointB) > 1.4208639999999999e-14) {
            t2[0] = t9[0] - t6[0];
            t2[1] = t9[1] - t6[1];
            t1.normalize$0();
          }
          t1 = t2[0];
          t3 = t6[0];
          t2 = t2[1];
          t6 = t6[1];
          t4 = t9[0];
          t9 = t9[1];
          t5 = this.points;
          if (0 >= t5.length)
            return H.ioore(t5, 0);
          t5[0].set$x((t1 * radiusA + t3 + (-t1 * radiusB + t4)) * 0.5);
          if (0 >= t5.length)
            return H.ioore(t5, 0);
          t5[0].set$y((t2 * radiusA + t6 + (-t2 * radiusB + t9)) * 0.5);
          return;
        case 1:
          t1 = xfA.rotation.storage;
          t2 = manifold.localNormal.storage;
          t3 = this.normal.storage;
          t3[0] = t1[0] * t2[0] + t1[2] * t2[1];
          t3[1] = t1[1] * t2[0] + t1[3] * t2[1];
          t2 = xfA.position.storage;
          t4 = manifold.localPoint.storage;
          t5 = this.pool3.storage;
          t5[0] = t2[0] + t1[0] * t4[0] + t1[2] * t4[1];
          t5[1] = t2[1] + t1[1] * t4[0] + t1[3] * t4[1];
          for (t1 = xfB.position.storage, t2 = xfB.rotation.storage, t4 = manifold.points, t6 = this.pool4.storage, t7 = this.points, i = 0; i < manifold.pointCount; ++i) {
            t8 = t1[0];
            t9 = t2[0];
            if (i >= 2)
              return H.ioore(t4, i);
            t10 = t4[i].localPoint.storage;
            t6[0] = t8 + t9 * t10[0] + t2[2] * t10[1];
            t6[1] = t1[1] + t2[1] * t10[0] + t2[3] * t10[1];
            t10 = t6[0];
            t9 = t5[0];
            t8 = t3[0];
            t11 = t6[1];
            t12 = t5[1];
            t13 = t3[1];
            scalar = radiusA - ((t10 - t9) * t8 + (t11 - t12) * t13);
            if (i >= t7.length)
              return H.ioore(t7, i);
            t7[i].set$x((t8 * scalar + t10 + (-t8 * radiusB + t10)) * 0.5);
            if (i >= t7.length)
              return H.ioore(t7, i);
            t7[i].set$y((t13 * scalar + t11 + (-t13 * radiusB + t11)) * 0.5);
          }
          return;
        case 2:
          t1 = xfB.rotation.storage;
          t2 = manifold.localNormal.storage;
          t3 = this.normal.storage;
          t3[0] = t1[0] * t2[0] + t1[2] * t2[1];
          t3[1] = t1[1] * t2[0] + t1[3] * t2[1];
          t2 = xfB.position.storage;
          t4 = manifold.localPoint.storage;
          t5 = this.pool3.storage;
          t5[0] = t2[0] + t1[0] * t4[0] + t1[2] * t4[1];
          t5[1] = t2[1] + t1[1] * t4[0] + t1[3] * t4[1];
          for (t1 = xfA.position.storage, t2 = xfA.rotation.storage, t4 = manifold.points, t6 = this.pool4.storage, t7 = this.points, i = 0; i < manifold.pointCount; ++i) {
            t8 = t1[0];
            t9 = t2[0];
            if (i >= 2)
              return H.ioore(t4, i);
            t10 = t4[i].localPoint.storage;
            t6[0] = t8 + t9 * t10[0] + t2[2] * t10[1];
            t6[1] = t1[1] + t2[1] * t10[0] + t2[3] * t10[1];
            t10 = t6[0];
            t9 = t5[0];
            t8 = t3[0];
            t11 = t6[1];
            t12 = t5[1];
            t13 = t3[1];
            scalar = radiusB - ((t10 - t9) * t8 + (t11 - t12) * t13);
            if (i >= t7.length)
              return H.ioore(t7, i);
            t7[i].set$x((-t8 * radiusA + t10 + (t8 * scalar + t10)) * 0.5);
            if (i >= t7.length)
              return H.ioore(t7, i);
            t7[i].set$y((-t13 * radiusA + t11 + (t13 * scalar + t11)) * 0.5);
          }
          t3[0] = -t3[0];
          t3[1] = -t3[1];
          break;
      }
    },
    static: {WorldManifold$: function() {
        var t1, t2, t3;
        t1 = new Float32Array(2);
        t2 = new Float32Array(2);
        t3 = new Float32Array(2);
        return new V.WorldManifold(new T.Vector2(t1), P.List_List$generate(2, new V.WorldManifold_closure(), true), new T.Vector2(t2), new T.Vector2(t3));
      }}
  },
  WorldManifold_closure: {
    "^": "Closure;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  Sweep: {
    "^": "Object;localCenter<,centerZero<,center,angleZero,angle",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.localCenter === other.get$localCenter() && this.centerZero === other.get$centerZero() && this.center === other.center && this.angleZero === other.angleZero && this.angle === other.angle;
    },
    setFrom$1: function(other) {
      this.localCenter.setFrom$1(other.get$localCenter());
      this.centerZero.setFrom$1(other.centerZero);
      this.center.setFrom$1(other.center);
      this.angleZero = other.angleZero;
      this.angle = other.angle;
    },
    normalize$0: function() {
      var d = 6.283185307179586 * C.JSNumber_methods.toInt$0(Math.floor(this.angleZero / 6.283185307179586));
      this.angleZero -= d;
      this.angle -= d;
    },
    getTransform$2: function(xf, alpha) {
      var t1, t2, t3, t4;
      t1 = 1 - alpha;
      t2 = this.centerZero.storage;
      t3 = this.center.storage;
      t4 = xf.position.storage;
      t4[0] = t1 * t2[0] + alpha * t3[0];
      t4[1] = t1 * t2[1] + alpha * t3[1];
      t3 = xf.rotation;
      t3.setRotation$1(t1 * this.angleZero + alpha * this.angle);
      t3 = t3.storage;
      t1 = this.localCenter.storage;
      t4[0] = t4[0] - (t3[0] * t1[0] + t3[2] * t1[1]);
      t4[1] = t4[1] - (t3[1] * t1[0] + t3[3] * t1[1]);
    },
    advance$1: function(time) {
      var t1, t2, t3;
      t1 = 1 - time;
      t2 = this.centerZero.storage;
      t3 = this.center.storage;
      t2[0] = t1 * t2[0] + time * t3[0];
      t2[1] = t1 * t2[1] + time * t3[1];
      this.angleZero = t1 * this.angleZero + time * this.angle;
    },
    static: {Sweep$: function() {
        var t1, t2;
        t1 = new Float32Array(2);
        t2 = new Float32Array(2);
        return new V.Sweep(new T.Vector2(t1), new T.Vector2(t2), new T.Vector2(new Float32Array(2)), 0, 0);
      }}
  },
  Transform: {
    "^": "Object;position<,rotation<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.position === other.get$position() && this.rotation === other.get$rotation();
    },
    setFrom$1: function(other) {
      this.position.setFrom$1(other.get$position());
      this.rotation.setFrom$1(other.rotation);
    },
    static: {Transform$: function() {
        var t1 = new Float32Array(2);
        return new V.Transform(new T.Vector2(t1), new T.Matrix2(new Float32Array(4)));
      }, Transform_mulToOut: function(transform, vector, out) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
        t1 = transform.position.storage;
        t2 = t1[1];
        t3 = transform.rotation.storage;
        t4 = t3[1];
        t5 = vector.get$x();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[3];
        t7 = vector.get$y();
        t1 = t1[0];
        t8 = t3[0];
        t9 = vector.storage;
        t10 = out.storage;
        t10[0] = t1 + t8 * t9[0] + t3[2] * t9[1];
        t10[1] = t2 + t4 * t5 + t6 * t7;
      }}
  },
  Body: {
    "^": "Object;world,flags,contactList,sleepTime,userData,_linearVelocity,_angularVelocity,mass,invMass,next,prev,fixtureList,fixtureCount,jointList,_force,_torque,_inertia,invInertia,linearDamping,angularDamping,_type,islandIndex,originTransform,sweep,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
    createFixture$1: function(def) {
      var t1, t2, fixture, t3, broadPhase, node;
      t1 = V.AxisAlignedBox$(null, null);
      t2 = new V.Filter(0, 0, 0);
      fixture = new V.Fixture(t1, null, null, null, null, null, null, null, t2, null, null, V.AxisAlignedBox$(null, null), V.AxisAlignedBox$(null, null));
      fixture.userData = def.userData;
      fixture.friction = def.friction;
      fixture.restitution = def.restitution;
      fixture.body = this;
      fixture.next = null;
      t2.setFrom$1(def.filter);
      fixture.isSensor = def.isSensor;
      t2 = def.shape;
      t2.toString;
      t2 = V.PolygonShape$copy(t2);
      fixture.shape = t2;
      fixture.density = def.density;
      t3 = this.flags;
      if (typeof t3 !== "number")
        return t3.$and();
      if ((t3 & 32) === 32) {
        broadPhase = this.world._contactManager.broadPhase;
        t2.computeAxisAlignedBox$2(t1, this.originTransform);
        node = broadPhase._tree.createProxy$2(t1, fixture);
        ++broadPhase.proxyCount;
        broadPhase.moveBuffer.push(node);
        fixture.proxy = node;
      }
      fixture.next = this.fixtureList;
      this.fixtureList = fixture;
      ++this.fixtureCount;
      fixture.body = this;
      t1 = fixture.density;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        this.resetMassData$0();
      this.world._flags |= 1;
      return fixture;
    },
    get$position: function() {
      return this.originTransform.position;
    },
    get$localCenter: function() {
      return this.sweep.localCenter;
    },
    resetMassData$0: function() {
      var t1, t2, t3, massData, f, t4, t5, t6, temp;
      this.mass = 0;
      this.invMass = 0;
      this._inertia = 0;
      this.invInertia = 0;
      t1 = this.sweep;
      t2 = t1.localCenter;
      t2.setZero$0();
      t3 = this._type;
      if (t3 === 0 || t3 === 1) {
        t2 = this.originTransform.position;
        t1.center.setFrom$1(t2);
        t1.centerZero.setFrom$1(t2);
        return;
      }
      t3 = this.tempCenter;
      t3.setZero$0();
      massData = this._pmd;
      for (f = this.fixtureList, t4 = massData.center; f != null; f = f.next) {
        t5 = f.density;
        if (t5 === 0)
          continue;
        f.shape.computeMass$2(massData, t5);
        this.mass = this.mass + massData.mass;
        t5 = new Float32Array(2);
        t6 = t4.storage;
        t5[1] = t6[1];
        t5[0] = t6[0];
        t6 = massData.mass;
        t5[1] = t5[1] * t6;
        t5[0] = t5[0] * t6;
        t3.add$1(0, new T.Vector2(t5));
        this._inertia = this._inertia + massData.inertia;
      }
      t4 = this.mass;
      if (t4 > 0) {
        t4 = 1 / t4;
        this.invMass = t4;
        t3.scale$1(t4);
      } else {
        this.mass = 1;
        this.invMass = 1;
      }
      t4 = this._inertia;
      if (t4 > 0) {
        t5 = this.flags;
        if (typeof t5 !== "number")
          return t5.$and();
        t5 = (t5 & 16) === 0;
      } else
        t5 = false;
      if (t5) {
        t4 -= this.mass * t3.dot$1(t3);
        this._inertia = t4;
        this.invInertia = 1 / t4;
      } else {
        this._inertia = 0;
        this.invInertia = 0;
      }
      t4 = this.oldCenter;
      t5 = t1.center;
      t4.setFrom$1(t5);
      t2.setFrom$1(t3);
      t1 = t1.centerZero;
      V.Transform_mulToOut(this.originTransform, t2, t1);
      t5.setFrom$1(t1);
      temp = new T.Vector2(new Float32Array(2));
      temp.setFrom$1(t5);
      temp.sub$1(t4);
      V.Vector2_crossVectorAndNumToOut(temp, -this._angularVelocity, temp);
      this._linearVelocity.add$1(0, temp);
    },
    set$awake: function(flag) {
      var t1;
      if (flag) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 2) === 0) {
          this.flags = t1 | 2;
          this.sleepTime = 0;
        }
      } else {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        this.flags = t1 & 4294967293;
        this.sleepTime = 0;
        this._linearVelocity.setZero$0();
        this._angularVelocity = 0;
        this._force.setZero$0();
        this._torque = 0;
      }
    },
    synchronizeFixtures$0: function() {
      var xf1, t1, t2, t3, broadPhase, f;
      xf1 = this._pxf;
      t1 = xf1.rotation;
      t2 = this.sweep;
      t1.setRotation$1(t2.angleZero);
      t3 = xf1.position;
      t1.transformed$2(t2.localCenter, t3);
      t3.scale$1(-1);
      t3.add$1(0, t2.centerZero);
      broadPhase = this.world._contactManager.broadPhase;
      for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.next)
        f.synchronize$3(broadPhase, xf1, t1);
    },
    synchronizeTransform$0: function() {
      var t1, t2, c, s, t, r, t3, t4;
      t1 = this.sweep;
      t2 = t1.angle;
      c = Math.cos(t2);
      t2 = t1.angle;
      s = Math.sin(t2);
      t = this.originTransform;
      r = t.rotation;
      r.setValues$4(c, s, -s, c);
      t2 = r.storage;
      t3 = t1.localCenter.storage;
      t1 = t1.center.storage;
      t4 = t.position.storage;
      t4[0] = (t2[0] * t3[0] + t2[2] * t3[1]) * -1 + t1[0];
      t4[1] = (t2[1] * t3[0] + t2[3] * t3[1]) * -1 + t1[1];
    },
    shouldCollide$1: function(other) {
      return !(this._type !== 2 && other._type !== 2);
    },
    Body$2: function(bd, world) {
      var t1, t2, t3, t4;
      if (bd.bullet) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 8;
      }
      if (bd.fixedRotation) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 16;
      }
      if (bd.allowSleep) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 4;
      }
      if (bd.awake) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 2;
      }
      if (bd.active) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 32;
      }
      t1 = this.originTransform;
      t1.position.setFrom$1(bd.position);
      t1.rotation.setRotation$1(bd.angle);
      t2 = this.sweep;
      t3 = t2.localCenter;
      t3.setZero$0();
      t4 = t2.centerZero;
      V.Transform_mulToOut(t1, t3, t4);
      t2.center.setFrom$1(t4);
      t4 = bd.angle;
      t2.angle = t4;
      t2.angleZero = t4;
      if (this._type === 2) {
        this.mass = 1;
        this.invMass = 1;
      } else {
        this.mass = 0;
        this.invMass = 0;
      }
    },
    static: {"^": "Body_ISLAND_FLAG,Body_AWAKE_FLAG,Body_AUTO_SLEEP_FLAG,Body_BULLET_FLAG,Body_FIXED_ROTATION_FLAG,Body_ACTIVE_FLAG,Body_TO_I_FLAG"}
  },
  BodyDef: {
    "^": "Object;type,angle,userData,position<,linearVelocity,angularVelocity,fixedRotation,isSleeping,bullet,allowSleep,linearDamping,angularDamping,awake,active",
    static: {BodyDef$: function() {
        var t1 = new Float32Array(2);
        return new V.BodyDef(0, 0, null, new T.Vector2(t1), new T.Vector2(new Float32Array(2)), 0, false, null, false, true, 0, 0, true, true);
      }}
  },
  ContactManager: {
    "^": "Object;broadPhase,contactList,contactCount,contactFilter,contactListener,pool",
    _addPair$2: [function(fixtureA, fixtureB) {
      var bodyA, bodyB, edge, t1, fA, fB, c, t2;
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      if (bodyA == null ? bodyB == null : bodyA === bodyB)
        return;
      edge = bodyB.contactList;
      for (; edge != null;) {
        t1 = edge.other;
        if (t1 == null ? bodyA == null : t1 === bodyA) {
          t1 = edge.contact;
          fA = t1.fixtureA;
          fB = t1.fixtureB;
          if ((fA == null ? fixtureA == null : fA === fixtureA) && (fB == null ? fixtureB == null : fB === fixtureB))
            return;
          if ((fA == null ? fixtureB == null : fA === fixtureB) && (fB == null ? fixtureA == null : fB === fixtureA))
            return;
        }
        edge = edge.next;
      }
      if (!bodyB.shouldCollide$1(bodyA))
        return;
      if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
        return;
      c = this.pool.popContact$2(fixtureA, fixtureB);
      fixtureA = c.fixtureA;
      fixtureB = c.fixtureB;
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      c.prev = null;
      t1 = this.contactList;
      c.next = t1;
      if (t1 != null)
        t1.prev = c;
      this.contactList = c;
      t1 = c.edge1;
      t1.contact = c;
      t1.other = bodyB;
      t1.prev = null;
      t2 = bodyA.contactList;
      t1.next = t2;
      if (t2 != null)
        t2.prev = t1;
      bodyA.contactList = t1;
      t1 = c.edge2;
      t1.contact = c;
      t1.other = bodyA;
      t1.prev = null;
      t2 = bodyB.contactList;
      t1.next = t2;
      if (t2 != null)
        t2.prev = t1;
      bodyB.contactList = t1;
      ++this.contactCount;
    }, "call$2", "get$_addPair", 4, 0, 1],
    destroy$1: function(c) {
      var fixtureA, fixtureB, bodyA, bodyB, t1, t2, t3, type1, type2;
      fixtureA = c.fixtureA;
      fixtureB = c.fixtureB;
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      t1 = c.prev;
      if (t1 != null)
        t1.next = c.next;
      t2 = c.next;
      if (t2 != null)
        t2.prev = t1;
      if (c === this.contactList)
        this.contactList = t2;
      t1 = c.edge1;
      t2 = t1.prev;
      if (t2 != null)
        t2.next = t1.next;
      t3 = t1.next;
      if (t3 != null)
        t3.prev = t2;
      if (t1 === bodyA.contactList)
        bodyA.contactList = t3;
      t1 = c.edge2;
      t2 = t1.prev;
      if (t2 != null)
        t2.next = t1.next;
      t3 = t1.next;
      if (t3 != null)
        t3.prev = t2;
      if (t1 === bodyB.contactList)
        bodyB.contactList = t3;
      if (c.manifold.pointCount > 0) {
        c.fixtureA.body.set$awake(true);
        c.fixtureB.body.set$awake(true);
      }
      type1 = c.fixtureA.shape.type;
      type2 = c.fixtureB.shape.type;
      t1 = this.pool._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t1 = t1[type1];
      t1.length;
      if (type2 >= 2)
        return H.ioore(t1, type2);
      t1[type2].creator.addFirst$1(c);
      --this.contactCount;
    },
    collide$0: function() {
      var c, t1, t2, fixtureA, fixtureB, bodyA, bodyB, t3, c0, proxyIdA, proxyIdB;
      c = this.contactList;
      for (t1 = this.contactListener, t2 = this.contactFilter; c != null;) {
        fixtureA = c.fixtureA;
        fixtureB = c.fixtureB;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        t3 = bodyA.flags;
        if (typeof t3 !== "number")
          return t3.$and();
        if ((t3 & 2) !== 2) {
          t3 = bodyB.flags;
          if (typeof t3 !== "number")
            return t3.$and();
          t3 = (t3 & 2) !== 2;
        } else
          t3 = false;
        if (t3) {
          c = c.next;
          continue;
        }
        t3 = c.flags;
        if (typeof t3 !== "number")
          return t3.$and();
        if ((t3 & 8) === 8) {
          if (bodyB._type !== 2 && bodyA._type !== 2) {
            c0 = c.next;
            this.destroy$1(c);
            c = c0;
            continue;
          }
          if (!t2.shouldCollide$2(fixtureA, fixtureB)) {
            c0 = c.next;
            this.destroy$1(c);
            c = c0;
            continue;
          }
          t3 = c.flags;
          if (typeof t3 !== "number")
            return t3.$and();
          c.flags = t3 & 4294967287;
        }
        proxyIdA = fixtureA.proxy;
        proxyIdB = fixtureB.proxy;
        if (!V.AxisAlignedBox_testOverlap(proxyIdA.box, proxyIdB.box)) {
          c0 = c.next;
          this.destroy$1(c);
          c = c0;
          continue;
        }
        c.update$1(t1);
        c = c.next;
      }
    }
  },
  CircleContact: {
    "^": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      this.pool.collision.collideCircles$5(argManifold, this.fixtureA.shape, xfA, this.fixtureB.shape, xfB);
    }
  },
  Contact: {
    "^": "Object;manifold<",
    init$2: function(fixA, fixB) {
      var t1;
      this.flags = 0;
      this.fixtureA = fixA;
      this.fixtureB = fixB;
      this.manifold.pointCount = 0;
      this.prev = null;
      this.next = null;
      t1 = this.edge1;
      t1.contact = null;
      t1.prev = null;
      t1.next = null;
      t1.other = null;
      t1 = this.edge2;
      t1.contact = null;
      t1.prev = null;
      t1.next = null;
      t1.other = null;
      this.toiCount = 0;
    },
    update$1: function(listener) {
      var t1, t2, wasTouching, sensorA, t3, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, t4, touching, i, mp2, id2, t5, t6, t7, j, mp1, t8;
      t1 = this._oldManifold;
      t1.setFrom$1(this.manifold);
      t2 = this.flags;
      if (typeof t2 !== "number")
        return t2.$or();
      t2 |= 4;
      this.flags = t2;
      wasTouching = (t2 & 2) === 2;
      t2 = this.fixtureA;
      sensorA = t2.isSensor;
      t3 = this.fixtureB;
      sensorB = t3.isSensor;
      sensor = sensorA === true || sensorB === true;
      bodyA = t2.body;
      bodyB = t3.body;
      xfA = bodyA.originTransform;
      xfB = bodyB.originTransform;
      if (sensor) {
        shapeA = t2.shape;
        shapeB = t3.shape;
        t1 = this.pool.collision;
        t2 = t1.input;
        t2.proxyA.setFromShape$1(shapeA);
        t2.proxyB.setFromShape$1(shapeB);
        t3 = t2.transformA;
        t3.position.setFrom$1(xfA.position);
        t3.rotation.setFrom$1(xfA.rotation);
        t3 = t2.transformB;
        t3.position.setFrom$1(xfB.position);
        t3.rotation.setFrom$1(xfB.rotation);
        t2.useRadii = true;
        t3 = t1.cache;
        t3.count = 0;
        t4 = t1._pool.distance;
        t1 = t1.output;
        t4.distance$3(t1, t3, t2);
        t1 = t1.distance;
        if (typeof t1 !== "number")
          return t1.$lt();
        touching = t1 < 0.000001192;
        this.manifold.pointCount = 0;
      } else {
        this.evaluate$3(this.manifold, xfA, xfB);
        touching = this.manifold.pointCount > 0;
        for (t2 = t1.points, i = 0; t3 = this.manifold, i < t3.pointCount; ++i) {
          t3 = t3.points;
          if (i >= 2)
            return H.ioore(t3, i);
          mp2 = t3[i];
          mp2.normalImpulse = 0;
          mp2.tangentImpulse = 0;
          id2 = mp2.id;
          for (t3 = t1.pointCount, t4 = id2.features, t5 = t4.incidentEdge, t6 = t4.incidentVertex, t7 = t4.flip, j = 0; j < t3; ++j) {
            if (j >= 2)
              return H.ioore(t2, j);
            mp1 = t2[j];
            t8 = mp1.id.features;
            if (t4.referenceEdge === t8.referenceEdge && t5 === t8.incidentEdge && t6 === t8.incidentVertex && t7 === t8.flip) {
              mp2.normalImpulse = mp1.normalImpulse;
              mp2.tangentImpulse = mp1.tangentImpulse;
              break;
            }
          }
        }
        if (touching !== wasTouching) {
          bodyA.set$awake(true);
          bodyB.set$awake(true);
        }
      }
      t1 = this.flags;
      if (touching) {
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 2;
      } else {
        if (typeof t1 !== "number")
          return t1.$and();
        this.flags = t1 & 4294967293;
      }
      return;
    }
  },
  ContactConstraint: {
    "^": "Object;points<,localNormal<,localPoint<,normal<,normalMass,K,bodyA@,bodyB@,type@,radius?,friction,restitution,pointCount@,manifold@",
    setFrom$1: function(cp) {
      var t1, i;
      this.pointCount = cp.get$pointCount();
      this.localNormal.setFrom$1(cp.get$localNormal());
      this.localPoint.setFrom$1(cp.get$localPoint());
      this.normal.setFrom$1(cp.get$normal());
      this.normalMass.setFrom$1(cp.get$normalMass());
      this.K.setFrom$1(cp.get$K());
      this.bodyA = cp.get$bodyA();
      this.bodyB = cp.get$bodyB();
      this.type = cp.get$type();
      this.radius = cp.get$radius();
      this.friction = cp.get$friction();
      this.restitution = cp.get$restitution();
      this.manifold = cp.get$manifold();
      for (t1 = this.points, i = 0; C.JSInt_methods.$lt(i, cp.get$pointCount()); ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].setFrom$1(cp.get$points().$index(0, i));
      }
    },
    toString$0: function(_) {
      return "localNormal: \"" + this.localNormal.toString$0(0) + "\", localPoint: \"" + this.localPoint.toString$0(0) + "\" normal: \"" + this.normal.toString$0(0) + "\", radius: \"" + H.S(this.radius) + "\" friction: \"" + H.S(this.friction) + "\" restitution: \"" + H.S(this.restitution) + "\", pointCount: \"" + this.pointCount + "\"";
    },
    static: {ContactConstraint$: function() {
        var t1, t2, t3, t4, t5;
        t1 = P.List_List$generate(2, new V.ContactConstraint_closure(), true);
        t2 = new Float32Array(2);
        t3 = new Float32Array(2);
        t4 = new Float32Array(2);
        t5 = new Float32Array(4);
        return new V.ContactConstraint(t1, new T.Vector2(t2), new T.Vector2(t3), new T.Vector2(t4), new T.Matrix2(t5), new T.Matrix2(new Float32Array(4)), null, null, null, null, null, null, 0, null);
      }}
  },
  ContactConstraint_closure: {
    "^": "Closure;",
    call$1: function(i) {
      var t1, t2;
      t1 = new Float32Array(2);
      t2 = new Float32Array(2);
      return new V.ContactConstraintPoint(new T.Vector2(t1), new T.Vector2(t2), new T.Vector2(new Float32Array(2)), 0, 0, 0, 0, 0);
    }
  },
  ContactConstraintPoint: {
    "^": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass<,tangentMass<,velocityBias",
    setFrom$1: function(cp) {
      this.localPoint.setFrom$1(cp.get$localPoint());
      this.rA.setFrom$1(cp.get$rA());
      this.rB.setFrom$1(cp.get$rB());
      this.normalImpulse = cp.get$normalImpulse();
      this.tangentImpulse = cp.get$tangentImpulse();
      this.normalMass = cp.get$normalMass();
      this.tangentMass = cp.get$tangentMass();
      this.velocityBias = cp.get$velocityBias();
    },
    toString$0: function(_) {
      return "normal impulse: " + H.S(this.normalImpulse) + ", tangentImpulse: " + H.S(this.tangentImpulse) + ", normalMass: " + H.S(this.normalMass) + ", tangentMass: " + H.S(this.tangentMass) + ", velocityBias: " + H.S(this.velocityBias) + ", localPoint: " + this.localPoint.toString$0(0) + ", rA: " + this.rA.toString$0(0) + ", rB: " + this.rB.toString$0(0);
    }
  },
  ContactEdge: {
    "^": "Object;other,contact,prev,next"
  },
  ContactRegister: {
    "^": "Object;creator,primary"
  },
  ContactSolver: {
    "^": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x<,d,P1,P2,psolver,rA<,rB<",
    init$3: function(contacts, contactCount, impulseRatio) {
      var t1, t2, t3, i, t4, t5, t6, t7, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, t8, friction, restitution, vA, vB, wA, wB, cc, t9, t10, t11, t12, t13, t14, j, t15, cp, ccp, t16, t17, t18, t19, t20, rnA, rnB, t21, t22, t23, t24, rtA, rtB, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
      this.constraintCount = contactCount;
      t1 = this.constraints;
      t2 = t1.length;
      if (typeof contactCount !== "number")
        return H.iae(contactCount);
      if (t2 < contactCount) {
        t2 = Array(P.max(t2 * 2, contactCount));
        t2.fixed$length = init;
        this.constraints = t2;
        t3 = t1.length;
        H.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
        for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
          t2 = V.ContactConstraint$();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      }
      t1 = this.worldManifold;
      t2 = t1.points;
      t3 = this.tangent.storage;
      t4 = this.temp2.storage;
      t5 = this.temp1.storage;
      t6 = t1.normal.storage;
      i = 0;
      while (true) {
        t7 = this.constraintCount;
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (!(i < t7))
          break;
        if (i >= contacts.length)
          return H.ioore(contacts, i);
        contact = contacts[i];
        fixtureA = contact.fixtureA;
        fixtureB = contact.fixtureB;
        shapeA = fixtureA.shape;
        shapeB = fixtureB.shape;
        radiusA = shapeA.radius;
        radiusB = shapeB.radius;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        manifold = contact.manifold;
        t7 = fixtureA.friction;
        t8 = fixtureB.friction;
        if (typeof t7 !== "number")
          return t7.$mul();
        if (typeof t8 !== "number")
          return H.iae(t8);
        friction = Math.sqrt(t7 * t8);
        t7 = fixtureA.restitution;
        t8 = fixtureB.restitution;
        if (typeof t7 !== "number")
          return t7.$gt();
        if (typeof t8 !== "number")
          return H.iae(t8);
        if (t7 > t8)
          restitution = t7;
        else
          restitution = t8;
        vA = bodyA._linearVelocity;
        vB = bodyB._linearVelocity;
        wA = bodyA._angularVelocity;
        wB = bodyB._angularVelocity;
        t1.initialize$5(manifold, bodyA.originTransform, radiusA, bodyB.originTransform, radiusB);
        t7 = this.constraints;
        if (i >= t7.length)
          return H.ioore(t7, i);
        cc = t7[i];
        cc.set$bodyA(bodyA);
        cc.set$bodyB(bodyB);
        cc.set$manifold(manifold);
        t7 = cc.normal.storage;
        t7[0] = t6[0];
        t7[1] = t6[1];
        cc.pointCount = manifold.pointCount;
        cc.friction = friction;
        cc.restitution = restitution;
        t8 = manifold.localNormal.storage;
        t9 = cc.localNormal.storage;
        t9[0] = t8[0];
        t9[1] = t8[1];
        t8 = manifold.localPoint.storage;
        t9 = cc.localPoint.storage;
        t9[0] = t8[0];
        t9[1] = t8[1];
        cc.radius = radiusA + radiusB;
        cc.type = manifold.type;
        for (t8 = manifold.points, t9 = cc.points, t10 = -wA, t11 = -wB, t12 = vB.storage, t13 = vA.storage, t14 = -restitution, j = 0; t15 = cc.pointCount, j < t15; ++j) {
          if (j >= 2)
            return H.ioore(t8, j);
          cp = t8[j];
          if (j >= t9.length)
            return H.ioore(t9, j);
          ccp = t9[j];
          ccp.set$normalImpulse(impulseRatio * cp.normalImpulse);
          ccp.set$tangentImpulse(impulseRatio * cp.tangentImpulse);
          t15 = ccp.get$localPoint();
          t16 = cp.localPoint.storage;
          t15.storage[0] = t16[0];
          ccp.get$localPoint().storage[1] = t16[1];
          t16 = ccp.get$rA();
          if (j >= t2.length)
            return H.ioore(t2, j);
          t15 = t2[j].get$x();
          t17 = bodyA.sweep.center.storage;
          t16.storage[0] = J.$sub$n(t15, t17[0]);
          t15 = ccp.rA;
          if (j >= t2.length)
            return H.ioore(t2, j);
          t15 = t15.storage;
          t15[1] = t2[j].get$y() - t17[1];
          t17 = ccp.rB;
          if (j >= t2.length)
            return H.ioore(t2, j);
          t16 = t2[j].get$x();
          t18 = bodyB.sweep.center.storage;
          t17 = t17.storage;
          t17[0] = J.$sub$n(t16, t18[0]);
          if (j >= t2.length)
            return H.ioore(t2, j);
          t17[1] = t2[j].get$y() - t18[1];
          t18 = t15[0];
          t16 = t7[1];
          t19 = t15[1];
          t20 = t7[0];
          rnA = t18 * t16 - t19 * t20;
          rnB = t17[0] * t16 - t17[1] * t20;
          t20 = bodyA.invMass;
          t19 = bodyB.invMass;
          t18 = bodyA.invInertia;
          t21 = bodyB.invInertia;
          ccp.normalMass = 1 / (t20 + t19 + t18 * (rnA * rnA) + t21 * (rnB * rnB));
          t3[0] = t16;
          t3[1] = -1 * t7[0];
          t16 = t15[0];
          t22 = t3[1];
          t23 = t15[1];
          t24 = t3[0];
          rtA = t16 * t22 - t23 * t24;
          rtB = t17[0] * t22 - t17[1] * t24;
          ccp.tangentMass = 1 / (t20 + t19 + t18 * (rtA * rtA) + t21 * (rtB * rtB));
          ccp.velocityBias = 0;
          t4[0] = t10 * t23;
          t4[1] = wA * t15[0];
          t5[0] = t11 * t17[1] + t12[0] - t13[0] - t4[0];
          t5[1] = wB * t17[0] + t12[1] - t13[1] - t4[1];
          vRel = t7[0] * t5[0] + t7[1] * t5[1];
          if (vRel < -1)
            ccp.velocityBias = t14 * vRel;
        }
        if (t15 === 2) {
          t8 = t9.length;
          if (0 >= t8)
            return H.ioore(t9, 0);
          ccp1 = t9[0];
          if (1 >= t8)
            return H.ioore(t9, 1);
          ccp2 = t9[1];
          invMassA = bodyA.invMass;
          invIA = bodyA.invInertia;
          invMassB = bodyB.invMass;
          invIB = bodyB.invInertia;
          t9 = ccp1.get$rA().storage;
          rn1A = t9[0] * t7[1] - t9[1] * t7[0];
          t9 = ccp1.get$rB().storage;
          rn1B = t9[0] * t7[1] - t9[1] * t7[0];
          t9 = ccp2.get$rA().storage;
          rn2A = t9[0] * t7[1] - t9[1] * t7[0];
          t9 = ccp2.get$rB().storage;
          rn2B = t9[0] * t7[1] - t9[1] * t7[0];
          t7 = invMassA + invMassB;
          t9 = invIA * rn1A;
          t8 = invIB * rn1B;
          k11 = t7 + t9 * rn1A + t8 * rn1B;
          k22 = t7 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
          k12 = t7 + t9 * rn2A + t8 * rn2B;
          if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
            t7 = cc.K.storage;
            t7[3] = k22;
            t7[2] = k12;
            t7[1] = k12;
            t7[0] = k11;
            t7 = cc.normalMass;
            t8 = t7.storage;
            t8[3] = k22;
            t8[2] = k12;
            t8[1] = k12;
            t8[0] = k11;
            t7.invert$0();
          } else
            cc.pointCount = 1;
        }
        ++i;
      }
    },
    warmStart$0: function() {
      var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, t3, j, ccp, Px, Py, t4, t5;
      t1 = this.tangent.storage;
      i = 0;
      while (true) {
        t2 = this.constraintCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t2 = this.constraints;
        if (i >= t2.length)
          return H.ioore(t2, i);
        c = t2[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        invMassA = bodyA.invMass;
        invIA = bodyA.invInertia;
        invMassB = bodyB.invMass;
        invIB = bodyB.invInertia;
        t2 = c.get$normal().storage;
        t3 = t2[0];
        t1[0] = t2[1];
        t1[1] = -1 * t3;
        for (t3 = c.points, j = 0; j < c.pointCount; ++j) {
          if (j >= t3.length)
            return H.ioore(t3, j);
          ccp = t3[j];
          Px = ccp.get$normalImpulse() * t2[0] + ccp.get$tangentImpulse() * t1[0];
          Py = ccp.get$normalImpulse() * t2[1] + ccp.get$tangentImpulse() * t1[1];
          t4 = bodyA._angularVelocity - invIA * (ccp.get$rA().storage[0] * Py - ccp.rA.storage[1] * Px);
          if (bodyA._type !== 0) {
            if (t4 * t4 > 0)
              bodyA.set$awake(true);
            bodyA._angularVelocity = t4;
          }
          t4 = bodyA._linearVelocity.storage;
          t4[0] = t4[0] - Px * invMassA;
          t4[1] = t4[1] - Py * invMassA;
          t4 = bodyB._angularVelocity;
          t5 = ccp.rB.storage;
          t5 = t4 + invIB * (t5[0] * Py - t5[1] * Px);
          if (bodyB._type !== 0) {
            if (t5 * t5 > 0)
              bodyB.set$awake(true);
            bodyB._angularVelocity = t5;
          }
          t4 = bodyB._linearVelocity.storage;
          t4[0] = t4[0] + Px * invMassB;
          t4[1] = t4[1] + Py * invMassB;
        }
        ++i;
      }
    },
    solveVelocityConstraints$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, i, t15, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, t16, t17, t18, j, t19, ccp, t20, t21, t22, t23, t24, maxFriction, newImpulse, lambda, Px, Py, a, cp2, t25, t26, t27, t28, t29, t30, t31, vn1, vn2;
      t1 = this.temp2;
      t2 = t1.storage;
      t3 = this.dv1.storage;
      t4 = this.dv2.storage;
      t5 = this.dv.storage;
      t6 = this.tangent.storage;
      t7 = this.x.storage;
      t8 = this.d;
      t9 = t8.storage;
      t10 = this.P1.storage;
      t11 = this.P2;
      t12 = t11.storage;
      t13 = this.temp1;
      t14 = t13.storage;
      i = 0;
      while (true) {
        t15 = this.constraintCount;
        if (typeof t15 !== "number")
          return H.iae(t15);
        if (!(i < t15))
          break;
        t15 = this.constraints;
        if (i >= t15.length)
          return H.ioore(t15, i);
        c = t15[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        wA = bodyA._angularVelocity;
        wB = bodyB._angularVelocity;
        vA = bodyA._linearVelocity;
        vB = bodyB._linearVelocity;
        invMassA = bodyA.invMass;
        invIA = bodyA.invInertia;
        invMassB = bodyB.invMass;
        invIB = bodyB.invInertia;
        t6[0] = c.get$normal().storage[1];
        t15 = c.normal.storage;
        t6[1] = -1 * t15[0];
        friction = c.friction;
        for (t16 = c.points, t17 = vB.storage, t18 = vA.storage, j = 0; t19 = c.pointCount, j < t19; ++j) {
          if (j >= t16.length)
            return H.ioore(t16, j);
          ccp = t16[j];
          t19 = ccp.get$rA().storage;
          t5[0] = -wB * ccp.get$rB().storage[1] + t17[0] - t18[0] + wA * t19[1];
          t5[1] = wB * ccp.get$rB().storage[0] + t17[1] - t18[1] - wA * t19[0];
          t19 = t5[0];
          t20 = t6[0];
          t21 = t5[1];
          t22 = t6[1];
          t23 = ccp.get$tangentMass();
          t24 = ccp.normalImpulse;
          if (typeof friction !== "number")
            return friction.$mul();
          maxFriction = friction * t24;
          newImpulse = P.max(-maxFriction, P.min(ccp.tangentImpulse + t23 * -(t19 * t20 + t21 * t22), maxFriction));
          lambda = newImpulse - ccp.tangentImpulse;
          Px = t6[0] * lambda;
          Py = t6[1] * lambda;
          t18[0] = t18[0] - Px * invMassA;
          t18[1] = t18[1] - Py * invMassA;
          t22 = ccp.rA.storage;
          wA -= invIA * (t22[0] * Py - t22[1] * Px);
          t17[0] = t17[0] + Px * invMassB;
          t17[1] = t17[1] + Py * invMassB;
          t22 = ccp.rB.storage;
          wB += invIB * (t22[0] * Py - t22[1] * Px);
          ccp.tangentImpulse = newImpulse;
        }
        t20 = t16.length;
        ccp = t16[0];
        if (t19 === 1) {
          if (0 >= t20)
            return H.ioore(t16, 0);
          t16 = ccp.get$rA().storage;
          t5[0] = -wB * ccp.get$rB().storage[1] + t17[0] - t18[0] + wA * t16[1];
          t5[1] = wB * ccp.get$rB().storage[0] + t17[1] - t18[1] - wA * t16[0];
          t16 = t5[0];
          t19 = t15[0];
          t20 = t5[1];
          t21 = t15[1];
          t22 = ccp.get$normalMass();
          t23 = ccp.velocityBias;
          t24 = ccp.normalImpulse;
          a = t24 + -t22 * (t16 * t19 + t20 * t21 - t23);
          newImpulse = a > 0 ? a : 0;
          lambda = newImpulse - t24;
          Px = t15[0] * lambda;
          Py = t15[1] * lambda;
          t18[0] = t18[0] - Px * invMassA;
          t18[1] = t18[1] - Py * invMassA;
          t15 = ccp.rA.storage;
          wA -= invIA * (t15[0] * Py - t15[1] * Px);
          t17[0] = t17[0] + Px * invMassB;
          t17[1] = t17[1] + Py * invMassB;
          t15 = ccp.rB.storage;
          wB += invIB * (t15[0] * Py - t15[1] * Px);
          ccp.normalImpulse = newImpulse;
        } else {
          if (0 >= t20)
            return H.ioore(t16, 0);
          if (1 >= t20)
            return H.ioore(t16, 1);
          cp2 = t16[1];
          t16 = ccp.get$normalImpulse();
          t19 = cp2.get$normalImpulse();
          t20 = new Float32Array(2);
          a = new T.Vector2(t20);
          t20[0] = t16;
          t20[1] = t19;
          t19 = -wB;
          t16 = ccp.get$rB().storage[1];
          t21 = t17[0];
          t22 = t18[0];
          t23 = ccp.rA.storage;
          t3[0] = t19 * t16 + t21 - t22 + wA * t23[1];
          t22 = ccp.rB.storage;
          t3[1] = wB * t22[0] + t17[1] - t18[1] - wA * t23[0];
          t21 = cp2.get$rB().storage[1];
          t16 = t17[0];
          t24 = t18[0];
          t25 = cp2.rA.storage;
          t4[0] = t19 * t21 + t16 - t24 + wA * t25[1];
          t24 = cp2.rB.storage;
          t4[1] = wB * t24[0] + t17[1] - t18[1] - wA * t25[0];
          t16 = t3[0];
          t21 = t15[0];
          t19 = t3[1];
          t26 = t15[1];
          t27 = t4[0];
          t28 = t4[1];
          t29 = ccp.velocityBias;
          t30 = cp2.velocityBias;
          t31 = new Float32Array(2);
          t31[0] = t16 * t21 + t19 * t26 - t29;
          t31[1] = t27 * t21 + t28 * t26 - t30;
          t30 = c.K.storage;
          t2[0] = t30[0] * t20[0] + t30[2] * t20[1];
          t2[1] = t30[1] * t20[0] + t30[3] * t20[1];
          t31[0] = t31[0] - t2[0];
          t31[1] = t31[1] - t2[1];
          $loop$1: {
            t16 = c.normalMass;
            t7[1] = t31[1];
            t7[0] = t31[0];
            t16 = t16.storage;
            t19 = t16[0];
            t20 = t7[0];
            t21 = t16[2];
            t26 = t7[1];
            t27 = t16[1];
            t16 = t16[3];
            t7[0] = t19 * t20 + t21 * t26;
            t7[1] = t27 * t20 + t16 * t26;
            t7[1] = t7[1] * -1;
            t7[0] = t7[0] * -1;
            if (t7[0] >= 0 && t7[1] >= 0) {
              t9[1] = t7[1];
              t9[0] = t7[0];
              t8.sub$1(a);
              t10[1] = t15[1];
              t10[0] = t15[0];
              t16 = t9[0];
              t10[1] = t10[1] * t16;
              t10[0] = t10[0] * t16;
              t12[1] = t15[1];
              t12[0] = t15[0];
              t15 = t9[1];
              t12[1] = t12[1] * t15;
              t12[0] = t12[0] * t15;
              t14[1] = t10[1];
              t14[0] = t10[0];
              t13.add$1(0, t11);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t15 = t23[0];
              t16 = t10[1];
              t23 = t23[1];
              t19 = t10[0];
              t20 = t25[0];
              t21 = t12[1];
              t25 = t25[1];
              t26 = t12[0];
              wA -= invIA * (t15 * t16 - t23 * t19 + (t20 * t21 - t25 * t26));
              wB += invIB * (t22[0] * t16 - t22[1] * t19 + (t24[0] * t21 - t24[1] * t26));
              ccp.normalImpulse = t7[0];
              cp2.normalImpulse = t7[1];
              break $loop$1;
            }
            t7[0] = -ccp.normalMass * t31[0];
            t7[1] = 0;
            t16 = t30[1];
            t19 = t7[0];
            t20 = t31[1];
            if (t19 >= 0 && t16 * t19 + t20 >= 0) {
              t9[1] = t7[1];
              t9[0] = t7[0];
              t8.sub$1(a);
              t10[1] = t15[1];
              t10[0] = t15[0];
              t16 = t9[0];
              t10[1] = t10[1] * t16;
              t10[0] = t10[0] * t16;
              t12[1] = t15[1];
              t12[0] = t15[0];
              t15 = t9[1];
              t12[1] = t12[1] * t15;
              t12[0] = t12[0] * t15;
              t14[1] = t10[1];
              t14[0] = t10[0];
              t13.add$1(0, t11);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t15 = t23[0];
              t16 = t10[1];
              t23 = t23[1];
              t19 = t10[0];
              t20 = t25[0];
              t21 = t12[1];
              t25 = t25[1];
              t26 = t12[0];
              wA -= invIA * (t15 * t16 - t23 * t19 + (t20 * t21 - t25 * t26));
              wB += invIB * (t22[0] * t16 - t22[1] * t19 + (t24[0] * t21 - t24[1] * t26));
              ccp.normalImpulse = t7[0];
              cp2.normalImpulse = t7[1];
              break $loop$1;
            }
            t7[0] = 0;
            t7[1] = -cp2.normalMass * t31[1];
            t16 = t30[2];
            t19 = t7[1];
            t20 = t31[0];
            if (t19 >= 0 && t16 * t19 + t20 >= 0) {
              t9[1] = t19;
              t9[0] = t7[0];
              t8.sub$1(a);
              t10[1] = t15[1];
              t10[0] = t15[0];
              t16 = t9[0];
              t10[1] = t10[1] * t16;
              t10[0] = t10[0] * t16;
              t12[1] = t15[1];
              t12[0] = t15[0];
              t15 = t9[1];
              t12[1] = t12[1] * t15;
              t12[0] = t12[0] * t15;
              t14[1] = t10[1];
              t14[0] = t10[0];
              t13.add$1(0, t11);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t15 = t23[0];
              t16 = t10[1];
              t23 = t23[1];
              t19 = t10[0];
              t20 = t25[0];
              t21 = t12[1];
              t25 = t25[1];
              t26 = t12[0];
              wA -= invIA * (t15 * t16 - t23 * t19 + (t20 * t21 - t25 * t26));
              wB += invIB * (t22[0] * t16 - t22[1] * t19 + (t24[0] * t21 - t24[1] * t26));
              ccp.normalImpulse = t7[0];
              cp2.normalImpulse = t7[1];
              break $loop$1;
            }
            t7[0] = 0;
            t7[1] = 0;
            vn1 = t31[0];
            vn2 = t31[1];
            if (vn1 >= 0 && vn2 >= 0) {
              t9[1] = t7[1];
              t9[0] = t7[0];
              t8.sub$1(a);
              t10[1] = t15[1];
              t10[0] = t15[0];
              t16 = t9[0];
              t10[1] = t10[1] * t16;
              t10[0] = t10[0] * t16;
              t12[1] = t15[1];
              t12[0] = t15[0];
              t15 = t9[1];
              t12[1] = t12[1] * t15;
              t12[0] = t12[0] * t15;
              t14[1] = t10[1];
              t14[0] = t10[0];
              t13.add$1(0, t11);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t15 = t23[0];
              t16 = t10[1];
              t23 = t23[1];
              t19 = t10[0];
              t20 = t25[0];
              t21 = t12[1];
              t25 = t25[1];
              t22 = t12[0];
              wA -= invIA * (t15 * t16 - t23 * t19 + (t20 * t21 - t25 * t22));
              wB += invIB * (t20 * t16 - t25 * t19 + (t24[0] * t21 - t24[1] * t22));
              ccp.normalImpulse = t7[0];
              cp2.normalImpulse = t7[1];
              break $loop$1;
            }
            break $loop$1;
          }
        }
        t18[1] = t18[1];
        t18[0] = t18[0];
        if (bodyA._type !== 0) {
          if (wA * wA > 0)
            bodyA.set$awake(true);
          bodyA._angularVelocity = wA;
        }
        t17[1] = t17[1];
        t17[0] = t17[0];
        if (bodyB._type !== 0) {
          if (wB * wB > 0)
            bodyB.set$awake(true);
          bodyB._angularVelocity = wB;
        }
        ++i;
      }
    },
    storeImpulses$0: function() {
      var i, t1, c, m, j, t2, t3;
      i = 0;
      while (true) {
        t1 = this.constraintCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.constraints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        c = t1[i];
        m = c.get$manifold();
        for (j = 0; j < c.get$pointCount(); ++j) {
          t1 = m.points;
          if (j >= 2)
            return H.ioore(t1, j);
          t2 = t1[j];
          t3 = c.points;
          if (j >= t3.length)
            return H.ioore(t3, j);
          t2.normalImpulse = t3[j].get$normalImpulse();
          t1 = t1[j];
          if (j >= t3.length)
            return H.ioore(t3, j);
          t1.tangentImpulse = t3[j].get$tangentImpulse();
        }
        ++i;
      }
    },
    solvePositionConstraints$1: function(baumgarte) {
      var t1, t2, t3, t4, t5, t6, t7, psm, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, minSeparation, i, t21, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, j, t22, t23, t24, t25, t26, t27, separation, $C, t28, t29, rnA, rnB, $K, impulse;
      t1 = this.P.storage;
      t2 = this.temp1;
      t3 = t2.storage;
      t4 = this.rA;
      t5 = t4.storage;
      t6 = this.rB;
      t7 = t6.storage;
      psm = this.psolver;
      t8 = psm.planePoint;
      t9 = psm.clipPoint;
      t10 = psm.temp;
      t11 = t10.storage;
      t12 = t9.storage;
      t13 = psm.normal;
      t14 = psm.point;
      t15 = t14.storage;
      t16 = t13.storage;
      t17 = psm.pointA;
      t18 = t17.storage;
      t19 = psm.pointB;
      t20 = t19.storage;
      minSeparation = 0;
      i = 0;
      while (true) {
        t21 = this.constraintCount;
        if (typeof t21 !== "number")
          return H.iae(t21);
        if (!(i < t21))
          break;
        t21 = this.constraints;
        if (i >= t21.length)
          return H.ioore(t21, i);
        c = t21[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        t21 = bodyA.mass;
        invMassA = t21 * bodyA.invMass;
        invIA = t21 * bodyA.invInertia;
        t21 = bodyB.mass;
        invMassB = t21 * bodyB.invMass;
        invIB = t21 * bodyB.invInertia;
        for (t21 = invMassA + invMassB, j = 0; j < c.get$pointCount(); ++j) {
          switch (c.get$type()) {
            case 0:
              t22 = c.get$bodyA();
              t23 = c.get$localPoint();
              V.Transform_mulToOut(t22.originTransform, t23, t17);
              t23 = c.get$bodyB();
              t22 = c.get$points();
              if (0 >= t22.length)
                return H.ioore(t22, 0);
              t22 = t22[0].get$localPoint();
              V.Transform_mulToOut(t23.originTransform, t22, t19);
              if (V.MathBox_distanceSquared(t17, t19) > 1.4208639999999999e-14) {
                t16[1] = t20[1];
                t16[0] = t20[0];
                t13.sub$1(t17);
                t13.normalize$0();
              } else {
                t16[0] = 1;
                t16[1] = 0;
              }
              t15[1] = t18[1];
              t15[0] = t18[0];
              t22 = t14.add$1(0, t19).storage;
              t22[1] = t22[1] * 0.5;
              t22[0] = t22[0] * 0.5;
              t11[1] = t20[1];
              t11[0] = t20[0];
              t10.sub$1(t17);
              t22 = t10.dot$1(t13);
              t23 = c.radius;
              if (typeof t23 !== "number")
                return H.iae(t23);
              psm.separation = t22 - t23;
              break;
            case 1:
              t22 = c.get$bodyA();
              t23 = c.get$localNormal();
              t22 = t22.originTransform;
              t23 = t23.storage;
              t16[1] = t23[1];
              t16[0] = t23[0];
              t22 = t22.rotation.storage;
              t23 = t22[0];
              t24 = t16[0];
              t25 = t22[2];
              t26 = t16[1];
              t27 = t22[1];
              t22 = t22[3];
              t16[0] = t23 * t24 + t25 * t26;
              t16[1] = t27 * t24 + t22 * t26;
              t26 = c.get$bodyA();
              t22 = c.get$localPoint();
              V.Transform_mulToOut(t26.originTransform, t22, t8);
              t22 = c.get$bodyB();
              t26 = c.get$points();
              if (j >= t26.length)
                return H.ioore(t26, j);
              t26 = t26[j].get$localPoint();
              V.Transform_mulToOut(t22.originTransform, t26, t9);
              t11[1] = t12[1];
              t11[0] = t12[0];
              t10.sub$1(t8);
              t26 = t10.dot$1(t13);
              t22 = c.radius;
              if (typeof t22 !== "number")
                return H.iae(t22);
              psm.separation = t26 - t22;
              t15[1] = t12[1];
              t15[0] = t12[0];
              break;
            case 2:
              t22 = c.get$bodyB();
              t23 = c.get$localNormal();
              t22 = t22.originTransform;
              t23 = t23.storage;
              t16[1] = t23[1];
              t16[0] = t23[0];
              t22 = t22.rotation.storage;
              t23 = t22[0];
              t24 = t16[0];
              t25 = t22[2];
              t26 = t16[1];
              t27 = t22[1];
              t22 = t22[3];
              t16[0] = t23 * t24 + t25 * t26;
              t16[1] = t27 * t24 + t22 * t26;
              t26 = c.get$bodyB();
              t22 = c.get$localPoint();
              V.Transform_mulToOut(t26.originTransform, t22, t8);
              t22 = c.get$bodyA();
              t26 = c.get$points();
              if (j >= t26.length)
                return H.ioore(t26, j);
              t26 = t26[j].get$localPoint();
              V.Transform_mulToOut(t22.originTransform, t26, t9);
              t11[1] = t12[1];
              t11[0] = t12[0];
              t10.sub$1(t8);
              t26 = t10.dot$1(t13);
              t22 = c.radius;
              if (typeof t22 !== "number")
                return H.iae(t22);
              psm.separation = t26 - t22;
              t15[1] = t12[1];
              t15[0] = t12[0];
              t16[1] = -t16[1];
              t16[0] = -t16[0];
              break;
          }
          separation = psm.separation;
          t5[1] = t15[1];
          t5[0] = t15[0];
          t22 = bodyA.sweep;
          t23 = t22.center;
          t4.sub$1(t23);
          t7[1] = t15[1];
          t7[0] = t15[0];
          t24 = bodyB.sweep;
          t25 = t24.center;
          t6.sub$1(t25);
          minSeparation = P.min(minSeparation, separation);
          $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
          t26 = t5[0];
          t27 = t16[1];
          t28 = t5[1];
          t29 = t16[0];
          rnA = t26 * t27 - t28 * t29;
          rnB = t7[0] * t27 - t7[1] * t29;
          $K = t21 + invIA * rnA * rnA + invIB * rnB * rnB;
          impulse = $K > 0 ? -$C / $K : 0;
          t1[1] = t27;
          t1[0] = t16[0];
          t1[1] = t1[1] * impulse;
          t1[0] = t1[0] * impulse;
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassA;
          t3[0] = t3[0] * invMassA;
          t23.sub$1(t2);
          t22.angle = t22.angle - invIA * (t5[0] * t1[1] - t5[1] * t1[0]);
          bodyA.synchronizeTransform$0();
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassB;
          t3[0] = t3[0] * invMassB;
          t25.add$1(0, t2);
          t24.angle = t24.angle + invIB * (t7[0] * t1[1] - t7[1] * t1[0]);
          bodyB.synchronizeTransform$0();
        }
        ++i;
      }
      return minSeparation >= -0.0075;
    },
    static: {"^": "ContactSolver_INITIAL_NUM_CONSTRAINTS,ContactSolver_K_MAX_CONDITION_NUMBER", ContactSolver$: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21;
        t1 = P.List_List$generate(256, new V.ContactSolver_closure(), true);
        t2 = V.WorldManifold$();
        t3 = new Float32Array(2);
        t4 = new Float32Array(2);
        t5 = new Float32Array(2);
        t6 = new Float32Array(2);
        t7 = new Float32Array(2);
        t8 = new Float32Array(2);
        t9 = new Float32Array(2);
        t10 = new Float32Array(2);
        t11 = new Float32Array(2);
        t12 = new Float32Array(2);
        t13 = new Float32Array(2);
        t14 = new Float32Array(2);
        t15 = new Float32Array(2);
        t16 = new Float32Array(2);
        t17 = new Float32Array(2);
        t18 = new Float32Array(2);
        t19 = new Float32Array(2);
        t20 = new Float32Array(2);
        t21 = new Float32Array(2);
        return new V.ContactSolver(t1, null, t2, new T.Vector2(t3), new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(t11), new T.Vector2(t12), new T.Vector2(t13), new V.PositionSolverManifold(new T.Vector2(t14), new T.Vector2(t15), 0, new T.Vector2(t16), new T.Vector2(t17), new T.Vector2(t18), new T.Vector2(t19), new T.Vector2(t20)), new T.Vector2(t21), new T.Vector2(new Float32Array(2)));
      }}
  },
  ContactSolver_closure: {
    "^": "Closure;",
    call$1: function(i) {
      return V.ContactConstraint$();
    }
  },
  PositionSolverManifold: {
    "^": "Object;normal,point,separation,pointA,pointB,temp,planePoint,clipPoint"
  },
  PolygonAndCircleContact: {
    "^": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      this.pool.collision.collidePolygonAndCircle$5(argManifold, this.fixtureA.shape, xfA, this.fixtureB.shape, xfB);
    }
  },
  PolygonContact: {
    "^": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      this.pool.collision.collidePolygons$5(argManifold, this.fixtureA.shape, xfA, this.fixtureB.shape, xfB);
    }
  },
  TimeOfImpactConstraint: {
    "^": "Object;localPoints<,localNormal<,localPoint<,type@,radius?,pointCount@,bodyA@,bodyB@",
    setFrom$1: function(argOther) {
      var t1, i;
      for (t1 = this.localPoints, i = 0; i < t1.length; ++i)
        t1[i].setFrom$1(argOther.get$localPoints().$index(0, i));
      this.localNormal.setFrom$1(argOther.get$localNormal());
      this.localPoint.setFrom$1(argOther.get$localPoint());
      this.type = argOther.get$type();
      this.radius = argOther.get$radius();
      this.pointCount = argOther.get$pointCount();
      this.bodyA = argOther.get$bodyA();
      this.bodyB = argOther.get$bodyB();
    },
    static: {TimeOfImpactConstraint$: function() {
        var t1, t2;
        t1 = P.List_List$generate(2, new V.TimeOfImpactConstraint_closure(), true);
        t2 = new Float32Array(2);
        return new V.TimeOfImpactConstraint(t1, new T.Vector2(t2), new T.Vector2(new Float32Array(2)), 0, 0, 0, null, null);
      }}
  },
  TimeOfImpactConstraint_closure: {
    "^": "Closure;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  TimeOfImpactSolver: {
    "^": "Object;constraints,count,toiBody,psm,rA<,rB<,P,temp",
    initialize$3: function(contacts, argCount, argToiBody) {
      var t1, t2, t3, i, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, j, cp;
      this.count = argCount;
      this.toiBody = argToiBody;
      t1 = this.constraints;
      t2 = t1.length;
      if (argCount >= t2) {
        t2 = Array(P.max(argCount, t2 * 2));
        t2.fixed$length = init;
        this.constraints = t2;
        t3 = t1.length;
        H.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
        for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
          t2 = V.TimeOfImpactConstraint$();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      }
      for (i = 0; i < this.count; ++i) {
        if (i >= 32)
          return H.ioore(contacts, i);
        contact = contacts[i];
        fixtureA = contact.fixtureA;
        fixtureB = contact.fixtureB;
        shapeA = fixtureA.shape;
        shapeB = fixtureB.shape;
        radiusA = shapeA.radius;
        radiusB = shapeB.radius;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        manifold = contact.manifold;
        t1 = this.constraints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        constraint = t1[i];
        constraint.set$bodyA(bodyA);
        constraint.set$bodyB(bodyB);
        t1 = constraint.get$localNormal().storage;
        t2 = manifold.localNormal.storage;
        t1[1] = t2[1];
        t1[0] = t2[0];
        t2 = constraint.get$localPoint().storage;
        t1 = manifold.localPoint.storage;
        t2[1] = t1[1];
        t2[0] = t1[0];
        constraint.set$type(manifold.type);
        constraint.set$pointCount(manifold.pointCount);
        constraint.set$radius(radiusA + radiusB);
        for (t1 = manifold.points, j = 0; j < constraint.get$pointCount(); ++j) {
          if (j >= 2)
            return H.ioore(t1, j);
          cp = t1[j];
          t2 = constraint.get$localPoints();
          t3 = cp.localPoint;
          if (j >= t2.length)
            return H.ioore(t2, j);
          t2[j] = t3;
        }
      }
    },
    solve$1: function(baumgarte) {
      var t1, t2, t3, t4, t5, t6, t7, t8, normal, point, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, minSeparation, i, t19, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, t20, t21, t22, t23, t24, t25, t26, separation, $C, t27, rnA, rnB, $K, impulse;
      for (t1 = this.P.storage, t2 = this.temp, t3 = t2.storage, t4 = this.rA, t5 = t4.storage, t6 = this.rB, t7 = t6.storage, t8 = this.psm, normal = t8.normal, point = t8.point, t9 = point.storage, t10 = normal.storage, t11 = t8.temp, t12 = t11.storage, t13 = t8.clipPoint.storage, t14 = t8.planePoint, t15 = t8.pointA, t16 = t15.storage, t17 = t8.pointB, t18 = t17.storage, minSeparation = 0, i = 0; i < this.count; ++i) {
        t19 = this.constraints;
        if (i >= t19.length)
          return H.ioore(t19, i);
        c = t19[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        massA = bodyA.mass;
        massB = bodyB.mass;
        t19 = this.toiBody;
        if (bodyA == null ? t19 == null : bodyA === t19)
          massB = 0;
        else
          massA = 0;
        invMassA = massA * bodyA.invMass;
        invIA = massA * bodyA.invInertia;
        invMassB = massB * bodyB.invMass;
        invIB = massB * bodyB.invInertia;
        for (t19 = invMassA + invMassB, j = 0; j < c.get$pointCount(); ++j) {
          switch (c.get$type()) {
            case 0:
              t20 = c.get$bodyA();
              t21 = c.get$localPoint();
              t20.toString;
              t22 = new Float32Array(2);
              V.Transform_mulToOut(t20.originTransform, t21, new T.Vector2(t22));
              t16[1] = t22[1];
              t16[0] = t22[0];
              t22 = c.get$bodyB();
              t21 = c.get$localPoints();
              if (0 >= t21.length)
                return H.ioore(t21, 0);
              t21 = t21[0];
              t22.toString;
              t20 = new Float32Array(2);
              V.Transform_mulToOut(t22.originTransform, t21, new T.Vector2(t20));
              t18[1] = t20[1];
              t18[0] = t20[0];
              if (V.MathBox_distanceSquared(t15, t17) > 1.4208639999999999e-14) {
                t10[1] = t18[1];
                t10[0] = t18[0];
                normal.sub$1(t15);
                normal.normalize$0();
              } else {
                t10[0] = 1;
                t10[1] = 0;
              }
              t9[1] = t16[1];
              t9[0] = t16[0];
              t20 = point.add$1(0, t17).storage;
              t20[1] = t20[1] * 0.5;
              t20[0] = t20[0] * 0.5;
              t12[1] = t18[1];
              t12[0] = t18[0];
              t11.sub$1(t15);
              t8.separation = t11.dot$1(normal) - c.radius;
              break;
            case 1:
              t20 = c.get$bodyA();
              t21 = c.get$localNormal();
              t20.toString;
              t22 = new Float32Array(2);
              t20 = t20.originTransform;
              t21 = t21.storage;
              t22[1] = t21[1];
              t22[0] = t21[0];
              t20 = t20.rotation.storage;
              t21 = t20[0];
              t23 = t22[0];
              t24 = t20[2];
              t25 = t22[1];
              t26 = t20[1];
              t20 = t20[3];
              t22[0] = t21 * t23 + t24 * t25;
              t22[1] = t26 * t23 + t20 * t25;
              t10[1] = t22[1];
              t10[0] = t22[0];
              t22 = c.get$bodyA();
              t25 = c.get$localPoint();
              t22.toString;
              t20 = new Float32Array(2);
              V.Transform_mulToOut(t22.originTransform, t25, new T.Vector2(t20));
              t25 = t14.storage;
              t25[1] = t20[1];
              t25[0] = t20[0];
              t20 = c.get$bodyB();
              t25 = c.get$localPoints();
              if (j >= t25.length)
                return H.ioore(t25, j);
              t25 = t25[j];
              t20.toString;
              t21 = new Float32Array(2);
              V.Transform_mulToOut(t20.originTransform, t25, new T.Vector2(t21));
              t13[1] = t21[1];
              t13[0] = t21[0];
              t12[1] = t13[1];
              t12[0] = t13[0];
              t11.sub$1(t14);
              t8.separation = t11.dot$1(normal) - c.radius;
              t9[1] = t13[1];
              t9[0] = t13[0];
              break;
            case 2:
              t20 = c.get$bodyB();
              t21 = c.get$localNormal();
              t20.toString;
              t22 = new Float32Array(2);
              t20 = t20.originTransform;
              t21 = t21.storage;
              t22[1] = t21[1];
              t22[0] = t21[0];
              t20 = t20.rotation.storage;
              t21 = t20[0];
              t23 = t22[0];
              t24 = t20[2];
              t25 = t22[1];
              t26 = t20[1];
              t20 = t20[3];
              t22[0] = t21 * t23 + t24 * t25;
              t22[1] = t26 * t23 + t20 * t25;
              t10[1] = t22[1];
              t10[0] = t22[0];
              t22 = c.get$bodyB();
              t25 = c.get$localPoint();
              t22.toString;
              t20 = new Float32Array(2);
              V.Transform_mulToOut(t22.originTransform, t25, new T.Vector2(t20));
              t25 = t14.storage;
              t25[1] = t20[1];
              t25[0] = t20[0];
              t20 = c.get$bodyA();
              t25 = c.get$localPoints();
              if (j >= t25.length)
                return H.ioore(t25, j);
              t25 = t25[j];
              t20.toString;
              t21 = new Float32Array(2);
              V.Transform_mulToOut(t20.originTransform, t25, new T.Vector2(t21));
              t13[1] = t21[1];
              t13[0] = t21[0];
              t12[1] = t13[1];
              t12[0] = t13[0];
              t11.sub$1(t14);
              t8.separation = t11.dot$1(normal) - c.radius;
              t9[1] = t13[1];
              t9[0] = t13[0];
              t10[1] = -t10[1];
              t10[0] = -t10[0];
              break;
          }
          separation = t8.separation;
          t5[1] = t9[1];
          t5[0] = t9[0];
          t20 = bodyA.sweep;
          t21 = t20.center;
          t4.sub$1(t21);
          t7[1] = t9[1];
          t7[0] = t9[0];
          t22 = bodyB.sweep;
          t23 = t22.center;
          t6.sub$1(t23);
          minSeparation = P.min(minSeparation, separation);
          $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
          t24 = t5[0];
          t25 = t10[1];
          t26 = t5[1];
          t27 = t10[0];
          rnA = t24 * t25 - t26 * t27;
          rnB = t7[0] * t25 - t7[1] * t27;
          $K = t19 + invIA * rnA * rnA + invIB * rnB * rnB;
          impulse = $K > 0 ? -$C / $K : 0;
          t1[1] = t25;
          t1[0] = t10[0];
          t1[1] = t1[1] * impulse;
          t1[0] = t1[0] * impulse;
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassA;
          t3[0] = t3[0] * invMassA;
          t21.sub$1(t2);
          t20.angle = t20.angle - invIA * (t5[0] * t1[1] - t5[1] * t1[0]);
          bodyA.synchronizeTransform$0();
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassB;
          t3[0] = t3[0] * invMassB;
          t23.add$1(0, t2);
          t22.angle = t22.angle + invIB * (t7[0] * t1[1] - t7[1] * t1[0]);
          bodyB.synchronizeTransform$0();
        }
      }
      return minSeparation >= -0.0075;
    },
    static: {TimeOfImpactSolver$: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
        t1 = P.List_List$generate(4, new V.TimeOfImpactSolver_closure(), true);
        t2 = new Float32Array(2);
        t3 = new Float32Array(2);
        t4 = new Float32Array(2);
        t5 = new Float32Array(2);
        t6 = new Float32Array(2);
        t7 = new Float32Array(2);
        t8 = new Float32Array(2);
        t9 = new Float32Array(2);
        t10 = new Float32Array(2);
        t11 = new Float32Array(2);
        return new V.TimeOfImpactSolver(t1, 0, null, new V.TimeOfImpactSolverManifold(new T.Vector2(t2), new T.Vector2(t3), 0, new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7), new T.Vector2(t8)), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(t11), new T.Vector2(new Float32Array(2)));
      }}
  },
  TimeOfImpactSolver_closure: {
    "^": "Closure;",
    call$1: function(i) {
      return V.TimeOfImpactConstraint$();
    }
  },
  TimeOfImpactSolverManifold: {
    "^": "Object;normal,point,separation,pointA,pointB,temp,planePoint,clipPoint"
  },
  Filter: {
    "^": "Object;categoryBits<,maskBits,groupIndex",
    setFrom$1: function(other) {
      this.categoryBits = other.get$categoryBits();
      this.maskBits = other.maskBits;
      this.groupIndex = other.groupIndex;
    }
  },
  Fixture: {
    "^": "Object;box,density,next,body,shape,friction,restitution,proxy,filter,isSensor,userData,_poolOne,_poolTwo",
    synchronize$3: function(broadPhase, transformOne, transformTwo) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      if (this.proxy == null)
        return;
      t1 = this._poolOne;
      this.shape.computeAxisAlignedBox$2(t1, transformOne);
      t2 = this._poolTwo;
      this.shape.computeAxisAlignedBox$2(t2, transformTwo);
      t3 = this.box;
      t4 = t3.lowerBound;
      t5 = t1.lowerBound;
      t6 = t5.storage;
      t7 = t6[0];
      t8 = t2.lowerBound.storage;
      t9 = t8[0];
      t7 = t7 < t9 ? t7 : t9;
      t4 = t4.storage;
      t4[0] = t7;
      t7 = t6[1];
      t8 = t8[1];
      t4[1] = t7 < t8 ? t7 : t8;
      t4 = t3.upperBound;
      t1 = t1.upperBound.storage;
      t7 = t1[0];
      t2 = t2.upperBound.storage;
      t8 = t2[0];
      t7 = t7 > t8 ? t7 : t8;
      t4 = t4.storage;
      t4[0] = t7;
      t1 = t1[1];
      t2 = t2[1];
      t4[1] = t1 > t2 ? t1 : t2;
      t1 = transformTwo.position.storage;
      t2 = transformOne.position.storage;
      t6[0] = t1[0] - t2[0];
      t6[1] = t1[1] - t2[1];
      t2 = this.proxy;
      if (broadPhase._tree.moveProxy$3(t2, t3, t5))
        broadPhase.moveBuffer.push(t2);
    }
  },
  FixtureDef: {
    "^": "Object;shape,userData,friction,restitution,density,isSensor,filter",
    FixtureDef$0: function() {
      var t1 = this.filter;
      t1.categoryBits = 1;
      t1.maskBits = 65535;
      t1.groupIndex = 0;
    },
    static: {FixtureDef$: function() {
        var t1 = new V.FixtureDef(null, null, 0.2, 0, 0, false, new V.Filter(0, 0, 0));
        t1.FixtureDef$0();
        return t1;
      }}
  },
  Island: {
    "^": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
    init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
      var t1, old, i, t2, t3;
      this.bodyCapacity = argBodyCapacity;
      this.contactCapacity = argContactCapacity;
      this.jointCapacity = argJointCapacity;
      this.bodyCount = 0;
      this.contactCount = 0;
      this.listener = argListener;
      t1 = this.bodies;
      if (t1 == null || argBodyCapacity > t1.length)
        this.bodies = Array(argBodyCapacity);
      t1 = this.contacts;
      if (t1 == null || argContactCapacity > t1.length)
        this.contacts = Array(argContactCapacity);
      t1 = this.joints;
      if (t1 == null || argJointCapacity > t1.length)
        this.joints = Array(argJointCapacity);
      old = this.velocities;
      t1 = old == null;
      if (t1 || argBodyCapacity > old.length) {
        if (t1)
          old = Array(0);
        t1 = Array(argBodyCapacity);
        t1.fixed$length = init;
        this.velocities = t1;
        i = old.length;
        H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
        for (; t1 = this.velocities, i < t1.length; ++i) {
          t2 = new V.Velocity(null, null);
          t2.v = new T.Vector2(new Float32Array(2));
          t2.a = 0;
          t1[i] = t2;
        }
      }
      old = this.positions;
      t1 = old == null;
      if (!t1) {
        t2 = this.bodyCapacity;
        t3 = old.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t3 = t2 > t3;
        t2 = t3;
      } else
        t2 = true;
      if (t2) {
        if (t1)
          old = Array(0);
        t1 = this.bodyCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        this.positions = t1;
        i = old.length;
        H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
        for (; t1 = this.positions, i < t1.length; ++i) {
          t2 = new V.Position(null, null);
          t2.x = new T.Vector2(new Float32Array(2));
          t2.a = 0;
          t1[i] = t2;
        }
      }
    },
    solve$3: function(step, gravity, allowSleep) {
      var t1, i, t2, b, t3, t4, t5, t6, t7, t8, newAngularVelocity, a, a1, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, temp, j, ratio, rotation, t9, contactsOkay, jointsOkay, minSleepTime;
      t1 = gravity.storage;
      i = 0;
      while (true) {
        t2 = this.bodyCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        c$0: {
          t2 = this.bodies;
          if (i >= t2.length)
            return H.ioore(t2, i);
          b = t2[i];
          if (b._type !== 2)
            break c$0;
          t2 = b._force.storage;
          t3 = t2[0];
          t4 = b.invMass;
          t5 = t1[0];
          t6 = step.dt;
          t2 = t2[1];
          t7 = t1[1];
          t8 = new Float32Array(2);
          t8[0] = (t3 * t4 + t5) * t6;
          t8[1] = (t2 * t4 + t7) * t6;
          t6 = b._linearVelocity;
          t6.add$1(0, new T.Vector2(t8));
          t8 = b._angularVelocity;
          newAngularVelocity = t8 + step.dt * b.invInertia * b._torque;
          if (b._type !== 0) {
            if (newAngularVelocity * newAngularVelocity > 0)
              b.set$awake(true);
            b._angularVelocity = newAngularVelocity;
            t2 = newAngularVelocity;
          } else
            t2 = t8;
          t3 = step.dt;
          a = 1 - t3 * b.linearDamping;
          t4 = a < 1;
          if (0 > (t4 ? a : 1))
            a1 = 0;
          else
            a1 = t4 ? a : 1;
          t4 = t6.storage;
          t4[1] = t4[1] * a1;
          t4[0] = t4[0] * a1;
          a2 = 1 - t3 * b.angularDamping;
          b1 = a2 < 1 ? a2 : 1;
          t2 *= 0 > b1 ? 0 : b1;
          if (b._type !== 0) {
            if (t2 * t2 > 0)
              b.set$awake(true);
            b._angularVelocity = t2;
          }
        }
        ++i;
      }
      t1 = this.contactCount;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.contacts;
      i1 = -1;
      i2 = 0;
      for (; i2 < t1; ++i2) {
        t3 = t2.length;
        if (i2 >= t3)
          return H.ioore(t2, i2);
        t4 = t2[i2];
        fixtureA = t4.fixtureA;
        fixtureB = t4.fixtureB;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        if (bodyA._type !== 0 && bodyB._type !== 0) {
          ++i1;
          if (i1 >= t3)
            return H.ioore(t2, i1);
          temp = t2[i1];
          t2[i1] = t4;
          t2[i2] = temp;
        }
      }
      t3 = this._contactSolver;
      t3.init$3(t2, t1, step.dtRatio);
      t3.warmStart$0();
      i = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.joints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].initVelocityConstraints$1(step);
        ++i;
      }
      for (i = 0; i < step.velocityIterations; ++i) {
        j = 0;
        while (true) {
          t1 = this.jointCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(j < t1))
            break;
          t1 = this.joints;
          if (j >= t1.length)
            return H.ioore(t1, j);
          t1[j].solveVelocityConstraints$1(step);
          ++j;
        }
        t3.solveVelocityConstraints$0();
      }
      t3.storeImpulses$0();
      t1 = new Float32Array(2);
      temp = new T.Vector2(t1);
      t2 = this._translation;
      t4 = t2.storage;
      i = 0;
      while (true) {
        t5 = this.bodyCount;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (!(i < t5))
          break;
        c$0: {
          t5 = this.bodies;
          if (i >= t5.length)
            return H.ioore(t5, i);
          b = t5[i];
          if (b._type === 0)
            break c$0;
          t5 = b._linearVelocity.storage;
          t4[1] = t5[1];
          t4[0] = t5[0];
          t6 = step.dt;
          t4[1] = t4[1] * t6;
          t4[0] = t4[0] * t6;
          if (t2.dot$1(t2) > 4) {
            ratio = 2 / t2.get$length(t2);
            t5[1] = t5[1] * ratio;
            t5[0] = t5[0] * ratio;
          }
          rotation = step.dt * b._angularVelocity;
          if (rotation * rotation > 2.4674011002723395) {
            t6 = Math.abs(rotation);
            t6 = b._angularVelocity * (1.5707963267948966 / t6);
            if (b._type !== 0) {
              if (t6 * t6 > 0)
                b.set$awake(true);
              b._angularVelocity = t6;
            }
          }
          t6 = b.sweep;
          t7 = t6.center;
          t8 = t6.centerZero.storage;
          t9 = t7.storage;
          t8[1] = t9[1];
          t8[0] = t9[0];
          t6.angleZero = t6.angle;
          t1[1] = t5[1];
          t1[0] = t5[0];
          t5 = step.dt;
          t1[1] = t1[1] * t5;
          t1[0] = t1[0] * t5;
          t7.add$1(0, temp);
          t6.angle = t6.angle + step.dt * b._angularVelocity;
          b.synchronizeTransform$0();
        }
        ++i;
      }
      for (i = 0; i < step.positionIterations; ++i) {
        contactsOkay = t3.solvePositionConstraints$1(0.2);
        jointsOkay = true;
        j = 0;
        while (true) {
          t1 = this.jointCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(j < t1))
            break;
          t1 = this.joints;
          if (j >= t1.length)
            return H.ioore(t1, j);
          t1[j].solvePositionConstraints$1(0.2);
          if (jointsOkay)
            ;
          ++j;
          jointsOkay = false;
        }
        if (contactsOkay && jointsOkay)
          break;
      }
      this.report$1(t3.constraints);
      if (allowSleep) {
        minSleepTime = 99999999999999;
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          c$0: {
            t1 = this.bodies;
            if (i >= t1.length)
              return H.ioore(t1, i);
            b = t1[i];
            if (b._type === 0)
              break c$0;
            t1 = b.flags;
            if (typeof t1 !== "number")
              return t1.$and();
            if ((t1 & 4) === 0) {
              b.sleepTime = 0;
              minSleepTime = 0;
            }
            if ((t1 & 4) !== 0) {
              t1 = b._angularVelocity;
              if (!(t1 * t1 > 0.0012184696791468343)) {
                t1 = b._linearVelocity;
                t1 = t1.dot$1(t1) > 0.0001;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              b.sleepTime = 0;
              minSleepTime = 0;
            } else {
              t1 = b.sleepTime + step.dt;
              b.sleepTime = t1;
              minSleepTime = P.min(minSleepTime, t1);
            }
          }
          ++i;
        }
        if (minSleepTime >= 0.5) {
          i = 0;
          while (true) {
            t1 = this.bodyCount;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1))
              break;
            t1 = this.bodies;
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1[i].set$awake(false);
            ++i;
          }
        }
      }
    },
    report$1: function(constraints) {
      return;
    }
  },
  Position: {
    "^": "Object;x@,a"
  },
  Velocity: {
    "^": "Object;v,a"
  },
  Joint: {
    "^": "Object;"
  },
  TimeStep: {
    "^": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting"
  },
  World: {
    "^": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
    _addType$3: function(creatorStack, type1, type2) {
      var register, t1, t2, register2;
      register = new V.ContactRegister(null, false);
      register.creator = creatorStack;
      register.primary = true;
      t1 = this._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t2 = t1[type1];
      t2.length;
      if (type2 >= 2)
        return H.ioore(t2, type2);
      t2[type2] = register;
      if (type1 !== type2) {
        register2 = new V.ContactRegister(null, false);
        register2.creator = creatorStack;
        register2.primary = false;
        t1[type2][type1] = register2;
      }
    },
    popContact$2: function(fixtureA, fixtureB) {
      var type1, type2, t1, reg, creator, c;
      type1 = fixtureA.shape.type;
      type2 = fixtureB.shape.type;
      t1 = this._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t1 = t1[type1];
      t1.length;
      if (type2 >= 2)
        return H.ioore(t1, type2);
      reg = t1[type2];
      creator = reg.creator;
      if (creator != null) {
        if (creator._head === creator._tail)
          creator = this._getFreshContactStack$2(type1, type2);
        if (reg.primary) {
          c = creator.removeFirst$0();
          c.init$2(fixtureA, fixtureB);
          return c;
        } else {
          c = creator.removeFirst$0();
          c.init$2(fixtureB, fixtureA);
          return c;
        }
      } else
        return;
    },
    _getFreshContactStack$2: function(type1, type2) {
      var t1, t2;
      if (type1 === 0 && type2 === 0)
        return this._pool.getCircleContactStack$0();
      else {
        t1 = type1 === 1 && type2 === 1;
        t2 = this._pool;
        if (t1)
          return t2.getPolyContactStack$0();
        else
          return t2.getPolyCircleContactStack$0();
      }
    },
    createBody$1: function(def) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, b;
      if ((this._flags & 2) === 2)
        return;
      t1 = V.Transform$();
      t2 = V.Sweep$();
      t3 = new T.Vector2(new Float32Array(2));
      t3.setFrom$1(def.linearVelocity);
      t4 = new Float32Array(2);
      t5 = def.userData;
      t6 = V.FixtureDef$();
      t7 = new Float32Array(2);
      t8 = V.Transform$();
      t9 = new Float32Array(2);
      t10 = new Float32Array(2);
      b = new V.Body(this, 0, null, 0, t5, t3, 0, null, null, null, null, null, 0, null, new T.Vector2(t4), 0, 0, 0, def.linearDamping, def.angularDamping, def.type, null, t1, t2, t6, new V.MassData(0, new T.Vector2(t7), 0), t8, new T.Vector2(t9), new T.Vector2(t10));
      b.Body$2(def, this);
      b.prev = null;
      t10 = this._bodyList;
      b.next = t10;
      if (t10 != null)
        t10.prev = b;
      this._bodyList = b;
      ++this._bodyCount;
      return b;
    },
    step$3: function(dt, velocityIterations, positionIterations) {
      var t1 = this._flags;
      if ((t1 & 1) === 1) {
        t1 = this._contactManager;
        t1.broadPhase.updatePairs$1(t1.get$_addPair());
        t1 = this._flags &= 4294967294;
      }
      this._flags = t1 | 2;
      t1 = this.timestep;
      t1.dt = dt;
      t1.velocityIterations = velocityIterations;
      t1.positionIterations = positionIterations;
      if (dt > 0)
        t1.inv_dt = 1 / dt;
      else
        t1.inv_dt = 0;
      t1.dtRatio = this._inverseTimestep * dt;
      t1.warmStarting = this._warmStarting;
      this._contactManager.collide$0();
      if (t1.dt > 0) {
        this.solve$1(t1);
        if (this._continuousPhysics)
          this.solveTimeOfImpact$0();
        this._inverseTimestep = t1.inv_dt;
      }
      if ((this._flags & 4) === 4)
        this.clearForces$0();
      this._flags &= 4294967293;
    },
    clearForces$0: function() {
      var body, t1;
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body._force.storage;
        t1[0] = 0;
        t1[1] = 0;
        body._torque = 0;
      }
    },
    solve$1: function(timeStep) {
      var t1, t2, t3, b, c, j, stackSize, seed, t4, t5, stackCount, ce, contact, sensorA, sensorB, t6, other, stackCount0, je, i;
      t1 = this.island;
      t2 = this._bodyCount;
      t3 = this._contactManager;
      t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
      for (b = this._bodyList; b != null; b = b.next) {
        t2 = b.flags;
        if (typeof t2 !== "number")
          return t2.$and();
        b.flags = t2 & 4294967294;
      }
      for (c = this._contactManager.contactList; c != null; c = c.next) {
        t2 = c.flags;
        if (typeof t2 !== "number")
          return t2.$and();
        c.flags = t2 & 4294967294;
      }
      for (j = this._jointList; false; j = j.get$_next())
        j.set$islandFlag(false);
      stackSize = this._bodyCount;
      if (this.stack.length < stackSize)
        this.stack = Array(stackSize);
      for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.next) {
        t4 = seed.flags;
        if (typeof t4 !== "number")
          return t4.$and();
        if ((t4 & 1) === 1)
          continue;
        if ((t4 & 2) !== 2 || (t4 & 32) !== 32)
          continue;
        if (seed._type === 0)
          continue;
        t1.bodyCount = 0;
        t1.contactCount = 0;
        t1.jointCount = 0;
        t5 = this.stack;
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5[0] = seed;
        seed.flags = t4 | 1;
        for (stackCount = 1; stackCount > 0;) {
          t4 = this.stack;
          --stackCount;
          if (stackCount >= t4.length)
            return H.ioore(t4, stackCount);
          b = t4[stackCount];
          t4 = t1.bodyCount;
          b.islandIndex = t4;
          t5 = t1.bodies;
          if (typeof t4 !== "number")
            return t4.$add();
          t1.bodyCount = t4 + 1;
          if (t4 >= t5.length)
            return H.ioore(t5, t4);
          t5[t4] = b;
          b.set$awake(true);
          if (b._type === 0)
            continue;
          for (ce = b.contactList; ce != null; ce = ce.next) {
            contact = ce.contact;
            t4 = contact.flags;
            if (typeof t4 !== "number")
              return t4.$and();
            if ((t4 & 1) === 1)
              continue;
            if ((t4 & 4) !== 4 || (t4 & 2) !== 2)
              continue;
            sensorA = contact.fixtureA.isSensor;
            sensorB = contact.fixtureB.isSensor;
            if (sensorA === true || sensorB === true)
              continue;
            t5 = t1.contacts;
            t6 = t1.contactCount;
            if (typeof t6 !== "number")
              return t6.$add();
            t1.contactCount = t6 + 1;
            if (t6 >= t5.length)
              return H.ioore(t5, t6);
            t5[t6] = contact;
            contact.flags = t4 | 1;
            other = ce.other;
            t4 = other.flags;
            if (typeof t4 !== "number")
              return t4.$and();
            if ((t4 & 1) === 1)
              continue;
            t5 = this.stack;
            stackCount0 = stackCount + 1;
            if (stackCount >= t5.length)
              return H.ioore(t5, stackCount);
            t5[stackCount] = other;
            other.flags = t4 | 1;
            stackCount = stackCount0;
          }
          for (je = b.jointList; false; je = je.get$next()) {
            je.get$joint().get$islandFlag();
            other = je.get$other();
            other.get$active();
            t4 = je.get$joint();
            t5 = t1.joints;
            t6 = t1.jointCount;
            if (typeof t6 !== "number")
              return t6.$add();
            t1.jointCount = t6 + 1;
            if (t6 >= t5.length)
              return H.ioore(t5, t6);
            t5[t6] = t4;
            je.get$joint().set$islandFlag(true);
            other.get$flags().$and(0, 1);
            t4 = this.stack;
            stackCount0 = stackCount + 1;
            if (stackCount < 0 || stackCount >= t4.length)
              return H.ioore(t4, stackCount);
            t4[stackCount] = other;
            other.set$flags(other.get$flags().$or(0, 1));
            stackCount = stackCount0;
          }
        }
        t1.solve$3(timeStep, t2, t3);
        i = 0;
        while (true) {
          t4 = t1.bodyCount;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          t4 = t1.bodies;
          if (i >= t4.length)
            return H.ioore(t4, i);
          b = t4[i];
          if (b._type === 0) {
            t4 = b.flags;
            if (typeof t4 !== "number")
              return t4.$and();
            b.flags = t4 & 4294967294;
          }
          ++i;
        }
      }
      for (b = this._bodyList; b != null; b = b.next) {
        t1 = b.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 1) === 0)
          continue;
        if (b._type === 0)
          continue;
        b.synchronizeFixtures$0();
      }
      t1 = this._contactManager;
      t1.broadPhase.updatePairs$1(t1.get$_addPair());
    },
    solveTimeOfImpact$0: function() {
      var c, t1, body, t2;
      for (c = this._contactManager.contactList; c != null; c = c.next) {
        t1 = c.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        c.flags = t1 | 4;
        c.toiCount = 0;
      }
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 1) !== 0) {
          t2 = body._type;
          t2 = t2 === 1 || t2 === 0;
        } else
          t2 = true;
        if (t2)
          body.flags = t1 | 64;
        else
          body.flags = t1 & 4294967231;
      }
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 64) === 64 || (t1 & 8) === 8)
          continue;
        this.solveTimeOfImpactGivenBody$1(body);
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        body.flags = t1 | 64;
      }
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 64) === 64 || (t1 & 8) !== 8)
          continue;
        this.solveTimeOfImpactGivenBody$1(body);
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        body.flags = t1 | 64;
      }
    },
    solveTimeOfImpactGivenBody$1: function(body) {
      var t1, bullet, t2, t3, t4, t5, t6, t7, toiContact, toi, toiOther, iter, ce, found, count, toiContact0, other, type, t8, fixtureA, fixtureB, bodyA, bodyB, contact, i;
      t1 = body.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      bullet = (t1 & 8) === 8;
      t1 = this.toiOutput;
      t2 = this.toiInput;
      t3 = t2.proxyA;
      t4 = t2.proxyB;
      t5 = t2.sweepA;
      t6 = t2.sweepB;
      t7 = this._pool;
      toiContact = null;
      toi = 1;
      toiOther = null;
      iter = 0;
      do {
        for (ce = body.contactList, found = false, count = 0; ce != null; ce = ce.next) {
          toiContact0 = ce.contact;
          if (toiContact0 == null ? toiContact == null : toiContact0 === toiContact)
            continue;
          other = ce.other;
          type = other._type;
          if (bullet) {
            t8 = other.flags;
            if (typeof t8 !== "number")
              return t8.$and();
            if ((t8 & 64) === 0)
              continue;
            if (type !== 0) {
              t8 = toiContact0.flags;
              if (typeof t8 !== "number")
                return t8.$and();
              t8 = (t8 & 16) !== 0;
            } else
              t8 = false;
            if (t8)
              continue;
          } else if (type === 2)
            continue;
          t8 = toiContact0.flags;
          if (typeof t8 !== "number")
            return t8.$and();
          if ((t8 & 4) === 4) {
            t8 = toiContact0.toiCount;
            if (typeof t8 !== "number")
              return t8.$gt();
            t8 = t8 > 10;
          } else
            t8 = true;
          if (t8)
            continue;
          fixtureA = toiContact0.fixtureA;
          fixtureB = toiContact0.fixtureB;
          if (fixtureA.isSensor === true || fixtureB.isSensor === true)
            continue;
          bodyA = fixtureA.body;
          bodyB = fixtureB.body;
          t3.setFromShape$1(fixtureA.shape);
          t4.setFromShape$1(fixtureB.shape);
          t5.setFrom$1(bodyA.sweep);
          t6.setFrom$1(bodyB.sweep);
          t2.tMax = toi;
          t7.timeOfImpact.timeOfImpact$2(t1, t2);
          if (t1.state === 3 && t1.t < toi) {
            toi = t1.t;
            toiOther = other;
            toiContact = toiContact0;
            found = true;
          }
          ++count;
        }
        ++iter;
      } while (found && count > 1 && iter < 50);
      if (toiContact == null) {
        t1 = body.sweep;
        t1.advance$1(1);
        t2 = t1.center.storage;
        t3 = t1.centerZero.storage;
        t2[1] = t3[1];
        t2[0] = t3[0];
        t1.angle = t1.angleZero;
        body.synchronizeTransform$0();
        return;
      }
      t1 = this.backup;
      t2 = body.sweep;
      t1.setFrom$1(t2);
      t2.advance$1(toi);
      t3 = t2.center.storage;
      t4 = t2.centerZero.storage;
      t3[1] = t4[1];
      t3[0] = t4[0];
      t2.angle = t2.angleZero;
      body.synchronizeTransform$0();
      toiContact.update$1(this._contactManager.contactListener);
      t3 = toiContact.flags;
      if (typeof t3 !== "number")
        return t3.$and();
      if ((t3 & 4) !== 4) {
        t2.setFrom$1(t1);
        this.solveTimeOfImpactGivenBody$1(body);
      }
      t1 = toiContact.toiCount;
      if (typeof t1 !== "number")
        return t1.$add();
      toiContact.toiCount = t1 + 1;
      ce = body.contactList;
      count = 0;
      while (true) {
        if (!(ce != null && count < 32))
          break;
        c$0: {
          if (ce.other._type === 2)
            break c$0;
          contact = ce.contact;
          t1 = contact.flags;
          if (typeof t1 !== "number")
            return t1.$and();
          if ((t1 & 4) !== 4)
            break c$0;
          fixtureA = contact.fixtureA;
          fixtureB = contact.fixtureB;
          if (fixtureA.isSensor === true || fixtureB.isSensor === true)
            break c$0;
          if (contact !== toiContact)
            contact.update$1(this._contactManager.contactListener);
          t1 = contact.flags;
          if (typeof t1 !== "number")
            return t1.$and();
          if ((t1 & 4) !== 4 || (t1 & 2) !== 2)
            break c$0;
          t1 = this.contacts;
          if (count >= 32)
            return H.ioore(t1, count);
          t1[count] = contact;
          ++count;
        }
        ce = ce.next;
      }
      t1 = this.toiSolver;
      t1.initialize$3(this.contacts, count, body);
      for (i = 0; i < 20; ++i)
        if (t1.solve$1(0.75))
          break;
      if (toiOther._type !== 0) {
        t1 = toiContact.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        toiContact.flags = t1 | 16;
      }
    },
    World$3: function(gravity, doSleep, argPool) {
      var t1, i;
      this._contactManager = new V.ContactManager(V.BroadPhase$(), null, 0, new V.ContactFilter(), null, this);
      for (t1 = this._contactStacks, i = 0; i < 2; ++i)
        t1[i] = Array(2);
      t1 = this._pool;
      this._addType$3(t1.getCircleContactStack$0(), 0, 0);
      this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
      this._addType$3(t1.getPolyContactStack$0(), 1, 1);
    },
    static: {"^": "World_WORLD_POOL_SIZE,World_WORLD_POOL_CONTAINER_SIZE,World_NEW_FIXTURE,World_LOCKED,World_CLEAR_FORCES", World$: function(gravity, doSleep, argPool) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
        t1 = new Float32Array(2);
        t2 = new Float32Array(2);
        t3 = new Float32Array(2);
        t4 = new Float32Array(2);
        t5 = V.DistanceProxy$();
        t6 = V.DistanceProxy$();
        t7 = V.Sweep$();
        t8 = V.Sweep$();
        t9 = V.Sweep$();
        t10 = V.TimeOfImpactSolver$();
        t11 = V.ContactSolver$();
        t1 = new V.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, Array(2), new T.Vector2(t1), new T.Vector2(t2), new V.TimeStep(0, 0, 0, 0, 0, true), new T.Vector2(t3), new T.Vector2(t4), new V.WorldQueryWrapper(null, null), new V.TimeOfImpactInput(t5, t6, t7, t8, 0), new V.TimeOfImpactOutput(0, 0), t9, t10, Array(32), new V.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, t11, new T.Vector2(new Float32Array(2)), new V.ContactImpulse(Array(2), Array(2))), Array(10));
        t1.World$3(gravity, doSleep, argPool);
        return t1;
      }}
  },
  WorldQueryWrapper: {
    "^": "Object;broadPhase,callback"
  },
  DefaultWorldPool: {
    "^": "Object;collision,timeOfImpact,distance",
    getCircleContactStack$0: function() {
      var queue, i;
      queue = new P.ListQueue(null, 0, 0, 0);
      queue.ListQueue$1(null);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.CircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    getPolyCircleContactStack$0: function() {
      var queue, i;
      queue = new P.ListQueue(null, 0, 0, 0);
      queue.ListQueue$1(null);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.PolygonAndCircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    getPolyContactStack$0: function() {
      var queue, i;
      queue = new P.ListQueue(null, 0, 0, 0);
      queue.ListQueue$1(null);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.PolygonContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    DefaultWorldPool$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24;
      t1 = V.SimplexVertex$();
      t2 = V.SimplexVertex$();
      t3 = V.SimplexVertex$();
      t4 = new Float32Array(2);
      t5 = new Float32Array(2);
      t6 = new Float32Array(2);
      t7 = new Float32Array(2);
      t8 = new Float32Array(2);
      t9 = new Float32Array(2);
      t1 = new V.Simplex(t1, t2, t3, Array(3), 0, new T.Vector2(t4), new T.Vector2(t6), new T.Vector2(t5), new T.Vector2(t7), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(new Float32Array(2)));
      t1.Simplex$0();
      t2 = new Float32Array(2);
      t3 = new Float32Array(2);
      t4 = new Float32Array(2);
      this.distance = new V.Distance(0, 0, 20, t1, Array(3), Array(3), new T.Vector2(t2), new T.Vector2(t3), new T.Vector2(t4), new T.Vector2(new Float32Array(2)));
      t1 = V.DistanceInput$();
      t2 = V.SimplexCache$();
      t3 = V.DistanceOutput$();
      t4 = new Float32Array(2);
      t5 = new Float32Array(2);
      t6 = new Float32Array(2);
      t7 = new Float32Array(2);
      t8 = new Float32Array(2);
      t9 = new Float32Array(2);
      t10 = new Float32Array(2);
      t1 = new V.Collision(this, t2, t1, t3, new V.EdgeResults(0, 0), new V.EdgeResults(0, 0), Array(2), new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(new Float32Array(2)), Array(2), Array(2));
      t1.Collision$_construct$1(this);
      this.collision = t1;
      t1 = V.SimplexCache$();
      t2 = V.DistanceInput$();
      t3 = V.Transform$();
      t4 = V.Transform$();
      t5 = V.DistanceOutput$();
      t6 = V.DistanceProxy$();
      t7 = V.DistanceProxy$();
      t8 = new Float32Array(2);
      t9 = new Float32Array(2);
      t10 = V.Sweep$();
      t11 = V.Sweep$();
      t12 = new Float32Array(2);
      t13 = new Float32Array(2);
      t14 = new Float32Array(2);
      t15 = new Float32Array(2);
      t16 = new Float32Array(2);
      t17 = new Float32Array(2);
      t18 = new Float32Array(2);
      t19 = new Float32Array(2);
      t20 = new Float32Array(2);
      t21 = new Float32Array(2);
      t22 = V.Transform$();
      t23 = V.Transform$();
      t24 = new Float32Array(2);
      t1 = new V.TimeOfImpact(t1, t2, t3, t4, t5, new V.SeparationFunction(t6, t7, 0, new T.Vector2(t8), new T.Vector2(t9), t10, t11, new T.Vector2(t12), new T.Vector2(t13), new T.Vector2(t14), new T.Vector2(t15), new T.Vector2(t16), new T.Vector2(t17), new T.Vector2(t18), new T.Vector2(t19), new T.Vector2(t20), new T.Vector2(t24), new T.Vector2(new Float32Array(2)), new T.Vector2(t21), t22, t23), Array(2), V.Sweep$(), V.Sweep$(), this);
      t1.TimeOfImpact$_construct$1(this);
      this.timeOfImpact = t1;
    }
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i)
      if (t1[i] === iterable)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround_sortList: function(list, compare) {
    if (compare == null)
      compare = P.Comparable_compare$closure();
    H.Sort__doSort(list, 0, list.length - 1, compare);
  },
  IterableMixinWorkaround__rangeCheck: function(list, start, end) {
    if (start < 0 || start > list.length)
      throw H.wrapException(P.RangeError$range(start, 0, list.length));
    if (end < start || end > list.length)
      throw H.wrapException(P.RangeError$range(end, start, list.length));
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount + $length > from.length)
      throw H.wrapException(H.IterableElementError_tooFew());
    H.Lists_copy(from, skipCount, list, start, $length);
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
        if (i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, t2, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (j > left) {
          t2 = j - 1;
          if (t2 < 0 || t2 >= a.length)
            return H.ioore(a, t2);
          t2 = compare.call$2(a[t2], el);
          if (typeof t2 !== "number")
            return t2.$gt();
          t2 = t2 > 0;
        } else
          t2 = false;
        if (!t2)
          break;
        j0 = j - 1;
        if (j0 < 0 || j0 >= a.length)
          return H.ioore(a, j0);
        t1.$indexSet(a, j, a[j0]);
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, t2, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    t2 = a.length;
    if (index2 < 0 || index2 >= t2)
      return H.ioore(a, index2);
    el2 = a[index2];
    if (index3 < 0 || index3 >= t2)
      return H.ioore(a, index3);
    el3 = a[index3];
    if (index4 < 0 || index4 >= t2)
      return H.ioore(a, index4);
    el4 = a[index4];
    if (index5 < 0 || index5 >= t2)
      return H.ioore(a, index5);
    el5 = a[index5];
    t2 = compare.call$2(el1, el2);
    if (typeof t2 !== "number")
      return t2.$gt();
    if (t2 > 0) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    t2 = compare.call$2(el4, el5);
    if (typeof t2 !== "number")
      return t2.$gt();
    if (t2 > 0) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t2 = compare.call$2(el1, el3);
    if (typeof t2 !== "number")
      return t2.$gt();
    if (t2 > 0) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    t2 = compare.call$2(el2, el3);
    if (typeof t2 !== "number")
      return t2.$gt();
    if (t2 > 0) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    t2 = compare.call$2(el1, el4);
    if (typeof t2 !== "number")
      return t2.$gt();
    if (t2 > 0) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    t2 = compare.call$2(el3, el4);
    if (typeof t2 !== "number")
      return t2.$gt();
    if (t2 > 0) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    t2 = compare.call$2(el2, el5);
    if (typeof t2 !== "number")
      return t2.$gt();
    if (t2 > 0) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    t2 = compare.call$2(el2, el3);
    if (typeof t2 !== "number")
      return t2.$gt();
    if (t2 > 0) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    t2 = compare.call$2(el4, el5);
    if (typeof t2 !== "number")
      return t2.$gt();
    if (t2 > 0) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    if (left < 0 || left >= a.length)
      return H.ioore(a, left);
    t1.$indexSet(a, index2, a[left]);
    if (right < 0 || right >= a.length)
      return H.ioore(a, right);
    t1.$indexSet(a, index4, a[right]);
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        if (k >= a.length)
          return H.ioore(a, k);
        ak = a[k];
        comp = compare.call$2(ak, el2);
        if (J.$eq(comp, 0))
          continue;
        if (typeof comp !== "number")
          return comp.$lt();
        if (comp < 0) {
          if (k !== less) {
            if (less >= a.length)
              return H.ioore(a, less);
            t1.$indexSet(a, k, a[less]);
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            if (great < 0 || great >= a.length)
              return H.ioore(a, great);
            comp = compare.call$2(a[great], el2);
            if (typeof comp !== "number")
              return comp.$gt();
            if (comp > 0) {
              --great;
              continue;
            } else {
              t2 = a.length;
              great0 = great - 1;
              if (comp < 0) {
                if (less >= t2)
                  return H.ioore(a, less);
                t1.$indexSet(a, k, a[less]);
                less0 = less + 1;
                if (great >= a.length)
                  return H.ioore(a, great);
                t1.$indexSet(a, less, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                if (great >= t2)
                  return H.ioore(a, great);
                t1.$indexSet(a, k, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        if (k >= a.length)
          return H.ioore(a, k);
        ak = a[k];
        comp_pivot1 = compare.call$2(ak, el2);
        if (typeof comp_pivot1 !== "number")
          return comp_pivot1.$lt();
        if (comp_pivot1 < 0) {
          if (k !== less) {
            if (less >= a.length)
              return H.ioore(a, less);
            t1.$indexSet(a, k, a[less]);
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else {
          comp_pivot2 = compare.call$2(ak, el4);
          if (typeof comp_pivot2 !== "number")
            return comp_pivot2.$gt();
          if (comp_pivot2 > 0)
            for (; true;) {
              if (great < 0 || great >= a.length)
                return H.ioore(a, great);
              comp = compare.call$2(a[great], el4);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                if (great >= a.length)
                  return H.ioore(a, great);
                comp = compare.call$2(a[great], el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                t2 = a.length;
                if (comp < 0) {
                  if (less >= t2)
                    return H.ioore(a, less);
                  t1.$indexSet(a, k, a[less]);
                  less0 = less + 1;
                  if (great >= a.length)
                    return H.ioore(a, great);
                  t1.$indexSet(a, less, a[great]);
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  if (great >= t2)
                    return H.ioore(a, great);
                  t1.$indexSet(a, k, a[great]);
                  t1.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
            }
        }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    if (t2 >= a.length)
      return H.ioore(a, t2);
    t1.$indexSet(a, left, a[t2]);
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    if (t2 < 0 || t2 >= a.length)
      return H.ioore(a, t2);
    t1.$indexSet(a, right, a[t2]);
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      while (true) {
        if (less >= a.length)
          return H.ioore(a, less);
        if (!J.$eq(compare.call$2(a[less], el2), 0))
          break;
        ++less;
      }
      while (true) {
        if (great < 0 || great >= a.length)
          return H.ioore(a, great);
        if (!J.$eq(compare.call$2(a[great], el4), 0))
          break;
        --great;
      }
      for (k = less; k <= great; ++k) {
        if (k >= a.length)
          return H.ioore(a, k);
        ak = a[k];
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            if (less >= a.length)
              return H.ioore(a, less);
            t1.$indexSet(a, k, a[less]);
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;) {
            if (great < 0 || great >= a.length)
              return H.ioore(a, great);
            if (J.$eq(compare.call$2(a[great], el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              if (great >= a.length)
                return H.ioore(a, great);
              comp = compare.call$2(a[great], el2);
              if (typeof comp !== "number")
                return comp.$lt();
              great0 = great - 1;
              t2 = a.length;
              if (comp < 0) {
                if (less >= t2)
                  return H.ioore(a, less);
                t1.$indexSet(a, k, a[less]);
                less0 = less + 1;
                if (great >= a.length)
                  return H.ioore(a, great);
                t1.$indexSet(a, less, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                if (great >= t2)
                  return H.ioore(a, great);
                t1.$indexSet(a, k, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
          }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    }
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,__internal$_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return t1.$gt();
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2, t3;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$ge();
        t3 = t2 >= $length;
      } else
        t3 = true;
      if (t3)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, t1;
      realIndex = this.get$_startIndex() + index;
      if (index >= 0) {
        t1 = this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength) {
      var t1, t2;
      t1 = this.__internal$_start;
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t1 > t2)
          throw H.wrapException(P.RangeError$range(t1, 0, t2));
      }
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength) {
        var t1 = new H.SubListIterable(_iterable, _start, _endOrLength);
        t1.SubListIterable$3(_iterable, _start, _endOrLength);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  FixedLengthListMixin: {
    "^": "Object;"
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  _HashSet__newHashTable: function() {
    var table = Object.create(null);
    table["<non-identifier-key>"] = table;
    delete table["<non-identifier-key>"];
    return table;
  },
  HashSet_HashSet$identity: function() {
    return new P._IdentityHashSet(0, null, null, null, null);
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    if ($.get$_toStringVisiting().contains$1(0, iterable))
      return "(...)";
    $.get$_toStringVisiting().add$1(0, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      $.get$_toStringVisiting().remove$1(0, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  _HashSet: {
    "^": "_HashSetBase;",
    get$iterator: function(_) {
      return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    add$1: function(_, element) {
      return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    remove$1: function(_, object) {
      return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --this._collection$_length;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    }
  },
  _IdentityHashSet: {
    "^": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (bucket[i] === element)
          return i;
      return -1;
    }
  },
  HashSetIterator: {
    "^": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _HashSetBase: {
    "^": "IterableBase;",
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    }
  },
  IterableBase: {
    "^": "Object;",
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element;
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        if (remaining === 0)
          return element;
        --remaining;
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    }
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    toString$0: function(receiver) {
      var result;
      if ($.get$_toStringVisiting().contains$1(0, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        $.get$_toStringVisiting().add$1(0, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        $.get$_toStringVisiting().remove$1(0, receiver);
      }
      return result.get$_contents();
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    addFirst$1: function(element) {
      var t1, t2, t3;
      t1 = this._head;
      t2 = this._table;
      t3 = t2.length;
      t1 = (t1 - 1 & t3 - 1) >>> 0;
      this._head = t1;
      if (t1 < 0 || t1 >= t3)
        return H.ioore(t2, t1);
      t2[t1] = element;
      if (t1 === this._tail)
        this._grow$0();
      ++this._modificationCount;
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _grow$0: function() {
      var t1, t2, newTable, t3, split;
      t1 = this._table;
      t2 = t1.length;
      newTable = Array(t2 * 2);
      newTable.fixed$length = init;
      t3 = this._head;
      split = t2 - t3;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t3);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = t1;
    },
    static: {"^": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 0],
  Error_safeToString: function(object) {
    return H.Primitives_objectToString(object);
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  List_List$from: function(other, growable) {
    var list, t1;
    list = [];
    for (t1 = other.get$iterator(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  List_List$generate: function($length, generator, growable) {
    var result, i, t1;
    if (growable) {
      result = [];
      C.JSArray_methods.set$length(result, $length);
    } else {
      result = Array($length);
      result.fixed$length = init;
    }
    for (i = 0; i < $length; ++i) {
      t1 = generator.call$1(i);
      if (i >= result.length)
        return H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  bool: {
    "^": "Object;",
    toString$0: function(_) {
      return this ? "true" : "false";
    }
  },
  "+bool": 0,
  $double: {
    "^": "num;",
    $is$double: true
  },
  "+double": 0,
  Error: {
    "^": "Object;"
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + value + " not in range " + start + ".." + H.S(end));
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      return "Concurrent modification during iteration: " + P.Error_safeToString(this.modifiedObject) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  },
  $int: {
    "^": "num;",
    $is$int: true
  },
  "+int": 0,
  List: {
    "^": "Object;"
  },
  "+List": 0,
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isnum: true
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  Stopwatch: {
    "^": "Object;frequency,_start,_stop",
    start$0: function() {
      var t1, t2, t3;
      t1 = this._start == null;
      if (!t1 && this._stop == null)
        return;
      if (t1)
        this._start = H.Primitives_numMicroseconds();
      else {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._stop;
        t3 = this._start;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._start = t1 - (t2 - t3);
        this._stop = null;
      }
    },
    stop$0: function() {
      if (!(this._start != null && this._stop == null))
        return;
      this._stop = H.Primitives_numMicroseconds();
    },
    get$elapsedTicks: function() {
      var t1, t2;
      t1 = this._start;
      if (t1 == null)
        return 0;
      t2 = this._stop;
      if (t2 == null) {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._start;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 - t2;
        t1 = t2;
      } else {
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = t2 - t1;
      }
      return t1;
    }
  },
  String: {
    "^": "Object;",
    $isString: true
  },
  "+String": 0,
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  min: function(a, b) {
    var t1;
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0)
        t1 = b === 0 ? 1 / b < 0 : b < 0;
      else
        t1 = false;
      if (t1 || isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    var t1;
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (isNaN(b))
        return b;
      return a;
    }
    if (b === 0)
      t1 = a === 0 ? 1 / a < 0 : a < 0;
    else
      t1 = false;
    if (t1)
      return b;
    return a;
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      if (index < 0 || index >= $length)
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + index));
    },
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": "Float32Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;"
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;"
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
  "^": "",
  Matrix2: {
    "^": "Object;storage<",
    setValues$4: function(arg0, arg1, arg2, arg3) {
      var t1 = this.storage;
      t1[3] = arg3;
      t1[2] = arg2;
      t1[1] = arg1;
      t1[0] = arg0;
      return this;
    },
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.get$storage();
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t1[3] = t2[3];
      t2 = arg.get$storage();
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      t2 = arg.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = arg.get$storage();
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n";
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(2);
      t2 = this.storage;
      if (row >= 4)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 2 + row;
      if (t3 >= 4)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      return new T.Vector2(t1);
    },
    $add: function(_, arg) {
      var t1, t2;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t1[0] = C.JSNumber_methods.$add(t2[0], arg.get$storage().$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t2[1], arg.get$storage().$index(0, 1));
      t1[2] = C.JSNumber_methods.$add(t2[2], arg.get$storage().$index(0, 2));
      t1[3] = C.JSNumber_methods.$add(t2[3], arg.get$storage().$index(0, 3));
      return new T.Matrix2(t1);
    },
    transposed$0: function() {
      var t1, t2;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t1[0] = t2[0];
      t1[1] = t2[2];
      t1[2] = t2[1];
      t1[3] = t2[3];
      return new T.Matrix2(t1);
    },
    invert$0: function() {
      var t1, t2, t3, t4, t5, det, invDet;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[3];
      t4 = t1[1];
      t5 = t1[2];
      det = t2 * t3 - t4 * t5;
      if (det === 0)
        return 0;
      invDet = 1 / det;
      t1[0] = t3 * invDet;
      t1[1] = -t4 * invDet;
      t1[2] = -t5 * invDet;
      t1[3] = t2 * invDet;
      return det;
    },
    setRotation$1: function(radians) {
      var c, s, t1;
      c = Math.cos(radians);
      s = Math.sin(radians);
      t1 = this.storage;
      t1[0] = c;
      t1[1] = s;
      t1[2] = -s;
      t1[3] = c;
    },
    transformed$2: function(arg, out) {
      var t1, t2, t3, t4, t5, t6, t7;
      out.setFrom$1(arg);
      t1 = this.storage;
      t2 = t1[0];
      t3 = out.storage;
      t4 = t3[0];
      t5 = t1[2];
      t6 = t3[1];
      t7 = t1[1];
      t1 = t1[3];
      t3[0] = t2 * t4 + t5 * t6;
      t3[1] = t7 * t4 + t1 * t6;
      return out;
    }
  },
  Vector2: {
    "^": "Object;storage<",
    setValues$2: function(x_, y_) {
      var t1 = this.storage;
      t1[0] = x_;
      t1[1] = y_;
      return this;
    },
    setZero$0: function() {
      var t1 = this.storage;
      t1[0] = 0;
      t1[1] = 0;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = other.get$storage();
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
    },
    $sub: function(_, other) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = C.JSNumber_methods.$sub(t1[0], other.get$storage().$index(0, 0));
      t1 = C.JSNumber_methods.$sub(t1[1], other.get$storage().$index(0, 1));
      t3 = new Float32Array(2);
      t3[0] = t2;
      t3[1] = t1;
      return new T.Vector2(t3);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage()[0];
      t1 = t1[1];
      t4 = other.storage[1];
      t5 = new Float32Array(2);
      t5[0] = t2 + t3;
      t5[1] = t1 + t4;
      return new T.Vector2(t5);
    },
    $mul: function(_, scale) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(2);
      t3[0] = t2 * scale;
      t3[1] = t1 * scale;
      return new T.Vector2(t3);
    },
    get$length: function(_) {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return Math.sqrt(t2 * t2 + t1 * t1);
    },
    get$length2: function() {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return t2 * t2 + t1 * t1;
    },
    normalize$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return this;
    },
    normalizeLength$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return 0;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return l;
    },
    dot$1: function(other) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.storage;
      return t2 * t3[0] + t1[1] * t3[1];
    },
    cross$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.storage;
      return t1[0] * t2[1] - t1[1] * t2[0];
    },
    add$1: function(_, arg) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t1[0] = t2 + t3[0];
      t3 = t1[1];
      t2 = arg.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t3 + t2[1];
      return this;
    },
    sub$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      return this;
    },
    scale$1: function(arg) {
      var t1 = this.storage;
      t1[1] = t1[1] * arg;
      t1[0] = t1[0] * arg;
      return this;
    },
    negate$0: function() {
      var t1 = this.storage;
      t1[1] = -t1[1];
      t1[0] = -t1[0];
      return this;
    },
    set$x: function(arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(arg) {
      this.storage[1] = arg;
      return arg;
    },
    get$x: function() {
      return this.storage[0];
    },
    get$y: function() {
      return this.storage[1];
    }
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
$.libraries_to_load = {};
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$.printToZone = null;
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity();
});
// Native classes

init.functionAliases = {};
;
init.metadata = [{func: "int__Comparable_Comparable", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "void__Fixture_Fixture", void: true, args: [V.Fixture, V.Fixture]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(X.main, []);
  } else {
    X.main([]);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              if ($[fieldName] === sentinelInProgress)
                $[fieldName] = null;
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    return Isolate;
  };
}
})()
{
  var message = 
      'Deprecation: Automatic generation of output for Content Security\n' +
      'Policy is deprecated and will be removed with the next development\n' +
      'release. Use the --csp option to generate CSP restricted output.';
  if (typeof dartPrint == "function") {
    dartPrint(message);
  } else if (typeof console == "object" && typeof console.log == "function") {
    console.log(message);
  } else if (typeof print == "function") {
    print(message);
  }
}
function dart_precompiled($collectedClasses) {
  var $desc;
  function NativeTypedData() {
  }
  NativeTypedData.builtin$cls = "NativeTypedData";
  if (!"name" in NativeTypedData)
    NativeTypedData.name = "NativeTypedData";
  $desc = $collectedClasses.NativeTypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedData.prototype = $desc;
  function NativeFloat32List() {
  }
  NativeFloat32List.builtin$cls = "NativeFloat32List";
  if (!"name" in NativeFloat32List)
    NativeFloat32List.name = "NativeFloat32List";
  $desc = $collectedClasses.NativeFloat32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeFloat32List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "JSBool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "JSArray";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "JSNumber";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "JSInt";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "JSDouble";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "JSString";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, cachedSortedIndices) {
    this.jsFunction = jsFunction;
    this.data = data;
    this.isAccessor = isAccessor;
    this.requiredParameterCount = requiredParameterCount;
    this.optionalParameterCount = optionalParameterCount;
    this.areOptionalParametersNamed = areOptionalParametersNamed;
    this.functionType = functionType;
    this.cachedSortedIndices = cachedSortedIndices;
  }
  ReflectionInfo.builtin$cls = "ReflectionInfo";
  if (!"name" in ReflectionInfo)
    ReflectionInfo.name = "ReflectionInfo";
  $desc = $collectedClasses.ReflectionInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function TearOffClosure() {
  }
  TearOffClosure.builtin$cls = "TearOffClosure";
  if (!"name" in TearOffClosure)
    TearOffClosure.name = "TearOffClosure";
  $desc = $collectedClasses.TearOffClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TearOffClosure.prototype = $desc;
  function BoundClosure(_self, _target, _receiver, _name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this._name = _name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function RuntimeError(message) {
    this.message = message;
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeError.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function Bench2d(world) {
    this.world = world;
  }
  Bench2d.builtin$cls = "Bench2d";
  if (!"name" in Bench2d)
    Bench2d.name = "Bench2d";
  $desc = $collectedClasses.Bench2d;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Bench2d.prototype = $desc;
  function ContactFilter() {
  }
  ContactFilter.builtin$cls = "ContactFilter";
  if (!"name" in ContactFilter)
    ContactFilter.name = "ContactFilter";
  $desc = $collectedClasses.ContactFilter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactFilter.prototype = $desc;
  function ContactImpulse(normalImpulses, tangentImpulses) {
    this.normalImpulses = normalImpulses;
    this.tangentImpulses = tangentImpulses;
  }
  ContactImpulse.builtin$cls = "ContactImpulse";
  if (!"name" in ContactImpulse)
    ContactImpulse.name = "ContactImpulse";
  $desc = $collectedClasses.ContactImpulse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactImpulse.prototype = $desc;
  function AxisAlignedBox(lowerBound, upperBound) {
    this.lowerBound = lowerBound;
    this.upperBound = upperBound;
  }
  AxisAlignedBox.builtin$cls = "AxisAlignedBox";
  if (!"name" in AxisAlignedBox)
    AxisAlignedBox.name = "AxisAlignedBox";
  $desc = $collectedClasses.AxisAlignedBox;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AxisAlignedBox.prototype = $desc;
  AxisAlignedBox.prototype.get$lowerBound = function() {
    return this.lowerBound;
  };
  function BroadPhase(_tree, proxyCount, moveBuffer, _pairBuffer, _pairCapacity, _pairCount, queryProxy) {
    this._tree = _tree;
    this.proxyCount = proxyCount;
    this.moveBuffer = moveBuffer;
    this._pairBuffer = _pairBuffer;
    this._pairCapacity = _pairCapacity;
    this._pairCount = _pairCount;
    this.queryProxy = queryProxy;
  }
  BroadPhase.builtin$cls = "BroadPhase";
  if (!"name" in BroadPhase)
    BroadPhase.name = "BroadPhase";
  $desc = $collectedClasses.BroadPhase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BroadPhase.prototype = $desc;
  function BroadPhase_updatePairs_closure() {
  }
  BroadPhase_updatePairs_closure.builtin$cls = "BroadPhase_updatePairs_closure";
  if (!"name" in BroadPhase_updatePairs_closure)
    BroadPhase_updatePairs_closure.name = "BroadPhase_updatePairs_closure";
  $desc = $collectedClasses.BroadPhase_updatePairs_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BroadPhase_updatePairs_closure.prototype = $desc;
  function DynamicTree(_root, _nodeCount, _lastLeaf, _insertionCount, _path, _nodeStack, _drawVectors, _nodeCounter, _tempVector, _tempBox, center, deltaOne, deltaTwo) {
    this._root = _root;
    this._nodeCount = _nodeCount;
    this._lastLeaf = _lastLeaf;
    this._insertionCount = _insertionCount;
    this._path = _path;
    this._nodeStack = _nodeStack;
    this._drawVectors = _drawVectors;
    this._nodeCounter = _nodeCounter;
    this._tempVector = _tempVector;
    this._tempBox = _tempBox;
    this.center = center;
    this.deltaOne = deltaOne;
    this.deltaTwo = deltaTwo;
  }
  DynamicTree.builtin$cls = "DynamicTree";
  if (!"name" in DynamicTree)
    DynamicTree.name = "DynamicTree";
  $desc = $collectedClasses.DynamicTree;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicTree.prototype = $desc;
  function DynamicTreeNode(box, parent, next, childOne, childTwo, userData, key) {
    this.box = box;
    this.parent = parent;
    this.next = next;
    this.childOne = childOne;
    this.childTwo = childTwo;
    this.userData = userData;
    this.key = key;
  }
  DynamicTreeNode.builtin$cls = "DynamicTreeNode";
  if (!"name" in DynamicTreeNode)
    DynamicTreeNode.name = "DynamicTreeNode";
  $desc = $collectedClasses.DynamicTreeNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicTreeNode.prototype = $desc;
  DynamicTreeNode.prototype.set$parent = function(v) {
    return this.parent = v;
  };
  DynamicTreeNode.prototype.get$userData = function() {
    return this.userData;
  };
  DynamicTreeNode.prototype.get$key = function() {
    return this.key;
  };
  function Pair(proxyA, proxyB) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
  }
  Pair.builtin$cls = "Pair";
  if (!"name" in Pair)
    Pair.name = "Pair";
  $desc = $collectedClasses.Pair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Pair.prototype = $desc;
  Pair.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  Pair.prototype.set$proxyA = function(v) {
    return this.proxyA = v;
  };
  Pair.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  Pair.prototype.set$proxyB = function(v) {
    return this.proxyB = v;
  };
  function Collision(_pool, cache, input, output, results1, results2, incidentEdge, localTangent, localNormal, planePoint, tangent, normal, normal1, v11, v12, clipPoints1, clipPoints2) {
    this._pool = _pool;
    this.cache = cache;
    this.input = input;
    this.output = output;
    this.results1 = results1;
    this.results2 = results2;
    this.incidentEdge = incidentEdge;
    this.localTangent = localTangent;
    this.localNormal = localNormal;
    this.planePoint = planePoint;
    this.tangent = tangent;
    this.normal = normal;
    this.normal1 = normal1;
    this.v11 = v11;
    this.v12 = v12;
    this.clipPoints1 = clipPoints1;
    this.clipPoints2 = clipPoints2;
  }
  Collision.builtin$cls = "Collision";
  if (!"name" in Collision)
    Collision.name = "Collision";
  $desc = $collectedClasses.Collision;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Collision.prototype = $desc;
  function ClipVertex(v, id) {
    this.v = v;
    this.id = id;
  }
  ClipVertex.builtin$cls = "ClipVertex";
  if (!"name" in ClipVertex)
    ClipVertex.name = "ClipVertex";
  $desc = $collectedClasses.ClipVertex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipVertex.prototype = $desc;
  ClipVertex.prototype.get$v = function() {
    return this.v;
  };
  function EdgeResults(separation, edgeIndex) {
    this.separation = separation;
    this.edgeIndex = edgeIndex;
  }
  EdgeResults.builtin$cls = "EdgeResults";
  if (!"name" in EdgeResults)
    EdgeResults.name = "EdgeResults";
  $desc = $collectedClasses.EdgeResults;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EdgeResults.prototype = $desc;
  function ContactID(features) {
    this.features = features;
  }
  ContactID.builtin$cls = "ContactID";
  if (!"name" in ContactID)
    ContactID.name = "ContactID";
  $desc = $collectedClasses.ContactID;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactID.prototype = $desc;
  ContactID.prototype.get$features = function() {
    return this.features;
  };
  function Distance(calls, iters, maxIters, simplex, saveA, saveB, closestPoint, searchDirection, temp, normal) {
    this.calls = calls;
    this.iters = iters;
    this.maxIters = maxIters;
    this.simplex = simplex;
    this.saveA = saveA;
    this.saveB = saveB;
    this.closestPoint = closestPoint;
    this.searchDirection = searchDirection;
    this.temp = temp;
    this.normal = normal;
  }
  Distance.builtin$cls = "Distance";
  if (!"name" in Distance)
    Distance.name = "Distance";
  $desc = $collectedClasses.Distance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Distance.prototype = $desc;
  function DistanceInput(proxyA, proxyB, transformA, transformB, useRadii) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
    this.transformA = transformA;
    this.transformB = transformB;
    this.useRadii = useRadii;
  }
  DistanceInput.builtin$cls = "DistanceInput";
  if (!"name" in DistanceInput)
    DistanceInput.name = "DistanceInput";
  $desc = $collectedClasses.DistanceInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceInput.prototype = $desc;
  DistanceInput.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  DistanceInput.prototype.set$proxyA = function(v) {
    return this.proxyA = v;
  };
  DistanceInput.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  DistanceInput.prototype.set$proxyB = function(v) {
    return this.proxyB = v;
  };
  function DistanceOutput(pointA, pointB, distance, iterations) {
    this.pointA = pointA;
    this.pointB = pointB;
    this.distance = distance;
    this.iterations = iterations;
  }
  DistanceOutput.builtin$cls = "DistanceOutput";
  if (!"name" in DistanceOutput)
    DistanceOutput.name = "DistanceOutput";
  $desc = $collectedClasses.DistanceOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceOutput.prototype = $desc;
  function DistanceProxy(vertices, count, radius) {
    this.vertices = vertices;
    this.count = count;
    this.radius = radius;
  }
  DistanceProxy.builtin$cls = "DistanceProxy";
  if (!"name" in DistanceProxy)
    DistanceProxy.name = "DistanceProxy";
  $desc = $collectedClasses.DistanceProxy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceProxy.prototype = $desc;
  DistanceProxy.prototype.get$vertices = function() {
    return this.vertices;
  };
  DistanceProxy.prototype.get$radius = function() {
    return this.radius;
  };
  function Features(referenceEdge, incidentEdge, incidentVertex, flip) {
    this.referenceEdge = referenceEdge;
    this.incidentEdge = incidentEdge;
    this.incidentVertex = incidentVertex;
    this.flip = flip;
  }
  Features.builtin$cls = "Features";
  if (!"name" in Features)
    Features.name = "Features";
  $desc = $collectedClasses.Features;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Features.prototype = $desc;
  Features.prototype.get$referenceEdge = function() {
    return this.referenceEdge;
  };
  function Manifold(points, localNormal, localPoint, type, pointCount) {
    this.points = points;
    this.localNormal = localNormal;
    this.localPoint = localPoint;
    this.type = type;
    this.pointCount = pointCount;
  }
  Manifold.builtin$cls = "Manifold";
  if (!"name" in Manifold)
    Manifold.name = "Manifold";
  $desc = $collectedClasses.Manifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Manifold.prototype = $desc;
  Manifold.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  Manifold.prototype.get$pointCount = function() {
    return this.pointCount;
  };
  function ManifoldPoint(localPoint, normalImpulse, tangentImpulse, id) {
    this.localPoint = localPoint;
    this.normalImpulse = normalImpulse;
    this.tangentImpulse = tangentImpulse;
    this.id = id;
  }
  ManifoldPoint.builtin$cls = "ManifoldPoint";
  if (!"name" in ManifoldPoint)
    ManifoldPoint.name = "ManifoldPoint";
  $desc = $collectedClasses.ManifoldPoint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ManifoldPoint.prototype = $desc;
  ManifoldPoint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  ManifoldPoint.prototype.get$normalImpulse = function() {
    return this.normalImpulse;
  };
  ManifoldPoint.prototype.set$normalImpulse = function(v) {
    return this.normalImpulse = v;
  };
  ManifoldPoint.prototype.get$tangentImpulse = function() {
    return this.tangentImpulse;
  };
  ManifoldPoint.prototype.set$tangentImpulse = function(v) {
    return this.tangentImpulse = v;
  };
  function MassData(mass, center, inertia) {
    this.mass = mass;
    this.center = center;
    this.inertia = inertia;
  }
  MassData.builtin$cls = "MassData";
  if (!"name" in MassData)
    MassData.name = "MassData";
  $desc = $collectedClasses.MassData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MassData.prototype = $desc;
  function PolygonShape(centroid, vertices, normals, vertexCount, type, radius) {
    this.centroid = centroid;
    this.vertices = vertices;
    this.normals = normals;
    this.vertexCount = vertexCount;
    this.type = type;
    this.radius = radius;
  }
  PolygonShape.builtin$cls = "PolygonShape";
  if (!"name" in PolygonShape)
    PolygonShape.name = "PolygonShape";
  $desc = $collectedClasses.PolygonShape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonShape.prototype = $desc;
  function Shape() {
  }
  Shape.builtin$cls = "Shape";
  if (!"name" in Shape)
    Shape.name = "Shape";
  $desc = $collectedClasses.Shape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Shape.prototype = $desc;
  function Simplex(v1, v2, v3, vertices, count, e13, e23, e12, case2, case22, case3, case33) {
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
    this.vertices = vertices;
    this.count = count;
    this.e13 = e13;
    this.e23 = e23;
    this.e12 = e12;
    this.case2 = case2;
    this.case22 = case22;
    this.case3 = case3;
    this.case33 = case33;
  }
  Simplex.builtin$cls = "Simplex";
  if (!"name" in Simplex)
    Simplex.name = "Simplex";
  $desc = $collectedClasses.Simplex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Simplex.prototype = $desc;
  function SimplexCache(metric, count, indexA, indexB) {
    this.metric = metric;
    this.count = count;
    this.indexA = indexA;
    this.indexB = indexB;
  }
  SimplexCache.builtin$cls = "SimplexCache";
  if (!"name" in SimplexCache)
    SimplexCache.name = "SimplexCache";
  $desc = $collectedClasses.SimplexCache;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexCache.prototype = $desc;
  function SimplexCache_closure() {
  }
  SimplexCache_closure.builtin$cls = "SimplexCache_closure";
  if (!"name" in SimplexCache_closure)
    SimplexCache_closure.name = "SimplexCache_closure";
  $desc = $collectedClasses.SimplexCache_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexCache_closure.prototype = $desc;
  function SimplexCache_closure0() {
  }
  SimplexCache_closure0.builtin$cls = "SimplexCache_closure0";
  if (!"name" in SimplexCache_closure0)
    SimplexCache_closure0.name = "SimplexCache_closure0";
  $desc = $collectedClasses.SimplexCache_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexCache_closure0.prototype = $desc;
  function SimplexVertex(wA, wB, w, a, indexA, indexB) {
    this.wA = wA;
    this.wB = wB;
    this.w = w;
    this.a = a;
    this.indexA = indexA;
    this.indexB = indexB;
  }
  SimplexVertex.builtin$cls = "SimplexVertex";
  if (!"name" in SimplexVertex)
    SimplexVertex.name = "SimplexVertex";
  $desc = $collectedClasses.SimplexVertex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexVertex.prototype = $desc;
  SimplexVertex.prototype.get$wA = function() {
    return this.wA;
  };
  function TimeOfImpact(cache, distanceInput, xfA, xfB, distanceOutput, fcn, indexes, sweepA, sweepB, pool) {
    this.cache = cache;
    this.distanceInput = distanceInput;
    this.xfA = xfA;
    this.xfB = xfB;
    this.distanceOutput = distanceOutput;
    this.fcn = fcn;
    this.indexes = indexes;
    this.sweepA = sweepA;
    this.sweepB = sweepB;
    this.pool = pool;
  }
  TimeOfImpact.builtin$cls = "TimeOfImpact";
  if (!"name" in TimeOfImpact)
    TimeOfImpact.name = "TimeOfImpact";
  $desc = $collectedClasses.TimeOfImpact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpact.prototype = $desc;
  function SeparationFunction(proxyA, proxyB, type, localPoint, axis, sweepA, sweepB, localPointA, localPointB, pointA, pointB, localPointA1, localPointA2, normal, localPointB1, localPointB2, axisA, axisB, temp, xfa, xfb) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
    this.type = type;
    this.localPoint = localPoint;
    this.axis = axis;
    this.sweepA = sweepA;
    this.sweepB = sweepB;
    this.localPointA = localPointA;
    this.localPointB = localPointB;
    this.pointA = pointA;
    this.pointB = pointB;
    this.localPointA1 = localPointA1;
    this.localPointA2 = localPointA2;
    this.normal = normal;
    this.localPointB1 = localPointB1;
    this.localPointB2 = localPointB2;
    this.axisA = axisA;
    this.axisB = axisB;
    this.temp = temp;
    this.xfa = xfa;
    this.xfb = xfb;
  }
  SeparationFunction.builtin$cls = "SeparationFunction";
  if (!"name" in SeparationFunction)
    SeparationFunction.name = "SeparationFunction";
  $desc = $collectedClasses.SeparationFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SeparationFunction.prototype = $desc;
  SeparationFunction.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  SeparationFunction.prototype.set$proxyA = function(v) {
    return this.proxyA = v;
  };
  SeparationFunction.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  SeparationFunction.prototype.set$proxyB = function(v) {
    return this.proxyB = v;
  };
  SeparationFunction.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  function TimeOfImpactInput(proxyA, proxyB, sweepA, sweepB, tMax) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
    this.sweepA = sweepA;
    this.sweepB = sweepB;
    this.tMax = tMax;
  }
  TimeOfImpactInput.builtin$cls = "TimeOfImpactInput";
  if (!"name" in TimeOfImpactInput)
    TimeOfImpactInput.name = "TimeOfImpactInput";
  $desc = $collectedClasses.TimeOfImpactInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactInput.prototype = $desc;
  TimeOfImpactInput.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  TimeOfImpactInput.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  function TimeOfImpactOutput(state, t) {
    this.state = state;
    this.t = t;
  }
  TimeOfImpactOutput.builtin$cls = "TimeOfImpactOutput";
  if (!"name" in TimeOfImpactOutput)
    TimeOfImpactOutput.name = "TimeOfImpactOutput";
  $desc = $collectedClasses.TimeOfImpactOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactOutput.prototype = $desc;
  function WorldManifold(normal, points, pool3, pool4) {
    this.normal = normal;
    this.points = points;
    this.pool3 = pool3;
    this.pool4 = pool4;
  }
  WorldManifold.builtin$cls = "WorldManifold";
  if (!"name" in WorldManifold)
    WorldManifold.name = "WorldManifold";
  $desc = $collectedClasses.WorldManifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldManifold.prototype = $desc;
  function WorldManifold_closure() {
  }
  WorldManifold_closure.builtin$cls = "WorldManifold_closure";
  if (!"name" in WorldManifold_closure)
    WorldManifold_closure.name = "WorldManifold_closure";
  $desc = $collectedClasses.WorldManifold_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldManifold_closure.prototype = $desc;
  function Sweep(localCenter, centerZero, center, angleZero, angle) {
    this.localCenter = localCenter;
    this.centerZero = centerZero;
    this.center = center;
    this.angleZero = angleZero;
    this.angle = angle;
  }
  Sweep.builtin$cls = "Sweep";
  if (!"name" in Sweep)
    Sweep.name = "Sweep";
  $desc = $collectedClasses.Sweep;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Sweep.prototype = $desc;
  Sweep.prototype.get$localCenter = function() {
    return this.localCenter;
  };
  Sweep.prototype.get$centerZero = function() {
    return this.centerZero;
  };
  function Transform(position, rotation) {
    this.position = position;
    this.rotation = rotation;
  }
  Transform.builtin$cls = "Transform";
  if (!"name" in Transform)
    Transform.name = "Transform";
  $desc = $collectedClasses.Transform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Transform.prototype = $desc;
  Transform.prototype.get$position = function() {
    return this.position;
  };
  Transform.prototype.get$rotation = function() {
    return this.rotation;
  };
  function Body(world, flags, contactList, sleepTime, userData, _linearVelocity, _angularVelocity, mass, invMass, next, prev, fixtureList, fixtureCount, jointList, _force, _torque, _inertia, invInertia, linearDamping, angularDamping, _type, islandIndex, originTransform, sweep, _fixDef, _pmd, _pxf, oldCenter, tempCenter) {
    this.world = world;
    this.flags = flags;
    this.contactList = contactList;
    this.sleepTime = sleepTime;
    this.userData = userData;
    this._linearVelocity = _linearVelocity;
    this._angularVelocity = _angularVelocity;
    this.mass = mass;
    this.invMass = invMass;
    this.next = next;
    this.prev = prev;
    this.fixtureList = fixtureList;
    this.fixtureCount = fixtureCount;
    this.jointList = jointList;
    this._force = _force;
    this._torque = _torque;
    this._inertia = _inertia;
    this.invInertia = invInertia;
    this.linearDamping = linearDamping;
    this.angularDamping = angularDamping;
    this._type = _type;
    this.islandIndex = islandIndex;
    this.originTransform = originTransform;
    this.sweep = sweep;
    this._fixDef = _fixDef;
    this._pmd = _pmd;
    this._pxf = _pxf;
    this.oldCenter = oldCenter;
    this.tempCenter = tempCenter;
  }
  Body.builtin$cls = "Body";
  if (!"name" in Body)
    Body.name = "Body";
  $desc = $collectedClasses.Body;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Body.prototype = $desc;
  function BodyDef(type, angle, userData, position, linearVelocity, angularVelocity, fixedRotation, isSleeping, bullet, allowSleep, linearDamping, angularDamping, awake, active) {
    this.type = type;
    this.angle = angle;
    this.userData = userData;
    this.position = position;
    this.linearVelocity = linearVelocity;
    this.angularVelocity = angularVelocity;
    this.fixedRotation = fixedRotation;
    this.isSleeping = isSleeping;
    this.bullet = bullet;
    this.allowSleep = allowSleep;
    this.linearDamping = linearDamping;
    this.angularDamping = angularDamping;
    this.awake = awake;
    this.active = active;
  }
  BodyDef.builtin$cls = "BodyDef";
  if (!"name" in BodyDef)
    BodyDef.name = "BodyDef";
  $desc = $collectedClasses.BodyDef;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyDef.prototype = $desc;
  BodyDef.prototype.get$position = function() {
    return this.position;
  };
  function ContactManager(broadPhase, contactList, contactCount, contactFilter, contactListener, pool) {
    this.broadPhase = broadPhase;
    this.contactList = contactList;
    this.contactCount = contactCount;
    this.contactFilter = contactFilter;
    this.contactListener = contactListener;
    this.pool = pool;
  }
  ContactManager.builtin$cls = "ContactManager";
  if (!"name" in ContactManager)
    ContactManager.name = "ContactManager";
  $desc = $collectedClasses.ContactManager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactManager.prototype = $desc;
  function CircleContact(flags, prev, next, edge1, edge2, fixtureA, fixtureB, manifold, toiCount, pool, _oldManifold) {
    this.flags = flags;
    this.prev = prev;
    this.next = next;
    this.edge1 = edge1;
    this.edge2 = edge2;
    this.fixtureA = fixtureA;
    this.fixtureB = fixtureB;
    this.manifold = manifold;
    this.toiCount = toiCount;
    this.pool = pool;
    this._oldManifold = _oldManifold;
  }
  CircleContact.builtin$cls = "CircleContact";
  if (!"name" in CircleContact)
    CircleContact.name = "CircleContact";
  $desc = $collectedClasses.CircleContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleContact.prototype = $desc;
  function Contact(manifold) {
    this.manifold = manifold;
  }
  Contact.builtin$cls = "Contact";
  if (!"name" in Contact)
    Contact.name = "Contact";
  $desc = $collectedClasses.Contact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Contact.prototype = $desc;
  Contact.prototype.get$manifold = function() {
    return this.manifold;
  };
  function ContactConstraint(points, localNormal, localPoint, normal, normalMass, K, bodyA, bodyB, type, radius, friction, restitution, pointCount, manifold) {
    this.points = points;
    this.localNormal = localNormal;
    this.localPoint = localPoint;
    this.normal = normal;
    this.normalMass = normalMass;
    this.K = K;
    this.bodyA = bodyA;
    this.bodyB = bodyB;
    this.type = type;
    this.radius = radius;
    this.friction = friction;
    this.restitution = restitution;
    this.pointCount = pointCount;
    this.manifold = manifold;
  }
  ContactConstraint.builtin$cls = "ContactConstraint";
  if (!"name" in ContactConstraint)
    ContactConstraint.name = "ContactConstraint";
  $desc = $collectedClasses.ContactConstraint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactConstraint.prototype = $desc;
  ContactConstraint.prototype.get$points = function() {
    return this.points;
  };
  ContactConstraint.prototype.get$localNormal = function() {
    return this.localNormal;
  };
  ContactConstraint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  ContactConstraint.prototype.get$normal = function() {
    return this.normal;
  };
  ContactConstraint.prototype.get$bodyA = function() {
    return this.bodyA;
  };
  ContactConstraint.prototype.set$bodyA = function(v) {
    return this.bodyA = v;
  };
  ContactConstraint.prototype.get$bodyB = function() {
    return this.bodyB;
  };
  ContactConstraint.prototype.set$bodyB = function(v) {
    return this.bodyB = v;
  };
  ContactConstraint.prototype.get$type = function() {
    return this.type;
  };
  ContactConstraint.prototype.set$type = function(v) {
    return this.type = v;
  };
  ContactConstraint.prototype.set$radius = function(v) {
    return this.radius = v;
  };
  ContactConstraint.prototype.get$pointCount = function() {
    return this.pointCount;
  };
  ContactConstraint.prototype.set$pointCount = function(v) {
    return this.pointCount = v;
  };
  ContactConstraint.prototype.get$manifold = function() {
    return this.manifold;
  };
  ContactConstraint.prototype.set$manifold = function(v) {
    return this.manifold = v;
  };
  function ContactConstraint_closure() {
  }
  ContactConstraint_closure.builtin$cls = "ContactConstraint_closure";
  if (!"name" in ContactConstraint_closure)
    ContactConstraint_closure.name = "ContactConstraint_closure";
  $desc = $collectedClasses.ContactConstraint_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactConstraint_closure.prototype = $desc;
  function ContactConstraintPoint(localPoint, rA, rB, normalImpulse, tangentImpulse, normalMass, tangentMass, velocityBias) {
    this.localPoint = localPoint;
    this.rA = rA;
    this.rB = rB;
    this.normalImpulse = normalImpulse;
    this.tangentImpulse = tangentImpulse;
    this.normalMass = normalMass;
    this.tangentMass = tangentMass;
    this.velocityBias = velocityBias;
  }
  ContactConstraintPoint.builtin$cls = "ContactConstraintPoint";
  if (!"name" in ContactConstraintPoint)
    ContactConstraintPoint.name = "ContactConstraintPoint";
  $desc = $collectedClasses.ContactConstraintPoint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactConstraintPoint.prototype = $desc;
  ContactConstraintPoint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  ContactConstraintPoint.prototype.get$rA = function() {
    return this.rA;
  };
  ContactConstraintPoint.prototype.get$rB = function() {
    return this.rB;
  };
  ContactConstraintPoint.prototype.get$normalImpulse = function() {
    return this.normalImpulse;
  };
  ContactConstraintPoint.prototype.set$normalImpulse = function(v) {
    return this.normalImpulse = v;
  };
  ContactConstraintPoint.prototype.get$tangentImpulse = function() {
    return this.tangentImpulse;
  };
  ContactConstraintPoint.prototype.set$tangentImpulse = function(v) {
    return this.tangentImpulse = v;
  };
  ContactConstraintPoint.prototype.get$normalMass = function() {
    return this.normalMass;
  };
  ContactConstraintPoint.prototype.get$tangentMass = function() {
    return this.tangentMass;
  };
  function ContactEdge(other, contact, prev, next) {
    this.other = other;
    this.contact = contact;
    this.prev = prev;
    this.next = next;
  }
  ContactEdge.builtin$cls = "ContactEdge";
  if (!"name" in ContactEdge)
    ContactEdge.name = "ContactEdge";
  $desc = $collectedClasses.ContactEdge;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactEdge.prototype = $desc;
  function ContactRegister(creator, primary) {
    this.creator = creator;
    this.primary = primary;
  }
  ContactRegister.builtin$cls = "ContactRegister";
  if (!"name" in ContactRegister)
    ContactRegister.name = "ContactRegister";
  $desc = $collectedClasses.ContactRegister;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactRegister.prototype = $desc;
  function ContactSolver(constraints, constraintCount, worldManifold, tangent, temp1, temp2, P, dv, dv1, dv2, x, d, P1, P2, psolver, rA, rB) {
    this.constraints = constraints;
    this.constraintCount = constraintCount;
    this.worldManifold = worldManifold;
    this.tangent = tangent;
    this.temp1 = temp1;
    this.temp2 = temp2;
    this.P = P;
    this.dv = dv;
    this.dv1 = dv1;
    this.dv2 = dv2;
    this.x = x;
    this.d = d;
    this.P1 = P1;
    this.P2 = P2;
    this.psolver = psolver;
    this.rA = rA;
    this.rB = rB;
  }
  ContactSolver.builtin$cls = "ContactSolver";
  if (!"name" in ContactSolver)
    ContactSolver.name = "ContactSolver";
  $desc = $collectedClasses.ContactSolver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactSolver.prototype = $desc;
  ContactSolver.prototype.get$x = function() {
    return this.x;
  };
  ContactSolver.prototype.get$rA = function() {
    return this.rA;
  };
  ContactSolver.prototype.get$rB = function() {
    return this.rB;
  };
  function ContactSolver_closure() {
  }
  ContactSolver_closure.builtin$cls = "ContactSolver_closure";
  if (!"name" in ContactSolver_closure)
    ContactSolver_closure.name = "ContactSolver_closure";
  $desc = $collectedClasses.ContactSolver_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactSolver_closure.prototype = $desc;
  function PositionSolverManifold(normal, point, separation, pointA, pointB, temp, planePoint, clipPoint) {
    this.normal = normal;
    this.point = point;
    this.separation = separation;
    this.pointA = pointA;
    this.pointB = pointB;
    this.temp = temp;
    this.planePoint = planePoint;
    this.clipPoint = clipPoint;
  }
  PositionSolverManifold.builtin$cls = "PositionSolverManifold";
  if (!"name" in PositionSolverManifold)
    PositionSolverManifold.name = "PositionSolverManifold";
  $desc = $collectedClasses.PositionSolverManifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionSolverManifold.prototype = $desc;
  function PolygonAndCircleContact(flags, prev, next, edge1, edge2, fixtureA, fixtureB, manifold, toiCount, pool, _oldManifold) {
    this.flags = flags;
    this.prev = prev;
    this.next = next;
    this.edge1 = edge1;
    this.edge2 = edge2;
    this.fixtureA = fixtureA;
    this.fixtureB = fixtureB;
    this.manifold = manifold;
    this.toiCount = toiCount;
    this.pool = pool;
    this._oldManifold = _oldManifold;
  }
  PolygonAndCircleContact.builtin$cls = "PolygonAndCircleContact";
  if (!"name" in PolygonAndCircleContact)
    PolygonAndCircleContact.name = "PolygonAndCircleContact";
  $desc = $collectedClasses.PolygonAndCircleContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonAndCircleContact.prototype = $desc;
  function PolygonContact(flags, prev, next, edge1, edge2, fixtureA, fixtureB, manifold, toiCount, pool, _oldManifold) {
    this.flags = flags;
    this.prev = prev;
    this.next = next;
    this.edge1 = edge1;
    this.edge2 = edge2;
    this.fixtureA = fixtureA;
    this.fixtureB = fixtureB;
    this.manifold = manifold;
    this.toiCount = toiCount;
    this.pool = pool;
    this._oldManifold = _oldManifold;
  }
  PolygonContact.builtin$cls = "PolygonContact";
  if (!"name" in PolygonContact)
    PolygonContact.name = "PolygonContact";
  $desc = $collectedClasses.PolygonContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonContact.prototype = $desc;
  function TimeOfImpactConstraint(localPoints, localNormal, localPoint, type, radius, pointCount, bodyA, bodyB) {
    this.localPoints = localPoints;
    this.localNormal = localNormal;
    this.localPoint = localPoint;
    this.type = type;
    this.radius = radius;
    this.pointCount = pointCount;
    this.bodyA = bodyA;
    this.bodyB = bodyB;
  }
  TimeOfImpactConstraint.builtin$cls = "TimeOfImpactConstraint";
  if (!"name" in TimeOfImpactConstraint)
    TimeOfImpactConstraint.name = "TimeOfImpactConstraint";
  $desc = $collectedClasses.TimeOfImpactConstraint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactConstraint.prototype = $desc;
  TimeOfImpactConstraint.prototype.get$localPoints = function() {
    return this.localPoints;
  };
  TimeOfImpactConstraint.prototype.get$localNormal = function() {
    return this.localNormal;
  };
  TimeOfImpactConstraint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  TimeOfImpactConstraint.prototype.get$type = function() {
    return this.type;
  };
  TimeOfImpactConstraint.prototype.set$type = function(v) {
    return this.type = v;
  };
  TimeOfImpactConstraint.prototype.set$radius = function(v) {
    return this.radius = v;
  };
  TimeOfImpactConstraint.prototype.get$pointCount = function() {
    return this.pointCount;
  };
  TimeOfImpactConstraint.prototype.set$pointCount = function(v) {
    return this.pointCount = v;
  };
  TimeOfImpactConstraint.prototype.get$bodyA = function() {
    return this.bodyA;
  };
  TimeOfImpactConstraint.prototype.set$bodyA = function(v) {
    return this.bodyA = v;
  };
  TimeOfImpactConstraint.prototype.get$bodyB = function() {
    return this.bodyB;
  };
  TimeOfImpactConstraint.prototype.set$bodyB = function(v) {
    return this.bodyB = v;
  };
  function TimeOfImpactConstraint_closure() {
  }
  TimeOfImpactConstraint_closure.builtin$cls = "TimeOfImpactConstraint_closure";
  if (!"name" in TimeOfImpactConstraint_closure)
    TimeOfImpactConstraint_closure.name = "TimeOfImpactConstraint_closure";
  $desc = $collectedClasses.TimeOfImpactConstraint_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactConstraint_closure.prototype = $desc;
  function TimeOfImpactSolver(constraints, count, toiBody, psm, rA, rB, P, temp) {
    this.constraints = constraints;
    this.count = count;
    this.toiBody = toiBody;
    this.psm = psm;
    this.rA = rA;
    this.rB = rB;
    this.P = P;
    this.temp = temp;
  }
  TimeOfImpactSolver.builtin$cls = "TimeOfImpactSolver";
  if (!"name" in TimeOfImpactSolver)
    TimeOfImpactSolver.name = "TimeOfImpactSolver";
  $desc = $collectedClasses.TimeOfImpactSolver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactSolver.prototype = $desc;
  TimeOfImpactSolver.prototype.get$rA = function() {
    return this.rA;
  };
  TimeOfImpactSolver.prototype.get$rB = function() {
    return this.rB;
  };
  function TimeOfImpactSolver_closure() {
  }
  TimeOfImpactSolver_closure.builtin$cls = "TimeOfImpactSolver_closure";
  if (!"name" in TimeOfImpactSolver_closure)
    TimeOfImpactSolver_closure.name = "TimeOfImpactSolver_closure";
  $desc = $collectedClasses.TimeOfImpactSolver_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactSolver_closure.prototype = $desc;
  function TimeOfImpactSolverManifold(normal, point, separation, pointA, pointB, temp, planePoint, clipPoint) {
    this.normal = normal;
    this.point = point;
    this.separation = separation;
    this.pointA = pointA;
    this.pointB = pointB;
    this.temp = temp;
    this.planePoint = planePoint;
    this.clipPoint = clipPoint;
  }
  TimeOfImpactSolverManifold.builtin$cls = "TimeOfImpactSolverManifold";
  if (!"name" in TimeOfImpactSolverManifold)
    TimeOfImpactSolverManifold.name = "TimeOfImpactSolverManifold";
  $desc = $collectedClasses.TimeOfImpactSolverManifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactSolverManifold.prototype = $desc;
  function Filter(categoryBits, maskBits, groupIndex) {
    this.categoryBits = categoryBits;
    this.maskBits = maskBits;
    this.groupIndex = groupIndex;
  }
  Filter.builtin$cls = "Filter";
  if (!"name" in Filter)
    Filter.name = "Filter";
  $desc = $collectedClasses.Filter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Filter.prototype = $desc;
  Filter.prototype.get$categoryBits = function() {
    return this.categoryBits;
  };
  function Fixture(box, density, next, body, shape, friction, restitution, proxy, filter, isSensor, userData, _poolOne, _poolTwo) {
    this.box = box;
    this.density = density;
    this.next = next;
    this.body = body;
    this.shape = shape;
    this.friction = friction;
    this.restitution = restitution;
    this.proxy = proxy;
    this.filter = filter;
    this.isSensor = isSensor;
    this.userData = userData;
    this._poolOne = _poolOne;
    this._poolTwo = _poolTwo;
  }
  Fixture.builtin$cls = "Fixture";
  if (!"name" in Fixture)
    Fixture.name = "Fixture";
  $desc = $collectedClasses.Fixture;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Fixture.prototype = $desc;
  function FixtureDef(shape, userData, friction, restitution, density, isSensor, filter) {
    this.shape = shape;
    this.userData = userData;
    this.friction = friction;
    this.restitution = restitution;
    this.density = density;
    this.isSensor = isSensor;
    this.filter = filter;
  }
  FixtureDef.builtin$cls = "FixtureDef";
  if (!"name" in FixtureDef)
    FixtureDef.name = "FixtureDef";
  $desc = $collectedClasses.FixtureDef;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixtureDef.prototype = $desc;
  function Island(listener, bodies, contacts, joints, positions, velocities, bodyCount, jointCount, contactCount, bodyCapacity, contactCapacity, jointCapacity, positionIterationCount, _contactSolver, _translation, impulse) {
    this.listener = listener;
    this.bodies = bodies;
    this.contacts = contacts;
    this.joints = joints;
    this.positions = positions;
    this.velocities = velocities;
    this.bodyCount = bodyCount;
    this.jointCount = jointCount;
    this.contactCount = contactCount;
    this.bodyCapacity = bodyCapacity;
    this.contactCapacity = contactCapacity;
    this.jointCapacity = jointCapacity;
    this.positionIterationCount = positionIterationCount;
    this._contactSolver = _contactSolver;
    this._translation = _translation;
    this.impulse = impulse;
  }
  Island.builtin$cls = "Island";
  if (!"name" in Island)
    Island.name = "Island";
  $desc = $collectedClasses.Island;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Island.prototype = $desc;
  function Position(x, a) {
    this.x = x;
    this.a = a;
  }
  Position.builtin$cls = "Position";
  if (!"name" in Position)
    Position.name = "Position";
  $desc = $collectedClasses.Position;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Position.prototype = $desc;
  Position.prototype.get$x = function() {
    return this.x;
  };
  Position.prototype.set$x = function(v) {
    return this.x = v;
  };
  function Velocity(v, a) {
    this.v = v;
    this.a = a;
  }
  Velocity.builtin$cls = "Velocity";
  if (!"name" in Velocity)
    Velocity.name = "Velocity";
  $desc = $collectedClasses.Velocity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Velocity.prototype = $desc;
  function Joint() {
  }
  Joint.builtin$cls = "Joint";
  if (!"name" in Joint)
    Joint.name = "Joint";
  $desc = $collectedClasses.Joint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Joint.prototype = $desc;
  function TimeStep(dt, inv_dt, dtRatio, velocityIterations, positionIterations, warmStarting) {
    this.dt = dt;
    this.inv_dt = inv_dt;
    this.dtRatio = dtRatio;
    this.velocityIterations = velocityIterations;
    this.positionIterations = positionIterations;
    this.warmStarting = warmStarting;
  }
  TimeStep.builtin$cls = "TimeStep";
  if (!"name" in TimeStep)
    TimeStep.name = "TimeStep";
  $desc = $collectedClasses.TimeStep;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeStep.prototype = $desc;
  function World(_flags, _contactManager, _bodyList, _jointList, _bodyCount, _jointCount, _gravity, _allowSleep, _debugDraw, _fixtureDestructionListener, _jointDestructionListener, _pool, _inverseTimestep, _warmStarting, _continuousPhysics, _contactStacks, center, axis, timestep, cA, cB, wqwrapper, toiInput, toiOutput, backup, toiSolver, contacts, island, stack) {
    this._flags = _flags;
    this._contactManager = _contactManager;
    this._bodyList = _bodyList;
    this._jointList = _jointList;
    this._bodyCount = _bodyCount;
    this._jointCount = _jointCount;
    this._gravity = _gravity;
    this._allowSleep = _allowSleep;
    this._debugDraw = _debugDraw;
    this._fixtureDestructionListener = _fixtureDestructionListener;
    this._jointDestructionListener = _jointDestructionListener;
    this._pool = _pool;
    this._inverseTimestep = _inverseTimestep;
    this._warmStarting = _warmStarting;
    this._continuousPhysics = _continuousPhysics;
    this._contactStacks = _contactStacks;
    this.center = center;
    this.axis = axis;
    this.timestep = timestep;
    this.cA = cA;
    this.cB = cB;
    this.wqwrapper = wqwrapper;
    this.toiInput = toiInput;
    this.toiOutput = toiOutput;
    this.backup = backup;
    this.toiSolver = toiSolver;
    this.contacts = contacts;
    this.island = island;
    this.stack = stack;
  }
  World.builtin$cls = "World";
  if (!"name" in World)
    World.name = "World";
  $desc = $collectedClasses.World;
  if ($desc instanceof Array)
    $desc = $desc[1];
  World.prototype = $desc;
  function WorldQueryWrapper(broadPhase, callback) {
    this.broadPhase = broadPhase;
    this.callback = callback;
  }
  WorldQueryWrapper.builtin$cls = "WorldQueryWrapper";
  if (!"name" in WorldQueryWrapper)
    WorldQueryWrapper.name = "WorldQueryWrapper";
  $desc = $collectedClasses.WorldQueryWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldQueryWrapper.prototype = $desc;
  function DefaultWorldPool(collision, timeOfImpact, distance) {
    this.collision = collision;
    this.timeOfImpact = timeOfImpact;
    this.distance = distance;
  }
  DefaultWorldPool.builtin$cls = "DefaultWorldPool";
  if (!"name" in DefaultWorldPool)
    DefaultWorldPool.name = "DefaultWorldPool";
  $desc = $collectedClasses.DefaultWorldPool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefaultWorldPool.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, __internal$_start, _endOrLength) {
    this._iterable = _iterable;
    this.__internal$_start = __internal$_start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function _HashSet() {
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._position = _position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function bool() {
  }
  bool.builtin$cls = "bool";
  if (!"name" in bool)
    bool.name = "bool";
  $desc = $collectedClasses.bool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bool.prototype = $desc;
  function $double() {
  }
  $double.builtin$cls = "$double";
  if (!"name" in $double)
    $double.name = "$double";
  $desc = $collectedClasses.$double;
  if ($desc instanceof Array)
    $desc = $desc[1];
  $double.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  function $int() {
  }
  $int.builtin$cls = "$int";
  if (!"name" in $int)
    $int.name = "$int";
  $desc = $collectedClasses.$int;
  if ($desc instanceof Array)
    $desc = $desc[1];
  $int.prototype = $desc;
  function List() {
  }
  List.builtin$cls = "List";
  if (!"name" in List)
    List.name = "List";
  $desc = $collectedClasses.List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  List.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function num() {
  }
  num.builtin$cls = "num";
  if (!"name" in num)
    num.name = "num";
  $desc = $collectedClasses.num;
  if ($desc instanceof Array)
    $desc = $desc[1];
  num.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Stopwatch(frequency, _start, _stop) {
    this.frequency = frequency;
    this._start = _start;
    this._stop = _stop;
  }
  Stopwatch.builtin$cls = "Stopwatch";
  if (!"name" in Stopwatch)
    Stopwatch.name = "Stopwatch";
  $desc = $collectedClasses.Stopwatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stopwatch.prototype = $desc;
  function String() {
  }
  String.builtin$cls = "String";
  if (!"name" in String)
    String.name = "String";
  $desc = $collectedClasses.String;
  if ($desc instanceof Array)
    $desc = $desc[1];
  String.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function NativeTypedArray() {
  }
  NativeTypedArray.builtin$cls = "NativeTypedArray";
  if (!"name" in NativeTypedArray)
    NativeTypedArray.name = "NativeTypedArray";
  $desc = $collectedClasses.NativeTypedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray.prototype = $desc;
  function NativeTypedArrayOfDouble() {
  }
  NativeTypedArrayOfDouble.builtin$cls = "NativeTypedArrayOfDouble";
  if (!"name" in NativeTypedArrayOfDouble)
    NativeTypedArrayOfDouble.name = "NativeTypedArrayOfDouble";
  $desc = $collectedClasses.NativeTypedArrayOfDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfDouble.prototype = $desc;
  function NativeTypedArray_ListMixin() {
  }
  NativeTypedArray_ListMixin.builtin$cls = "NativeTypedArray_ListMixin";
  if (!"name" in NativeTypedArray_ListMixin)
    NativeTypedArray_ListMixin.name = "NativeTypedArray_ListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin)
    NativeTypedArray_ListMixin_FixedLengthListMixin.name = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
  function Matrix2(storage) {
    this.storage = storage;
  }
  Matrix2.builtin$cls = "Matrix2";
  if (!"name" in Matrix2)
    Matrix2.name = "Matrix2";
  $desc = $collectedClasses.Matrix2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix2.prototype = $desc;
  Matrix2.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector2(storage) {
    this.storage = storage;
  }
  Vector2.builtin$cls = "Vector2";
  if (!"name" in Vector2)
    Vector2.name = "Vector2";
  $desc = $collectedClasses.Vector2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector2.prototype = $desc;
  Vector2.prototype.get$storage = function() {
    return this.storage;
  };
  return [NativeTypedData, NativeFloat32List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSNumber, JSInt, JSDouble, JSString, ReflectionInfo, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, TearOffClosure, BoundClosure, RuntimeError, initHooks_closure, initHooks_closure0, initHooks_closure1, Bench2d, ContactFilter, ContactImpulse, AxisAlignedBox, BroadPhase, BroadPhase_updatePairs_closure, DynamicTree, DynamicTreeNode, Pair, Collision, ClipVertex, EdgeResults, ContactID, Distance, DistanceInput, DistanceOutput, DistanceProxy, Features, Manifold, ManifoldPoint, MassData, PolygonShape, Shape, Simplex, SimplexCache, SimplexCache_closure, SimplexCache_closure0, SimplexVertex, TimeOfImpact, SeparationFunction, TimeOfImpactInput, TimeOfImpactOutput, WorldManifold, WorldManifold_closure, Sweep, Transform, Body, BodyDef, ContactManager, CircleContact, Contact, ContactConstraint, ContactConstraint_closure, ContactConstraintPoint, ContactEdge, ContactRegister, ContactSolver, ContactSolver_closure, PositionSolverManifold, PolygonAndCircleContact, PolygonContact, TimeOfImpactConstraint, TimeOfImpactConstraint_closure, TimeOfImpactSolver, TimeOfImpactSolver_closure, TimeOfImpactSolverManifold, Filter, Fixture, FixtureDef, Island, Position, Velocity, Joint, TimeStep, World, WorldQueryWrapper, DefaultWorldPool, ListIterable, SubListIterable, ListIterator, FixedLengthListMixin, _HashSet, _IdentityHashSet, HashSetIterator, _HashSetBase, IterableBase, ListMixin, ListQueue, _ListQueueIterator, bool, $double, Error, NullThrownError, ArgumentError, RangeError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, CyclicInitializationError, _ExceptionImplementation, $int, List, Null, num, Object, Stopwatch, String, StringBuffer, NativeTypedArray, NativeTypedArrayOfDouble, NativeTypedArray_ListMixin, NativeTypedArray_ListMixin_FixedLengthListMixin, Matrix2, Vector2];
}
